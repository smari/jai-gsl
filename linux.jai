//
// This file was auto-generated using the following command:
//
// jai first.jai
//



M_SQRT3 :: 1.73205080756887729352744634151;

M_SQRTPI :: 1.77245385090551602729816748334;

M_LNPI :: 1.14472988584940017414342735135;

M_EULER :: 0.57721566490153286060651209008;

GSL_COMPLEX_LEGACY :: 1;

GSL_PREC_DOUBLE :: 0;
GSL_PREC_SINGLE :: 1;
GSL_PREC_APPROX :: 2;

GSL_MODE_DEFAULT :: 0;

GSL_ODEIV_HADJ_INC :: 1;
GSL_ODEIV_HADJ_NIL :: 0;
GSL_ODEIV_HADJ_DEC :: -1;

GSL_CONST_MKSA_SPEED_OF_LIGHT :: 2.99792458e8;
GSL_CONST_MKSA_GRAVITATIONAL_CONSTANT :: 6.673e-11;
GSL_CONST_MKSA_PLANCKS_CONSTANT_H :: 6.62606896e-34;
GSL_CONST_MKSA_PLANCKS_CONSTANT_HBAR :: 1.05457162825e-34;
GSL_CONST_MKSA_ASTRONOMICAL_UNIT :: 1.49597870691e11;
GSL_CONST_MKSA_LIGHT_YEAR :: 9.46053620707e15;
GSL_CONST_MKSA_PARSEC :: 3.08567758135e16;
GSL_CONST_MKSA_GRAV_ACCEL :: 9.80665e0;
GSL_CONST_MKSA_ELECTRON_VOLT :: 1.602176487e-19;
GSL_CONST_MKSA_MASS_ELECTRON :: 9.10938188e-31;
GSL_CONST_MKSA_MASS_MUON :: 1.88353109e-28;
GSL_CONST_MKSA_MASS_PROTON :: 1.67262158e-27;
GSL_CONST_MKSA_MASS_NEUTRON :: 1.67492716e-27;
GSL_CONST_MKSA_RYDBERG :: 2.17987196968e-18;
GSL_CONST_MKSA_BOLTZMANN :: 1.3806504e-23;
GSL_CONST_MKSA_MOLAR_GAS :: 8.314472e0;
GSL_CONST_MKSA_STANDARD_GAS_VOLUME :: 2.2710981e-2;
GSL_CONST_MKSA_MINUTE :: 6.0e1;
GSL_CONST_MKSA_HOUR :: 3.6e3;
GSL_CONST_MKSA_DAY :: 8.64e4;
GSL_CONST_MKSA_WEEK :: 6.048e5;
GSL_CONST_MKSA_INCH :: 2.54e-2;
GSL_CONST_MKSA_FOOT :: 3.048e-1;
GSL_CONST_MKSA_YARD :: 9.144e-1;
GSL_CONST_MKSA_MILE :: 1.609344e3;
GSL_CONST_MKSA_NAUTICAL_MILE :: 1.852e3;
GSL_CONST_MKSA_FATHOM :: 1.8288e0;
GSL_CONST_MKSA_MIL :: 2.54e-5;
GSL_CONST_MKSA_POINT :: 3.52777777778e-4;
GSL_CONST_MKSA_TEXPOINT :: 3.51459803515e-4;
GSL_CONST_MKSA_MICRON :: 1.0e-6;
GSL_CONST_MKSA_ANGSTROM :: 1.0e-10;
GSL_CONST_MKSA_HECTARE :: 1.0e4;
GSL_CONST_MKSA_ACRE :: 4.04685642241e3;
GSL_CONST_MKSA_BARN :: 1.0e-28;
GSL_CONST_MKSA_LITER :: 1.0e-3;
GSL_CONST_MKSA_US_GALLON :: 3.78541178402e-3;
GSL_CONST_MKSA_QUART :: 9.46352946004e-4;
GSL_CONST_MKSA_PINT :: 4.73176473002e-4;
GSL_CONST_MKSA_CUP :: 2.36588236501e-4;
GSL_CONST_MKSA_FLUID_OUNCE :: 2.95735295626e-5;
GSL_CONST_MKSA_TABLESPOON :: 1.47867647813e-5;
GSL_CONST_MKSA_TEASPOON :: 4.92892159375e-6;
GSL_CONST_MKSA_CANADIAN_GALLON :: 4.54609e-3;
GSL_CONST_MKSA_UK_GALLON :: 4.546092e-3;
GSL_CONST_MKSA_MILES_PER_HOUR :: 4.4704e-1;
GSL_CONST_MKSA_KILOMETERS_PER_HOUR :: 2.77777777778e-1;
GSL_CONST_MKSA_KNOT :: 5.14444444444e-1;
GSL_CONST_MKSA_POUND_MASS :: 4.5359237e-1;
GSL_CONST_MKSA_OUNCE_MASS :: 2.8349523125e-2;
GSL_CONST_MKSA_TON :: 9.0718474e2;
GSL_CONST_MKSA_METRIC_TON :: 1.0e3;
GSL_CONST_MKSA_UK_TON :: 1.0160469088e3;
GSL_CONST_MKSA_TROY_OUNCE :: 3.1103475e-2;
GSL_CONST_MKSA_CARAT :: 2.0e-4;
GSL_CONST_MKSA_UNIFIED_ATOMIC_MASS :: 1.660538782e-27;
GSL_CONST_MKSA_GRAM_FORCE :: 9.80665e-3;
GSL_CONST_MKSA_POUND_FORCE :: 4.44822161526e0;
GSL_CONST_MKSA_KILOPOUND_FORCE :: 4.44822161526e3;
GSL_CONST_MKSA_POUNDAL :: 1.38255e-1;
GSL_CONST_MKSA_CALORIE :: 4.1868e0;
GSL_CONST_MKSA_BTU :: 1.05505585262e3;
GSL_CONST_MKSA_THERM :: 1.05506e8;
GSL_CONST_MKSA_HORSEPOWER :: 7.457e2;
GSL_CONST_MKSA_BAR :: 1.0e5;
GSL_CONST_MKSA_STD_ATMOSPHERE :: 1.01325e5;
GSL_CONST_MKSA_TORR :: 1.33322368421e2;
GSL_CONST_MKSA_METER_OF_MERCURY :: 1.33322368421e5;
GSL_CONST_MKSA_INCH_OF_MERCURY :: 3.38638815789e3;
GSL_CONST_MKSA_INCH_OF_WATER :: 2.490889e2;
GSL_CONST_MKSA_PSI :: 6.89475729317e3;
GSL_CONST_MKSA_POISE :: 1.0e-1;
GSL_CONST_MKSA_STOKES :: 1.0e-4;
GSL_CONST_MKSA_STILB :: 1.0e4;
GSL_CONST_MKSA_LUMEN :: 1.0e0;
GSL_CONST_MKSA_LUX :: 1.0e0;
GSL_CONST_MKSA_PHOT :: 1.0e4;
GSL_CONST_MKSA_FOOTCANDLE :: 1.076e1;
GSL_CONST_MKSA_LAMBERT :: 1.0e4;
GSL_CONST_MKSA_FOOTLAMBERT :: 1.07639104e1;
GSL_CONST_MKSA_CURIE :: 3.7e10;
GSL_CONST_MKSA_ROENTGEN :: 2.58e-4;
GSL_CONST_MKSA_RAD :: 1.0e-2;
GSL_CONST_MKSA_SOLAR_MASS :: 1.98892e30;
GSL_CONST_MKSA_BOHR_RADIUS :: 5.291772083e-11;
GSL_CONST_MKSA_NEWTON :: 1.0e0;
GSL_CONST_MKSA_DYNE :: 1.0e-5;
GSL_CONST_MKSA_JOULE :: 1.0e0;
GSL_CONST_MKSA_ERG :: 1.0e-7;
GSL_CONST_MKSA_STEFAN_BOLTZMANN_CONSTANT :: 5.67040047374e-8;
GSL_CONST_MKSA_THOMSON_CROSS_SECTION :: 6.65245893699e-29;
GSL_CONST_MKSA_BOHR_MAGNETON :: 9.27400899e-24;
GSL_CONST_MKSA_NUCLEAR_MAGNETON :: 5.05078317e-27;
GSL_CONST_MKSA_ELECTRON_MAGNETIC_MOMENT :: 9.28476362e-24;
GSL_CONST_MKSA_PROTON_MAGNETIC_MOMENT :: 1.410606633e-26;
GSL_CONST_MKSA_FARADAY :: 9.64853429775e4;
GSL_CONST_MKSA_ELECTRON_CHARGE :: 1.602176487e-19;
GSL_CONST_MKSA_VACUUM_PERMITTIVITY :: 8.854187817e-12;
GSL_CONST_MKSA_VACUUM_PERMEABILITY :: 1.25663706144e-6;
GSL_CONST_MKSA_DEBYE :: 3.33564095198e-30;
GSL_CONST_MKSA_GAUSS :: 1.0e-4;

GSL_CONST_CGSM_SPEED_OF_LIGHT :: 2.99792458e10;
GSL_CONST_CGSM_GRAVITATIONAL_CONSTANT :: 6.673e-8;
GSL_CONST_CGSM_PLANCKS_CONSTANT_H :: 6.62606896e-27;
GSL_CONST_CGSM_PLANCKS_CONSTANT_HBAR :: 1.05457162825e-27;
GSL_CONST_CGSM_ASTRONOMICAL_UNIT :: 1.49597870691e13;
GSL_CONST_CGSM_LIGHT_YEAR :: 9.46053620707e17;
GSL_CONST_CGSM_PARSEC :: 3.08567758135e18;
GSL_CONST_CGSM_GRAV_ACCEL :: 9.80665e2;
GSL_CONST_CGSM_ELECTRON_VOLT :: 1.602176487e-12;
GSL_CONST_CGSM_MASS_ELECTRON :: 9.10938188e-28;
GSL_CONST_CGSM_MASS_MUON :: 1.88353109e-25;
GSL_CONST_CGSM_MASS_PROTON :: 1.67262158e-24;
GSL_CONST_CGSM_MASS_NEUTRON :: 1.67492716e-24;
GSL_CONST_CGSM_RYDBERG :: 2.17987196968e-11;
GSL_CONST_CGSM_BOLTZMANN :: 1.3806504e-16;
GSL_CONST_CGSM_MOLAR_GAS :: 8.314472e7;
GSL_CONST_CGSM_STANDARD_GAS_VOLUME :: 2.2710981e4;
GSL_CONST_CGSM_MINUTE :: 6.0e1;
GSL_CONST_CGSM_HOUR :: 3.6e3;
GSL_CONST_CGSM_DAY :: 8.64e4;
GSL_CONST_CGSM_WEEK :: 6.048e5;
GSL_CONST_CGSM_INCH :: 2.54e0;
GSL_CONST_CGSM_FOOT :: 3.048e1;
GSL_CONST_CGSM_YARD :: 9.144e1;
GSL_CONST_CGSM_MILE :: 1.609344e5;
GSL_CONST_CGSM_NAUTICAL_MILE :: 1.852e5;
GSL_CONST_CGSM_FATHOM :: 1.8288e2;
GSL_CONST_CGSM_MIL :: 2.54e-3;
GSL_CONST_CGSM_POINT :: 3.52777777778e-2;
GSL_CONST_CGSM_TEXPOINT :: 3.51459803515e-2;
GSL_CONST_CGSM_MICRON :: 1.0e-4;
GSL_CONST_CGSM_ANGSTROM :: 1.0e-8;
GSL_CONST_CGSM_HECTARE :: 1.0e8;
GSL_CONST_CGSM_ACRE :: 4.04685642241e7;
GSL_CONST_CGSM_BARN :: 1.0e-24;
GSL_CONST_CGSM_LITER :: 1.0e3;
GSL_CONST_CGSM_US_GALLON :: 3.78541178402e3;
GSL_CONST_CGSM_QUART :: 9.46352946004e2;
GSL_CONST_CGSM_PINT :: 4.73176473002e2;
GSL_CONST_CGSM_CUP :: 2.36588236501e2;
GSL_CONST_CGSM_FLUID_OUNCE :: 2.95735295626e1;
GSL_CONST_CGSM_TABLESPOON :: 1.47867647813e1;
GSL_CONST_CGSM_TEASPOON :: 4.92892159375e0;
GSL_CONST_CGSM_CANADIAN_GALLON :: 4.54609e3;
GSL_CONST_CGSM_UK_GALLON :: 4.546092e3;
GSL_CONST_CGSM_MILES_PER_HOUR :: 4.4704e1;
GSL_CONST_CGSM_KILOMETERS_PER_HOUR :: 2.77777777778e1;
GSL_CONST_CGSM_KNOT :: 5.14444444444e1;
GSL_CONST_CGSM_POUND_MASS :: 4.5359237e2;
GSL_CONST_CGSM_OUNCE_MASS :: 2.8349523125e1;
GSL_CONST_CGSM_TON :: 9.0718474e5;
GSL_CONST_CGSM_METRIC_TON :: 1.0e6;
GSL_CONST_CGSM_UK_TON :: 1.0160469088e6;
GSL_CONST_CGSM_TROY_OUNCE :: 3.1103475e1;
GSL_CONST_CGSM_CARAT :: 2.0e-1;
GSL_CONST_CGSM_UNIFIED_ATOMIC_MASS :: 1.660538782e-24;
GSL_CONST_CGSM_GRAM_FORCE :: 9.80665e2;
GSL_CONST_CGSM_POUND_FORCE :: 4.44822161526e5;
GSL_CONST_CGSM_KILOPOUND_FORCE :: 4.44822161526e8;
GSL_CONST_CGSM_POUNDAL :: 1.38255e4;
GSL_CONST_CGSM_CALORIE :: 4.1868e7;
GSL_CONST_CGSM_BTU :: 1.05505585262e10;
GSL_CONST_CGSM_THERM :: 1.05506e15;
GSL_CONST_CGSM_HORSEPOWER :: 7.457e9;
GSL_CONST_CGSM_BAR :: 1.0e6;
GSL_CONST_CGSM_STD_ATMOSPHERE :: 1.01325e6;
GSL_CONST_CGSM_TORR :: 1.33322368421e3;
GSL_CONST_CGSM_METER_OF_MERCURY :: 1.33322368421e6;
GSL_CONST_CGSM_INCH_OF_MERCURY :: 3.38638815789e4;
GSL_CONST_CGSM_INCH_OF_WATER :: 2.490889e3;
GSL_CONST_CGSM_PSI :: 6.89475729317e4;
GSL_CONST_CGSM_POISE :: 1.0e0;
GSL_CONST_CGSM_STOKES :: 1.0e0;
GSL_CONST_CGSM_STILB :: 1.0e0;
GSL_CONST_CGSM_LUMEN :: 1.0e0;
GSL_CONST_CGSM_LUX :: 1.0e-4;
GSL_CONST_CGSM_PHOT :: 1.0e0;
GSL_CONST_CGSM_FOOTCANDLE :: 1.076e-3;
GSL_CONST_CGSM_LAMBERT :: 1.0e0;
GSL_CONST_CGSM_FOOTLAMBERT :: 1.07639104e-3;
GSL_CONST_CGSM_CURIE :: 3.7e10;
GSL_CONST_CGSM_ROENTGEN :: 2.58e-8;
GSL_CONST_CGSM_RAD :: 1.0e2;
GSL_CONST_CGSM_SOLAR_MASS :: 1.98892e33;
GSL_CONST_CGSM_BOHR_RADIUS :: 5.291772083e-9;
GSL_CONST_CGSM_NEWTON :: 1.0e5;
GSL_CONST_CGSM_DYNE :: 1.0e0;
GSL_CONST_CGSM_JOULE :: 1.0e7;
GSL_CONST_CGSM_ERG :: 1.0e0;
GSL_CONST_CGSM_STEFAN_BOLTZMANN_CONSTANT :: 5.67040047374e-5;
GSL_CONST_CGSM_THOMSON_CROSS_SECTION :: 6.65245893699e-25;
GSL_CONST_CGSM_BOHR_MAGNETON :: 9.27400899e-21;
GSL_CONST_CGSM_NUCLEAR_MAGNETON :: 5.05078317e-24;
GSL_CONST_CGSM_ELECTRON_MAGNETIC_MOMENT :: 9.28476362e-21;
GSL_CONST_CGSM_PROTON_MAGNETIC_MOMENT :: 1.410606633e-23;
GSL_CONST_CGSM_FARADAY :: 9.64853429775e3;
GSL_CONST_CGSM_ELECTRON_CHARGE :: 1.602176487e-20;

GSL_CONST_NUM_FINE_STRUCTURE :: 7.297352533e-3;
GSL_CONST_NUM_AVOGADRO :: 6.02214199e23;
GSL_CONST_NUM_YOTTA :: 1.0e24;
GSL_CONST_NUM_ZETTA :: 1.0e21;
GSL_CONST_NUM_EXA :: 1.0e18;
GSL_CONST_NUM_PETA :: 1.0e15;
GSL_CONST_NUM_TERA :: 1.0e12;
GSL_CONST_NUM_GIGA :: 1.0e9;
GSL_CONST_NUM_MEGA :: 1.0e6;
GSL_CONST_NUM_KILO :: 1.0e3;
GSL_CONST_NUM_MILLI :: 1.0e-3;
GSL_CONST_NUM_MICRO :: 1.0e-6;
GSL_CONST_NUM_NANO :: 1.0e-9;
GSL_CONST_NUM_PICO :: 1.0e-12;
GSL_CONST_NUM_FEMTO :: 1.0e-15;
GSL_CONST_NUM_ATTO :: 1.0e-18;
GSL_CONST_NUM_ZEPTO :: 1.0e-21;
GSL_CONST_NUM_YOCTO :: 1.0e-24;

CBLAS_ORDER :: enum u32 {
    RowMajor :: 101;
    ColMajor :: 102;
    CblasRowMajor :: RowMajor;
    CblasColMajor :: ColMajor;
}
CBLAS_TRANSPOSE :: enum u32 {
    NoTrans   :: 111;
    Trans     :: 112;
    ConjTrans :: 113;
    CblasNoTrans   :: NoTrans;
    CblasTrans     :: Trans;
    CblasConjTrans :: ConjTrans;
}
CBLAS_UPLO :: enum u32 {
    Upper :: 121;
    Lower :: 122;
    CblasUpper :: Upper;
    CblasLower :: Lower;
}
CBLAS_DIAG :: enum u32 {
    NonUnit :: 131;
    Unit    :: 132;
    CblasNonUnit :: NonUnit;
    CblasUnit    :: Unit;
}
CBLAS_SIDE :: enum u32 {
    Left  :: 141;
    Right :: 142;
    CblasLeft  :: Left;
    CblasRight :: Right;
}

/*
* ===========================================================================
* Prototypes for level 1 BLAS functions (complex are recast as routines)
* ===========================================================================
*/
cblas_sdsdot :: (N: s32, alpha: float, X: *float, incX: s32, Y: *float, incY: s32) -> float #foreign libgsl;

cblas_dsdot :: (N: s32, X: *float, incX: s32, Y: *float, incY: s32) -> float64 #foreign libgsl;

cblas_sdot :: (N: s32, X: *float, incX: s32, Y: *float, incY: s32) -> float #foreign libgsl;

cblas_ddot :: (N: s32, X: *float64, incX: s32, Y: *float64, incY: s32) -> float64 #foreign libgsl;

/*
* Functions having prefixes Z and C only
*/
cblas_cdotu_sub :: (N: s32, X: *void, incX: s32, Y: *void, incY: s32, dotu: *void) -> void #foreign libgsl;

cblas_cdotc_sub :: (N: s32, X: *void, incX: s32, Y: *void, incY: s32, dotc: *void) -> void #foreign libgsl;

cblas_zdotu_sub :: (N: s32, X: *void, incX: s32, Y: *void, incY: s32, dotu: *void) -> void #foreign libgsl;

cblas_zdotc_sub :: (N: s32, X: *void, incX: s32, Y: *void, incY: s32, dotc: *void) -> void #foreign libgsl;

/*
* Functions having prefixes S D SC DZ
*/
cblas_snrm2 :: (N: s32, X: *float, incX: s32) -> float #foreign libgsl;
cblas_sasum :: (N: s32, X: *float, incX: s32) -> float #foreign libgsl;

cblas_dnrm2 :: (N: s32, X: *float64, incX: s32) -> float64 #foreign libgsl;
cblas_dasum :: (N: s32, X: *float64, incX: s32) -> float64 #foreign libgsl;

cblas_scnrm2 :: (N: s32, X: *void, incX: s32) -> float #foreign libgsl;
cblas_scasum :: (N: s32, X: *void, incX: s32) -> float #foreign libgsl;

cblas_dznrm2 :: (N: s32, X: *void, incX: s32) -> float64 #foreign libgsl;
cblas_dzasum :: (N: s32, X: *void, incX: s32) -> float64 #foreign libgsl;

/*
* Functions having standard 4 prefixes (S D C Z)
*/
cblas_isamax :: (N: s32, X: *float, incX: s32) -> size_t #foreign libgsl;
cblas_idamax :: (N: s32, X: *float64, incX: s32) -> size_t #foreign libgsl;
cblas_icamax :: (N: s32, X: *void, incX: s32) -> size_t #foreign libgsl;
cblas_izamax :: (N: s32, X: *void, incX: s32) -> size_t #foreign libgsl;

/*
* Routines with standard 4 prefixes (s, d, c, z)
*/
cblas_sswap :: (N: s32, X: *float, incX: s32, Y: *float, incY: s32) -> void #foreign libgsl;

cblas_scopy :: (N: s32, X: *float, incX: s32, Y: *float, incY: s32) -> void #foreign libgsl;

cblas_saxpy :: (N: s32, alpha: float, X: *float, incX: s32, Y: *float, incY: s32) -> void #foreign libgsl;

cblas_dswap :: (N: s32, X: *float64, incX: s32, Y: *float64, incY: s32) -> void #foreign libgsl;

cblas_dcopy :: (N: s32, X: *float64, incX: s32, Y: *float64, incY: s32) -> void #foreign libgsl;

cblas_daxpy :: (N: s32, alpha: float64, X: *float64, incX: s32, Y: *float64, incY: s32) -> void #foreign libgsl;

cblas_cswap :: (N: s32, X: *void, incX: s32, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_ccopy :: (N: s32, X: *void, incX: s32, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_caxpy :: (N: s32, alpha: *void, X: *void, incX: s32, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_zswap :: (N: s32, X: *void, incX: s32, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_zcopy :: (N: s32, X: *void, incX: s32, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_zaxpy :: (N: s32, alpha: *void, X: *void, incX: s32, Y: *void, incY: s32) -> void #foreign libgsl;

/*
* Routines with S and D prefix only
*/
cblas_srotg :: (a: *float, b: *float, c: *float, s: *float) -> void #foreign libgsl;
cblas_srotmg :: (d1: *float, d2: *float, b1: *float, b2: float, P: *float) -> void #foreign libgsl;
cblas_srot :: (N: s32, X: *float, incX: s32, Y: *float, incY: s32, c: float, s: float) -> void #foreign libgsl;

cblas_srotm :: (N: s32, X: *float, incX: s32, Y: *float, incY: s32, P: *float) -> void #foreign libgsl;

cblas_drotg :: (a: *float64, b: *float64, c: *float64, s: *float64) -> void #foreign libgsl;
cblas_drotmg :: (d1: *float64, d2: *float64, b1: *float64, b2: float64, P: *float64) -> void #foreign libgsl;
cblas_drot :: (N: s32, X: *float64, incX: s32, Y: *float64, incY: s32, c: float64, s: float64) -> void #foreign libgsl;

cblas_drotm :: (N: s32, X: *float64, incX: s32, Y: *float64, incY: s32, P: *float64) -> void #foreign libgsl;

/*
* Routines with S D C Z CS and ZD prefixes
*/
cblas_sscal :: (N: s32, alpha: float, X: *float, incX: s32) -> void #foreign libgsl;
cblas_dscal :: (N: s32, alpha: float64, X: *float64, incX: s32) -> void #foreign libgsl;
cblas_cscal :: (N: s32, alpha: *void, X: *void, incX: s32) -> void #foreign libgsl;
cblas_zscal :: (N: s32, alpha: *void, X: *void, incX: s32) -> void #foreign libgsl;
cblas_csscal :: (N: s32, alpha: float, X: *void, incX: s32) -> void #foreign libgsl;
cblas_zdscal :: (N: s32, alpha: float64, X: *void, incX: s32) -> void #foreign libgsl;

/*
* Routines with standard 4 prefixes (S, D, C, Z)
*/
cblas_sgemv :: (order: CBLAS_ORDER, TransA: CBLAS_TRANSPOSE, M: s32, N: s32, alpha: float, A: *float, lda: s32, X: *float, incX: s32, beta: float, Y: *float, incY: s32) -> void #foreign libgsl;

cblas_sgbmv :: (order: CBLAS_ORDER, TransA: CBLAS_TRANSPOSE, M: s32, N: s32, KL: s32, KU: s32, alpha: float, A: *float, lda: s32, X: *float, incX: s32, beta: float, Y: *float, incY: s32) -> void #foreign libgsl;

cblas_strmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, A: *float, lda: s32, X: *float, incX: s32) -> void #foreign libgsl;

cblas_stbmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, K: s32, A: *float, lda: s32, X: *float, incX: s32) -> void #foreign libgsl;

cblas_stpmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, Ap: *float, X: *float, incX: s32) -> void #foreign libgsl;

cblas_strsv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, A: *float, lda: s32, X: *float, incX: s32) -> void #foreign libgsl;

cblas_stbsv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, K: s32, A: *float, lda: s32, X: *float, incX: s32) -> void #foreign libgsl;

cblas_stpsv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, Ap: *float, X: *float, incX: s32) -> void #foreign libgsl;

cblas_dgemv :: (order: CBLAS_ORDER, TransA: CBLAS_TRANSPOSE, M: s32, N: s32, alpha: float64, A: *float64, lda: s32, X: *float64, incX: s32, beta: float64, Y: *float64, incY: s32) -> void #foreign libgsl;

cblas_dgbmv :: (order: CBLAS_ORDER, TransA: CBLAS_TRANSPOSE, M: s32, N: s32, KL: s32, KU: s32, alpha: float64, A: *float64, lda: s32, X: *float64, incX: s32, beta: float64, Y: *float64, incY: s32) -> void #foreign libgsl;

cblas_dtrmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, A: *float64, lda: s32, X: *float64, incX: s32) -> void #foreign libgsl;

cblas_dtbmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, K: s32, A: *float64, lda: s32, X: *float64, incX: s32) -> void #foreign libgsl;

cblas_dtpmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, Ap: *float64, X: *float64, incX: s32) -> void #foreign libgsl;

cblas_dtrsv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, A: *float64, lda: s32, X: *float64, incX: s32) -> void #foreign libgsl;

cblas_dtbsv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, K: s32, A: *float64, lda: s32, X: *float64, incX: s32) -> void #foreign libgsl;

cblas_dtpsv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, Ap: *float64, X: *float64, incX: s32) -> void #foreign libgsl;

cblas_cgemv :: (order: CBLAS_ORDER, TransA: CBLAS_TRANSPOSE, M: s32, N: s32, alpha: *void, A: *void, lda: s32, X: *void, incX: s32, beta: *void, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_cgbmv :: (order: CBLAS_ORDER, TransA: CBLAS_TRANSPOSE, M: s32, N: s32, KL: s32, KU: s32, alpha: *void, A: *void, lda: s32, X: *void, incX: s32, beta: *void, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_ctrmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, A: *void, lda: s32, X: *void, incX: s32) -> void #foreign libgsl;

cblas_ctbmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, K: s32, A: *void, lda: s32, X: *void, incX: s32) -> void #foreign libgsl;

cblas_ctpmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, Ap: *void, X: *void, incX: s32) -> void #foreign libgsl;

cblas_ctrsv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, A: *void, lda: s32, X: *void, incX: s32) -> void #foreign libgsl;

cblas_ctbsv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, K: s32, A: *void, lda: s32, X: *void, incX: s32) -> void #foreign libgsl;

cblas_ctpsv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, Ap: *void, X: *void, incX: s32) -> void #foreign libgsl;

cblas_zgemv :: (order: CBLAS_ORDER, TransA: CBLAS_TRANSPOSE, M: s32, N: s32, alpha: *void, A: *void, lda: s32, X: *void, incX: s32, beta: *void, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_zgbmv :: (order: CBLAS_ORDER, TransA: CBLAS_TRANSPOSE, M: s32, N: s32, KL: s32, KU: s32, alpha: *void, A: *void, lda: s32, X: *void, incX: s32, beta: *void, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_ztrmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, A: *void, lda: s32, X: *void, incX: s32) -> void #foreign libgsl;

cblas_ztbmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, K: s32, A: *void, lda: s32, X: *void, incX: s32) -> void #foreign libgsl;

cblas_ztpmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, Ap: *void, X: *void, incX: s32) -> void #foreign libgsl;

cblas_ztrsv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, A: *void, lda: s32, X: *void, incX: s32) -> void #foreign libgsl;

cblas_ztbsv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, K: s32, A: *void, lda: s32, X: *void, incX: s32) -> void #foreign libgsl;

cblas_ztpsv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s32, Ap: *void, X: *void, incX: s32) -> void #foreign libgsl;

/*
* Routines with S and D prefixes only
*/
cblas_ssymv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float, A: *float, lda: s32, X: *float, incX: s32, beta: float, Y: *float, incY: s32) -> void #foreign libgsl;

cblas_ssbmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, K: s32, alpha: float, A: *float, lda: s32, X: *float, incX: s32, beta: float, Y: *float, incY: s32) -> void #foreign libgsl;

cblas_sspmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float, Ap: *float, X: *float, incX: s32, beta: float, Y: *float, incY: s32) -> void #foreign libgsl;

cblas_sger :: (order: CBLAS_ORDER, M: s32, N: s32, alpha: float, X: *float, incX: s32, Y: *float, incY: s32, A: *float, lda: s32) -> void #foreign libgsl;

cblas_ssyr :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float, X: *float, incX: s32, A: *float, lda: s32) -> void #foreign libgsl;

cblas_sspr :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float, X: *float, incX: s32, Ap: *float) -> void #foreign libgsl;

cblas_ssyr2 :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float, X: *float, incX: s32, Y: *float, incY: s32, A: *float, lda: s32) -> void #foreign libgsl;

cblas_sspr2 :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float, X: *float, incX: s32, Y: *float, incY: s32, A: *float) -> void #foreign libgsl;

cblas_dsymv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float64, A: *float64, lda: s32, X: *float64, incX: s32, beta: float64, Y: *float64, incY: s32) -> void #foreign libgsl;

cblas_dsbmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, K: s32, alpha: float64, A: *float64, lda: s32, X: *float64, incX: s32, beta: float64, Y: *float64, incY: s32) -> void #foreign libgsl;

cblas_dspmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float64, Ap: *float64, X: *float64, incX: s32, beta: float64, Y: *float64, incY: s32) -> void #foreign libgsl;

cblas_dger :: (order: CBLAS_ORDER, M: s32, N: s32, alpha: float64, X: *float64, incX: s32, Y: *float64, incY: s32, A: *float64, lda: s32) -> void #foreign libgsl;

cblas_dsyr :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float64, X: *float64, incX: s32, A: *float64, lda: s32) -> void #foreign libgsl;

cblas_dspr :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float64, X: *float64, incX: s32, Ap: *float64) -> void #foreign libgsl;

cblas_dsyr2 :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float64, X: *float64, incX: s32, Y: *float64, incY: s32, A: *float64, lda: s32) -> void #foreign libgsl;

cblas_dspr2 :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float64, X: *float64, incX: s32, Y: *float64, incY: s32, A: *float64) -> void #foreign libgsl;

/*
* Routines with C and Z prefixes only
*/
cblas_chemv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: *void, A: *void, lda: s32, X: *void, incX: s32, beta: *void, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_chbmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, K: s32, alpha: *void, A: *void, lda: s32, X: *void, incX: s32, beta: *void, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_chpmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: *void, Ap: *void, X: *void, incX: s32, beta: *void, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_cgeru :: (order: CBLAS_ORDER, M: s32, N: s32, alpha: *void, X: *void, incX: s32, Y: *void, incY: s32, A: *void, lda: s32) -> void #foreign libgsl;

cblas_cgerc :: (order: CBLAS_ORDER, M: s32, N: s32, alpha: *void, X: *void, incX: s32, Y: *void, incY: s32, A: *void, lda: s32) -> void #foreign libgsl;

cblas_cher :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float, X: *void, incX: s32, A: *void, lda: s32) -> void #foreign libgsl;

cblas_chpr :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float, X: *void, incX: s32, A: *void) -> void #foreign libgsl;

cblas_cher2 :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: *void, X: *void, incX: s32, Y: *void, incY: s32, A: *void, lda: s32) -> void #foreign libgsl;

cblas_chpr2 :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: *void, X: *void, incX: s32, Y: *void, incY: s32, Ap: *void) -> void #foreign libgsl;

cblas_zhemv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: *void, A: *void, lda: s32, X: *void, incX: s32, beta: *void, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_zhbmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, K: s32, alpha: *void, A: *void, lda: s32, X: *void, incX: s32, beta: *void, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_zhpmv :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: *void, Ap: *void, X: *void, incX: s32, beta: *void, Y: *void, incY: s32) -> void #foreign libgsl;

cblas_zgeru :: (order: CBLAS_ORDER, M: s32, N: s32, alpha: *void, X: *void, incX: s32, Y: *void, incY: s32, A: *void, lda: s32) -> void #foreign libgsl;

cblas_zgerc :: (order: CBLAS_ORDER, M: s32, N: s32, alpha: *void, X: *void, incX: s32, Y: *void, incY: s32, A: *void, lda: s32) -> void #foreign libgsl;

cblas_zher :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float64, X: *void, incX: s32, A: *void, lda: s32) -> void #foreign libgsl;

cblas_zhpr :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: float64, X: *void, incX: s32, A: *void) -> void #foreign libgsl;

cblas_zher2 :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: *void, X: *void, incX: s32, Y: *void, incY: s32, A: *void, lda: s32) -> void #foreign libgsl;

cblas_zhpr2 :: (order: CBLAS_ORDER, Uplo: CBLAS_UPLO, N: s32, alpha: *void, X: *void, incX: s32, Y: *void, incY: s32, Ap: *void) -> void #foreign libgsl;

/*
* Routines with standard 4 prefixes (S, D, C, Z)
*/
cblas_sgemm :: (Order: CBLAS_ORDER, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s32, N: s32, K: s32, alpha: float, A: *float, lda: s32, B: *float, ldb: s32, beta: float, C: *float, ldc: s32) -> void #foreign libgsl;

cblas_ssymm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: s32, N: s32, alpha: float, A: *float, lda: s32, B: *float, ldb: s32, beta: float, C: *float, ldc: s32) -> void #foreign libgsl;

cblas_ssyrk :: (Order: CBLAS_ORDER, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s32, K: s32, alpha: float, A: *float, lda: s32, beta: float, C: *float, ldc: s32) -> void #foreign libgsl;

cblas_ssyr2k :: (Order: CBLAS_ORDER, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s32, K: s32, alpha: float, A: *float, lda: s32, B: *float, ldb: s32, beta: float, C: *float, ldc: s32) -> void #foreign libgsl;

cblas_strmm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s32, N: s32, alpha: float, A: *float, lda: s32, B: *float, ldb: s32) -> void #foreign libgsl;

cblas_strsm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s32, N: s32, alpha: float, A: *float, lda: s32, B: *float, ldb: s32) -> void #foreign libgsl;

cblas_dgemm :: (Order: CBLAS_ORDER, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s32, N: s32, K: s32, alpha: float64, A: *float64, lda: s32, B: *float64, ldb: s32, beta: float64, C: *float64, ldc: s32) -> void #foreign libgsl;

cblas_dsymm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: s32, N: s32, alpha: float64, A: *float64, lda: s32, B: *float64, ldb: s32, beta: float64, C: *float64, ldc: s32) -> void #foreign libgsl;

cblas_dsyrk :: (Order: CBLAS_ORDER, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s32, K: s32, alpha: float64, A: *float64, lda: s32, beta: float64, C: *float64, ldc: s32) -> void #foreign libgsl;

cblas_dsyr2k :: (Order: CBLAS_ORDER, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s32, K: s32, alpha: float64, A: *float64, lda: s32, B: *float64, ldb: s32, beta: float64, C: *float64, ldc: s32) -> void #foreign libgsl;

cblas_dtrmm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s32, N: s32, alpha: float64, A: *float64, lda: s32, B: *float64, ldb: s32) -> void #foreign libgsl;

cblas_dtrsm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s32, N: s32, alpha: float64, A: *float64, lda: s32, B: *float64, ldb: s32) -> void #foreign libgsl;

cblas_cgemm :: (Order: CBLAS_ORDER, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s32, N: s32, K: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32, beta: *void, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_csymm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: s32, N: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32, beta: *void, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_csyrk :: (Order: CBLAS_ORDER, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s32, K: s32, alpha: *void, A: *void, lda: s32, beta: *void, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_csyr2k :: (Order: CBLAS_ORDER, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s32, K: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32, beta: *void, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_ctrmm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s32, N: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32) -> void #foreign libgsl;

cblas_ctrsm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s32, N: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32) -> void #foreign libgsl;

cblas_zgemm :: (Order: CBLAS_ORDER, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s32, N: s32, K: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32, beta: *void, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_zsymm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: s32, N: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32, beta: *void, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_zsyrk :: (Order: CBLAS_ORDER, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s32, K: s32, alpha: *void, A: *void, lda: s32, beta: *void, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_zsyr2k :: (Order: CBLAS_ORDER, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s32, K: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32, beta: *void, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_ztrmm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s32, N: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32) -> void #foreign libgsl;

cblas_ztrsm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s32, N: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32) -> void #foreign libgsl;

/*
* Routines with prefixes C and Z only
*/
cblas_chemm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: s32, N: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32, beta: *void, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_cherk :: (Order: CBLAS_ORDER, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s32, K: s32, alpha: float, A: *void, lda: s32, beta: float, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_cher2k :: (Order: CBLAS_ORDER, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s32, K: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32, beta: float, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_zhemm :: (Order: CBLAS_ORDER, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: s32, N: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32, beta: *void, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_zherk :: (Order: CBLAS_ORDER, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s32, K: s32, alpha: float64, A: *void, lda: s32, beta: float64, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_zher2k :: (Order: CBLAS_ORDER, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s32, K: s32, alpha: *void, A: *void, lda: s32, B: *void, ldb: s32, beta: float64, C: *void, ldc: s32) -> void #foreign libgsl;

cblas_xerbla_CFormat :: (p: s32, rout: *u8, form: *u8, __args: ..Any) -> void #foreign libgsl "cblas_xerbla";
cblas_xerbla :: (p: s32, rout: *u8, form: string, __args: ..Any) {
    push_allocator(temp);
    formatted_text_builder: String_Builder;
    print_to_builder(*formatted_text_builder, form, ..__args);
    append(*formatted_text_builder, "\0");
    formatted_text := builder_to_string(*formatted_text_builder);
    cblas_xerbla_CFormat(p, rout, "%s", formatted_text.data);
} @PrintLike

CBLAS_INDEX_t :: size_t;
CBLAS_ORDER_t :: CBLAS_ORDER;
CBLAS_TRANSPOSE_t :: CBLAS_TRANSPOSE;
CBLAS_UPLO_t :: CBLAS_UPLO;
CBLAS_DIAG_t :: CBLAS_DIAG;
CBLAS_SIDE_t :: CBLAS_SIDE;

/* Definition of an arbitrary function with parameters */
gsl_function_struct :: struct {
    function: #type (x: float64, params: *void) -> float64 #c_call;
    params:   *void;
}

gsl_function :: gsl_function_struct;

/* Definition of an arbitrary function returning two values, r1, r2 */
gsl_function_fdf_struct :: struct {
    f:      #type (x: float64, params: *void) -> float64 #c_call;
    df:     #type (x: float64, params: *void) -> float64 #c_call;
    fdf:    #type (x: float64, params: *void, f: *float64, df: *float64) -> void #c_call;
    params: *void;
}

gsl_function_fdf :: gsl_function_fdf_struct;

/* Definition of an arbitrary vector-valued function with parameters */
gsl_function_vec_struct :: struct {
    function: #type (x: float64, y: *float64, params: *void) -> s32 #c_call;
    params:   *void;
}

gsl_function_vec :: gsl_function_vec_struct;

/* two consecutive built-in types as a complex number */
gsl_complex_packed :: *float64;
gsl_complex_packed_float :: *float;

gsl_const_complex_packed :: *float64;
gsl_const_complex_packed_float :: *float;

/* 2N consecutive built-in types as N complex numbers */
gsl_complex_packed_array :: *float64;
gsl_complex_packed_array_float :: *float;

gsl_const_complex_packed_array :: *float64;
gsl_const_complex_packed_array_float :: *float;

/* Yes... this seems weird. Trust us. The point is just that
sometimes you want to make it obvious that something is
an output value. The fact that it lacks a 'const' may not
be enough of a clue for people in some contexts.
*/
gsl_complex_packed_ptr :: *float64;
gsl_complex_packed_float_ptr :: *float;

gsl_const_complex_packed_ptr :: *float64;
gsl_const_complex_packed_float_ptr :: *float;

gsl_complex :: struct {
    dat: [2] float64;
}
gsl_complex_long_double :: struct {}
gsl_complex_float :: struct {
    dat: [2] float;
}

/* Complex numbers */
gsl_complex_polar :: (r: float64, theta: float64) -> gsl_complex #foreign libgsl;

gsl_complex_rect :: (x: float64, y: float64) -> gsl_complex #foreign libgsl;

/* Properties of complex numbers */
gsl_complex_arg :: (z: gsl_complex) -> float64 #foreign libgsl;
gsl_complex_abs :: (z: gsl_complex) -> float64 #foreign libgsl;
gsl_complex_abs2 :: (z: gsl_complex) -> float64 #foreign libgsl;
gsl_complex_logabs :: (z: gsl_complex) -> float64 #foreign libgsl;

/* Complex arithmetic operators */
gsl_complex_add :: (a: gsl_complex, b: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_sub :: (a: gsl_complex, b: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_mul :: (a: gsl_complex, b: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_div :: (a: gsl_complex, b: gsl_complex) -> gsl_complex #foreign libgsl;

gsl_complex_add_real :: (a: gsl_complex, x: float64) -> gsl_complex #foreign libgsl;
gsl_complex_sub_real :: (a: gsl_complex, x: float64) -> gsl_complex #foreign libgsl;
gsl_complex_mul_real :: (a: gsl_complex, x: float64) -> gsl_complex #foreign libgsl;
gsl_complex_div_real :: (a: gsl_complex, x: float64) -> gsl_complex #foreign libgsl;

gsl_complex_add_imag :: (a: gsl_complex, y: float64) -> gsl_complex #foreign libgsl;
gsl_complex_sub_imag :: (a: gsl_complex, y: float64) -> gsl_complex #foreign libgsl;
gsl_complex_mul_imag :: (a: gsl_complex, y: float64) -> gsl_complex #foreign libgsl;
gsl_complex_div_imag :: (a: gsl_complex, y: float64) -> gsl_complex #foreign libgsl;

gsl_complex_conjugate :: (z: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_inverse :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_negative :: (a: gsl_complex) -> gsl_complex #foreign libgsl;

/* Elementary Complex Functions */
gsl_complex_sqrt :: (z: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_sqrt_real :: (x: float64) -> gsl_complex #foreign libgsl;

gsl_complex_pow :: (a: gsl_complex, b: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_pow_real :: (a: gsl_complex, b: float64) -> gsl_complex #foreign libgsl;

gsl_complex_exp :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_log :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_log10 :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_log_b :: (a: gsl_complex, b: gsl_complex) -> gsl_complex #foreign libgsl;

/* Complex Trigonometric Functions */
gsl_complex_sin :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_cos :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_sec :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_csc :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_tan :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_cot :: (a: gsl_complex) -> gsl_complex #foreign libgsl;

/* Inverse Complex Trigonometric Functions */
gsl_complex_arcsin :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_arcsin_real :: (a: float64) -> gsl_complex #foreign libgsl;
gsl_complex_arccos :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_arccos_real :: (a: float64) -> gsl_complex #foreign libgsl;
gsl_complex_arcsec :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_arcsec_real :: (a: float64) -> gsl_complex #foreign libgsl;
gsl_complex_arccsc :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_arccsc_real :: (a: float64) -> gsl_complex #foreign libgsl;
gsl_complex_arctan :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_arccot :: (a: gsl_complex) -> gsl_complex #foreign libgsl;

/* Complex Hyperbolic Functions */
gsl_complex_sinh :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_cosh :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_sech :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_csch :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_tanh :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_coth :: (a: gsl_complex) -> gsl_complex #foreign libgsl;

/* Inverse Complex Hyperbolic Functions */
gsl_complex_arcsinh :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_arccosh :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_arccosh_real :: (a: float64) -> gsl_complex #foreign libgsl;
gsl_complex_arcsech :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_arccsch :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_arctanh :: (a: gsl_complex) -> gsl_complex #foreign libgsl;
gsl_complex_arctanh_real :: (a: float64) -> gsl_complex #foreign libgsl;
gsl_complex_arccoth :: (a: gsl_complex) -> gsl_complex #foreign libgsl;

gsl_block_short_struct :: struct {
    size: size_t;
    data: *s16;
}

gsl_block_short :: gsl_block_short_struct;

gsl_block_short_alloc :: (n: size_t) -> *gsl_block_short #foreign libgsl;
gsl_block_short_calloc :: (n: size_t) -> *gsl_block_short #foreign libgsl;
gsl_block_short_free :: (b: *gsl_block_short) -> void #foreign libgsl;

gsl_block_short_fread :: (stream: *FILE, b: *gsl_block_short) -> s32 #foreign libgsl;
gsl_block_short_fwrite :: (stream: *FILE, b: *gsl_block_short) -> s32 #foreign libgsl;
gsl_block_short_fscanf :: (stream: *FILE, b: *gsl_block_short) -> s32 #foreign libgsl;
gsl_block_short_fprintf :: (stream: *FILE, b: *gsl_block_short, format: *u8) -> s32 #foreign libgsl;

gsl_block_short_raw_fread :: (stream: *FILE, b: *s16, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_short_raw_fwrite :: (stream: *FILE, b: *s16, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_short_raw_fscanf :: (stream: *FILE, b: *s16, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_short_raw_fprintf :: (stream: *FILE, b: *s16, n: size_t, stride: size_t, format: *u8) -> s32 #foreign libgsl;

gsl_block_short_size :: (b: *gsl_block_short) -> size_t #foreign libgsl;
gsl_block_short_data :: (b: *gsl_block_short) -> *s16 #foreign libgsl;

gsl_block_ushort_struct :: struct {
    size: size_t;
    data: *u16;
}

gsl_block_ushort :: gsl_block_ushort_struct;

gsl_block_ushort_alloc :: (n: size_t) -> *gsl_block_ushort #foreign libgsl;
gsl_block_ushort_calloc :: (n: size_t) -> *gsl_block_ushort #foreign libgsl;
gsl_block_ushort_free :: (b: *gsl_block_ushort) -> void #foreign libgsl;

gsl_block_ushort_fread :: (stream: *FILE, b: *gsl_block_ushort) -> s32 #foreign libgsl;
gsl_block_ushort_fwrite :: (stream: *FILE, b: *gsl_block_ushort) -> s32 #foreign libgsl;
gsl_block_ushort_fscanf :: (stream: *FILE, b: *gsl_block_ushort) -> s32 #foreign libgsl;
gsl_block_ushort_fprintf :: (stream: *FILE, b: *gsl_block_ushort, format: *u8) -> s32 #foreign libgsl;

gsl_block_ushort_raw_fread :: (stream: *FILE, b: *u16, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_ushort_raw_fwrite :: (stream: *FILE, b: *u16, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_ushort_raw_fscanf :: (stream: *FILE, b: *u16, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_ushort_raw_fprintf :: (stream: *FILE, b: *u16, n: size_t, stride: size_t, format: *u8) -> s32 #foreign libgsl;

gsl_block_ushort_size :: (b: *gsl_block_ushort) -> size_t #foreign libgsl;
gsl_block_ushort_data :: (b: *gsl_block_ushort) -> *u16 #foreign libgsl;

gsl_block_char_struct :: struct {
    size: size_t;
    data: *u8;
}

gsl_block_char :: gsl_block_char_struct;

gsl_block_char_alloc :: (n: size_t) -> *gsl_block_char #foreign libgsl;
gsl_block_char_calloc :: (n: size_t) -> *gsl_block_char #foreign libgsl;
gsl_block_char_free :: (b: *gsl_block_char) -> void #foreign libgsl;

gsl_block_char_fread :: (stream: *FILE, b: *gsl_block_char) -> s32 #foreign libgsl;
gsl_block_char_fwrite :: (stream: *FILE, b: *gsl_block_char) -> s32 #foreign libgsl;
gsl_block_char_fscanf :: (stream: *FILE, b: *gsl_block_char) -> s32 #foreign libgsl;
gsl_block_char_fprintf :: (stream: *FILE, b: *gsl_block_char, format: *u8) -> s32 #foreign libgsl;

gsl_block_char_raw_fread :: (stream: *FILE, b: *u8, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_char_raw_fwrite :: (stream: *FILE, b: *u8, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_char_raw_fscanf :: (stream: *FILE, b: *u8, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_char_raw_fprintf :: (stream: *FILE, b: *u8, n: size_t, stride: size_t, format: *u8) -> s32 #foreign libgsl;

gsl_block_char_size :: (b: *gsl_block_char) -> size_t #foreign libgsl;
gsl_block_char_data :: (b: *gsl_block_char) -> *u8 #foreign libgsl;

gsl_block_uchar_struct :: struct {
    size: size_t;
    data: *u8;
}

gsl_block_uchar :: gsl_block_uchar_struct;

gsl_block_uchar_alloc :: (n: size_t) -> *gsl_block_uchar #foreign libgsl;
gsl_block_uchar_calloc :: (n: size_t) -> *gsl_block_uchar #foreign libgsl;
gsl_block_uchar_free :: (b: *gsl_block_uchar) -> void #foreign libgsl;

gsl_block_uchar_fread :: (stream: *FILE, b: *gsl_block_uchar) -> s32 #foreign libgsl;
gsl_block_uchar_fwrite :: (stream: *FILE, b: *gsl_block_uchar) -> s32 #foreign libgsl;
gsl_block_uchar_fscanf :: (stream: *FILE, b: *gsl_block_uchar) -> s32 #foreign libgsl;
gsl_block_uchar_fprintf :: (stream: *FILE, b: *gsl_block_uchar, format: *u8) -> s32 #foreign libgsl;

gsl_block_uchar_raw_fread :: (stream: *FILE, b: *u8, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_uchar_raw_fwrite :: (stream: *FILE, b: *u8, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_uchar_raw_fscanf :: (stream: *FILE, b: *u8, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_uchar_raw_fprintf :: (stream: *FILE, b: *u8, n: size_t, stride: size_t, format: *u8) -> s32 #foreign libgsl;

gsl_block_uchar_size :: (b: *gsl_block_uchar) -> size_t #foreign libgsl;
gsl_block_uchar_data :: (b: *gsl_block_uchar) -> *u8 #foreign libgsl;

gsl_block_int_struct :: struct {
    size: size_t;
    data: *s32;
}

gsl_block_int :: gsl_block_int_struct;

gsl_block_int_alloc :: (n: size_t) -> *gsl_block_int #foreign libgsl;
gsl_block_int_calloc :: (n: size_t) -> *gsl_block_int #foreign libgsl;
gsl_block_int_free :: (b: *gsl_block_int) -> void #foreign libgsl;

gsl_block_int_fread :: (stream: *FILE, b: *gsl_block_int) -> s32 #foreign libgsl;
gsl_block_int_fwrite :: (stream: *FILE, b: *gsl_block_int) -> s32 #foreign libgsl;
gsl_block_int_fscanf :: (stream: *FILE, b: *gsl_block_int) -> s32 #foreign libgsl;
gsl_block_int_fprintf :: (stream: *FILE, b: *gsl_block_int, format: *u8) -> s32 #foreign libgsl;

gsl_block_int_raw_fread :: (stream: *FILE, b: *s32, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_int_raw_fwrite :: (stream: *FILE, b: *s32, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_int_raw_fscanf :: (stream: *FILE, b: *s32, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_int_raw_fprintf :: (stream: *FILE, b: *s32, n: size_t, stride: size_t, format: *u8) -> s32 #foreign libgsl;

gsl_block_int_size :: (b: *gsl_block_int) -> size_t #foreign libgsl;
gsl_block_int_data :: (b: *gsl_block_int) -> *s32 #foreign libgsl;

gsl_block_uint_struct :: struct {
    size: size_t;
    data: *u32;
}

gsl_block_uint :: gsl_block_uint_struct;

gsl_block_uint_alloc :: (n: size_t) -> *gsl_block_uint #foreign libgsl;
gsl_block_uint_calloc :: (n: size_t) -> *gsl_block_uint #foreign libgsl;
gsl_block_uint_free :: (b: *gsl_block_uint) -> void #foreign libgsl;

gsl_block_uint_fread :: (stream: *FILE, b: *gsl_block_uint) -> s32 #foreign libgsl;
gsl_block_uint_fwrite :: (stream: *FILE, b: *gsl_block_uint) -> s32 #foreign libgsl;
gsl_block_uint_fscanf :: (stream: *FILE, b: *gsl_block_uint) -> s32 #foreign libgsl;
gsl_block_uint_fprintf :: (stream: *FILE, b: *gsl_block_uint, format: *u8) -> s32 #foreign libgsl;

gsl_block_uint_raw_fread :: (stream: *FILE, b: *u32, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_uint_raw_fwrite :: (stream: *FILE, b: *u32, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_uint_raw_fscanf :: (stream: *FILE, b: *u32, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_uint_raw_fprintf :: (stream: *FILE, b: *u32, n: size_t, stride: size_t, format: *u8) -> s32 #foreign libgsl;

gsl_block_uint_size :: (b: *gsl_block_uint) -> size_t #foreign libgsl;
gsl_block_uint_data :: (b: *gsl_block_uint) -> *u32 #foreign libgsl;

gsl_block_ulong_struct :: struct {
    size: size_t;
    data: *u64;
}

gsl_block_ulong :: gsl_block_ulong_struct;

gsl_block_ulong_alloc :: (n: size_t) -> *gsl_block_ulong #foreign libgsl;
gsl_block_ulong_calloc :: (n: size_t) -> *gsl_block_ulong #foreign libgsl;
gsl_block_ulong_free :: (b: *gsl_block_ulong) -> void #foreign libgsl;

gsl_block_ulong_fread :: (stream: *FILE, b: *gsl_block_ulong) -> s32 #foreign libgsl;
gsl_block_ulong_fwrite :: (stream: *FILE, b: *gsl_block_ulong) -> s32 #foreign libgsl;
gsl_block_ulong_fscanf :: (stream: *FILE, b: *gsl_block_ulong) -> s32 #foreign libgsl;
gsl_block_ulong_fprintf :: (stream: *FILE, b: *gsl_block_ulong, format: *u8) -> s32 #foreign libgsl;

gsl_block_ulong_raw_fread :: (stream: *FILE, b: *u64, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_ulong_raw_fwrite :: (stream: *FILE, b: *u64, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_ulong_raw_fscanf :: (stream: *FILE, b: *u64, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_ulong_raw_fprintf :: (stream: *FILE, b: *u64, n: size_t, stride: size_t, format: *u8) -> s32 #foreign libgsl;

gsl_block_ulong_size :: (b: *gsl_block_ulong) -> size_t #foreign libgsl;
gsl_block_ulong_data :: (b: *gsl_block_ulong) -> *u64 #foreign libgsl;

gsl_block_long_struct :: struct {
    size: size_t;
    data: *s64;
}

gsl_block_long :: gsl_block_long_struct;

gsl_block_long_alloc :: (n: size_t) -> *gsl_block_long #foreign libgsl;
gsl_block_long_calloc :: (n: size_t) -> *gsl_block_long #foreign libgsl;
gsl_block_long_free :: (b: *gsl_block_long) -> void #foreign libgsl;

gsl_block_long_fread :: (stream: *FILE, b: *gsl_block_long) -> s32 #foreign libgsl;
gsl_block_long_fwrite :: (stream: *FILE, b: *gsl_block_long) -> s32 #foreign libgsl;
gsl_block_long_fscanf :: (stream: *FILE, b: *gsl_block_long) -> s32 #foreign libgsl;
gsl_block_long_fprintf :: (stream: *FILE, b: *gsl_block_long, format: *u8) -> s32 #foreign libgsl;

gsl_block_long_raw_fread :: (stream: *FILE, b: *s64, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_long_raw_fwrite :: (stream: *FILE, b: *s64, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_long_raw_fscanf :: (stream: *FILE, b: *s64, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_long_raw_fprintf :: (stream: *FILE, b: *s64, n: size_t, stride: size_t, format: *u8) -> s32 #foreign libgsl;

gsl_block_long_size :: (b: *gsl_block_long) -> size_t #foreign libgsl;
gsl_block_long_data :: (b: *gsl_block_long) -> *s64 #foreign libgsl;

gsl_block_complex_float_struct :: struct {
    size: size_t;
    data: *float;
}

gsl_block_complex_float :: gsl_block_complex_float_struct;

gsl_block_complex_float_alloc :: (n: size_t) -> *gsl_block_complex_float #foreign libgsl;
gsl_block_complex_float_calloc :: (n: size_t) -> *gsl_block_complex_float #foreign libgsl;
gsl_block_complex_float_free :: (b: *gsl_block_complex_float) -> void #foreign libgsl;

gsl_block_complex_float_fread :: (stream: *FILE, b: *gsl_block_complex_float) -> s32 #foreign libgsl;
gsl_block_complex_float_fwrite :: (stream: *FILE, b: *gsl_block_complex_float) -> s32 #foreign libgsl;
gsl_block_complex_float_fscanf :: (stream: *FILE, b: *gsl_block_complex_float) -> s32 #foreign libgsl;
gsl_block_complex_float_fprintf :: (stream: *FILE, b: *gsl_block_complex_float, format: *u8) -> s32 #foreign libgsl;

gsl_block_complex_float_raw_fread :: (stream: *FILE, b: *float, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_complex_float_raw_fwrite :: (stream: *FILE, b: *float, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_complex_float_raw_fscanf :: (stream: *FILE, b: *float, n: size_t, stride: size_t) -> s32 #foreign libgsl;
gsl_block_complex_float_raw_fprintf :: (stream: *FILE, b: *float, n: size_t, stride: size_t, format: *u8) -> s32 #foreign libgsl;

gsl_block_complex_float_size :: (b: *gsl_block_complex_float) -> size_t #foreign libgsl;
gsl_block_complex_float_data :: (b: *gsl_block_complex_float) -> *float #foreign libgsl;

gsl_block_complex_long_double_struct :: struct {
    size: size_t;
}

gsl_block_complex_long_double :: gsl_block_complex_long_double_struct;

gsl_block_complex_long_double_alloc :: (n: size_t) -> *gsl_block_complex_long_double #foreign libgsl;
gsl_block_complex_long_double_calloc :: (n: size_t) -> *gsl_block_complex_long_double #foreign libgsl;
gsl_block_complex_long_double_free :: (b: *gsl_block_complex_long_double) -> void #foreign libgsl;

gsl_block_complex_long_double_fread :: (stream: *FILE, b: *gsl_block_complex_long_double) -> s32 #foreign libgsl;
gsl_block_complex_long_double_fwrite :: (stream: *FILE, b: *gsl_block_complex_long_double) -> s32 #foreign libgsl;
gsl_block_complex_long_double_fscanf :: (stream: *FILE, b: *gsl_block_complex_long_double) -> s32 #foreign libgsl;
gsl_block_complex_long_double_fprintf :: (stream: *FILE, b: *gsl_block_complex_long_double, format: *u8) -> s32 #foreign libgsl;

gsl_block_complex_long_double_size :: (b: *gsl_block_complex_long_double) -> size_t #foreign libgsl;

gsl_vector_complex_long_double :: struct {
    size:   size_t;
    stride: size_t;

    block:  *gsl_block_complex_long_double #align 16;
    owner:  s32;
}

_gsl_vector_complex_long_double_view :: struct {
    vector: gsl_vector_complex_long_double;
}

gsl_vector_complex_long_double_view :: _gsl_vector_complex_long_double_view;

_gsl_vector_complex_long_double_const_view :: struct {
    vector: gsl_vector_complex_long_double;
}

gsl_vector_complex_long_double_const_view :: _gsl_vector_complex_long_double_const_view;

/* Allocation */
gsl_vector_complex_long_double_alloc :: (n: size_t) -> *gsl_vector_complex_long_double #foreign libgsl;
gsl_vector_complex_long_double_calloc :: (n: size_t) -> *gsl_vector_complex_long_double #foreign libgsl;

gsl_vector_complex_long_double_alloc_from_block :: (b: *gsl_block_complex_long_double, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_complex_long_double #foreign libgsl;

gsl_vector_complex_long_double_alloc_from_vector :: (v: *gsl_vector_complex_long_double, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_complex_long_double #foreign libgsl;

gsl_vector_complex_long_double_free :: (v: *gsl_vector_complex_long_double) -> void #foreign libgsl;

gsl_vector_complex_long_double_subvector :: (base: *gsl_vector_complex_long_double, i: size_t, n: size_t) -> _gsl_vector_complex_long_double_view #foreign libgsl;

gsl_vector_complex_long_double_subvector_with_stride :: (v: *gsl_vector_complex_long_double, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_complex_long_double_view #foreign libgsl;

gsl_vector_complex_long_double_const_subvector :: (base: *gsl_vector_complex_long_double, i: size_t, n: size_t) -> _gsl_vector_complex_long_double_const_view #foreign libgsl;

gsl_vector_complex_long_double_const_subvector_with_stride :: (v: *gsl_vector_complex_long_double, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_complex_long_double_const_view #foreign libgsl;

gsl_vector_complex_long_double_real :: (v: *gsl_vector_complex_long_double) -> _gsl_vector_long_double_view #foreign libgsl;

gsl_vector_complex_long_double_imag :: (v: *gsl_vector_complex_long_double) -> _gsl_vector_long_double_view #foreign libgsl;

gsl_vector_complex_long_double_const_real :: (v: *gsl_vector_complex_long_double) -> _gsl_vector_long_double_const_view #foreign libgsl;

gsl_vector_complex_long_double_const_imag :: (v: *gsl_vector_complex_long_double) -> _gsl_vector_long_double_const_view #foreign libgsl;

/* Operations */
gsl_vector_complex_long_double_set_zero :: (v: *gsl_vector_complex_long_double) -> void #foreign libgsl;
gsl_vector_complex_long_double_set_all :: (v: *gsl_vector_complex_long_double, z: gsl_complex_long_double) -> void #foreign libgsl;

gsl_vector_complex_long_double_set_basis :: (v: *gsl_vector_complex_long_double, i: size_t) -> s32 #foreign libgsl;

gsl_vector_complex_long_double_fread :: (stream: *FILE, v: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;

gsl_vector_complex_long_double_fwrite :: (stream: *FILE, v: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;

gsl_vector_complex_long_double_fscanf :: (stream: *FILE, v: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;

gsl_vector_complex_long_double_fprintf :: (stream: *FILE, v: *gsl_vector_complex_long_double, format: *u8) -> s32 #foreign libgsl;

gsl_vector_complex_long_double_memcpy :: (dest: *gsl_vector_complex_long_double, src: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;

gsl_vector_complex_long_double_reverse :: (v: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;

gsl_vector_complex_long_double_swap :: (v: *gsl_vector_complex_long_double, w: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;
gsl_vector_complex_long_double_swap_elements :: (v: *gsl_vector_complex_long_double, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_vector_complex_long_double_equal :: (u: *gsl_vector_complex_long_double, v: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;

gsl_vector_complex_long_double_isnull :: (v: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;
gsl_vector_complex_long_double_ispos :: (v: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;
gsl_vector_complex_long_double_isneg :: (v: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;
gsl_vector_complex_long_double_isnonneg :: (v: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;

gsl_vector_complex_long_double_add :: (a: *gsl_vector_complex_long_double, b: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;
gsl_vector_complex_long_double_sub :: (a: *gsl_vector_complex_long_double, b: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;
gsl_vector_complex_long_double_mul :: (a: *gsl_vector_complex_long_double, b: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;
gsl_vector_complex_long_double_div :: (a: *gsl_vector_complex_long_double, b: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;
gsl_vector_complex_long_double_scale :: (a: *gsl_vector_complex_long_double, x: gsl_complex_long_double) -> s32 #foreign libgsl;
gsl_vector_complex_long_double_add_constant :: (a: *gsl_vector_complex_long_double, x: gsl_complex_long_double) -> s32 #foreign libgsl;
gsl_vector_complex_long_double_axpby :: (alpha: gsl_complex_long_double, x: *gsl_vector_complex_long_double, beta: gsl_complex_long_double, y: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;

gsl_vector_complex_long_double_get :: (v: *gsl_vector_complex_long_double, i: size_t) -> gsl_complex_long_double #foreign libgsl;
gsl_vector_complex_long_double_set :: (v: *gsl_vector_complex_long_double, i: size_t, z: gsl_complex_long_double) -> void #foreign libgsl;
gsl_vector_complex_long_double_ptr :: (v: *gsl_vector_complex_long_double, i: size_t) -> *gsl_complex_long_double #foreign libgsl;
gsl_vector_complex_long_double_const_ptr :: (v: *gsl_vector_complex_long_double, i: size_t) -> *gsl_complex_long_double #foreign libgsl;

gsl_vector_complex :: struct {
    size:   size_t;
    stride: size_t;
    data:   *float64;
    block:  *gsl_block_complex;
    owner:  s32;
}

_gsl_vector_complex_view :: struct {
    vector: gsl_vector_complex;
}

gsl_vector_complex_view :: _gsl_vector_complex_view;

_gsl_vector_complex_const_view :: struct {
    vector: gsl_vector_complex;
}

gsl_vector_complex_const_view :: _gsl_vector_complex_const_view;

/* Allocation */
gsl_vector_complex_alloc :: (n: size_t) -> *gsl_vector_complex #foreign libgsl;
gsl_vector_complex_calloc :: (n: size_t) -> *gsl_vector_complex #foreign libgsl;

gsl_vector_complex_alloc_from_block :: (b: *gsl_block_complex, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_complex #foreign libgsl;

gsl_vector_complex_alloc_from_vector :: (v: *gsl_vector_complex, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_complex #foreign libgsl;

gsl_vector_complex_free :: (v: *gsl_vector_complex) -> void #foreign libgsl;

/* Views */
gsl_vector_complex_view_array :: (base: *float64, n: size_t) -> _gsl_vector_complex_view #foreign libgsl;

gsl_vector_complex_view_array_with_stride :: (base: *float64, stride: size_t, n: size_t) -> _gsl_vector_complex_view #foreign libgsl;

gsl_vector_complex_const_view_array :: (base: *float64, n: size_t) -> _gsl_vector_complex_const_view #foreign libgsl;

gsl_vector_complex_const_view_array_with_stride :: (base: *float64, stride: size_t, n: size_t) -> _gsl_vector_complex_const_view #foreign libgsl;

gsl_vector_complex_subvector :: (base: *gsl_vector_complex, i: size_t, n: size_t) -> _gsl_vector_complex_view #foreign libgsl;

gsl_vector_complex_subvector_with_stride :: (v: *gsl_vector_complex, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_complex_view #foreign libgsl;

gsl_vector_complex_const_subvector :: (base: *gsl_vector_complex, i: size_t, n: size_t) -> _gsl_vector_complex_const_view #foreign libgsl;

gsl_vector_complex_const_subvector_with_stride :: (v: *gsl_vector_complex, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_complex_const_view #foreign libgsl;

gsl_vector_complex_real :: (v: *gsl_vector_complex) -> _gsl_vector_view #foreign libgsl;

gsl_vector_complex_imag :: (v: *gsl_vector_complex) -> _gsl_vector_view #foreign libgsl;

gsl_vector_complex_const_real :: (v: *gsl_vector_complex) -> _gsl_vector_const_view #foreign libgsl;

gsl_vector_complex_const_imag :: (v: *gsl_vector_complex) -> _gsl_vector_const_view #foreign libgsl;

/* Operations */
gsl_vector_complex_set_zero :: (v: *gsl_vector_complex) -> void #foreign libgsl;
gsl_vector_complex_set_all :: (v: *gsl_vector_complex, z: gsl_complex) -> void #foreign libgsl;

gsl_vector_complex_set_basis :: (v: *gsl_vector_complex, i: size_t) -> s32 #foreign libgsl;

gsl_vector_complex_fread :: (stream: *FILE, v: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_vector_complex_fwrite :: (stream: *FILE, v: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_vector_complex_fscanf :: (stream: *FILE, v: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_vector_complex_fprintf :: (stream: *FILE, v: *gsl_vector_complex, format: *u8) -> s32 #foreign libgsl;

gsl_vector_complex_memcpy :: (dest: *gsl_vector_complex, src: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_vector_complex_reverse :: (v: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_vector_complex_swap :: (v: *gsl_vector_complex, w: *gsl_vector_complex) -> s32 #foreign libgsl;
gsl_vector_complex_swap_elements :: (v: *gsl_vector_complex, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_vector_complex_equal :: (u: *gsl_vector_complex, v: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_vector_complex_isnull :: (v: *gsl_vector_complex) -> s32 #foreign libgsl;
gsl_vector_complex_ispos :: (v: *gsl_vector_complex) -> s32 #foreign libgsl;
gsl_vector_complex_isneg :: (v: *gsl_vector_complex) -> s32 #foreign libgsl;
gsl_vector_complex_isnonneg :: (v: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_vector_complex_add :: (a: *gsl_vector_complex, b: *gsl_vector_complex) -> s32 #foreign libgsl;
gsl_vector_complex_sub :: (a: *gsl_vector_complex, b: *gsl_vector_complex) -> s32 #foreign libgsl;
gsl_vector_complex_mul :: (a: *gsl_vector_complex, b: *gsl_vector_complex) -> s32 #foreign libgsl;
gsl_vector_complex_div :: (a: *gsl_vector_complex, b: *gsl_vector_complex) -> s32 #foreign libgsl;
gsl_vector_complex_scale :: (a: *gsl_vector_complex, x: gsl_complex) -> s32 #foreign libgsl;
gsl_vector_complex_add_constant :: (a: *gsl_vector_complex, x: gsl_complex) -> s32 #foreign libgsl;
gsl_vector_complex_axpby :: (alpha: gsl_complex, x: *gsl_vector_complex, beta: gsl_complex, y: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_vector_complex_get :: (v: *gsl_vector_complex, i: size_t) -> gsl_complex #foreign libgsl;
gsl_vector_complex_set :: (v: *gsl_vector_complex, i: size_t, z: gsl_complex) -> void #foreign libgsl;
gsl_vector_complex_ptr :: (v: *gsl_vector_complex, i: size_t) -> *gsl_complex #foreign libgsl;
gsl_vector_complex_const_ptr :: (v: *gsl_vector_complex, i: size_t) -> *gsl_complex #foreign libgsl;

gsl_vector_complex_float :: struct {
    size:   size_t;
    stride: size_t;
    data:   *float;
    block:  *gsl_block_complex_float;
    owner:  s32;
}

_gsl_vector_complex_float_view :: struct {
    vector: gsl_vector_complex_float;
}

gsl_vector_complex_float_view :: _gsl_vector_complex_float_view;

_gsl_vector_complex_float_const_view :: struct {
    vector: gsl_vector_complex_float;
}

gsl_vector_complex_float_const_view :: _gsl_vector_complex_float_const_view;

/* Allocation */
gsl_vector_complex_float_alloc :: (n: size_t) -> *gsl_vector_complex_float #foreign libgsl;
gsl_vector_complex_float_calloc :: (n: size_t) -> *gsl_vector_complex_float #foreign libgsl;

gsl_vector_complex_float_alloc_from_block :: (b: *gsl_block_complex_float, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_complex_float #foreign libgsl;

gsl_vector_complex_float_alloc_from_vector :: (v: *gsl_vector_complex_float, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_complex_float #foreign libgsl;

gsl_vector_complex_float_free :: (v: *gsl_vector_complex_float) -> void #foreign libgsl;

/* Views */
gsl_vector_complex_float_view_array :: (base: *float, n: size_t) -> _gsl_vector_complex_float_view #foreign libgsl;

gsl_vector_complex_float_view_array_with_stride :: (base: *float, stride: size_t, n: size_t) -> _gsl_vector_complex_float_view #foreign libgsl;

gsl_vector_complex_float_const_view_array :: (base: *float, n: size_t) -> _gsl_vector_complex_float_const_view #foreign libgsl;

gsl_vector_complex_float_const_view_array_with_stride :: (base: *float, stride: size_t, n: size_t) -> _gsl_vector_complex_float_const_view #foreign libgsl;

gsl_vector_complex_float_subvector :: (base: *gsl_vector_complex_float, i: size_t, n: size_t) -> _gsl_vector_complex_float_view #foreign libgsl;

gsl_vector_complex_float_subvector_with_stride :: (v: *gsl_vector_complex_float, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_complex_float_view #foreign libgsl;

gsl_vector_complex_float_const_subvector :: (base: *gsl_vector_complex_float, i: size_t, n: size_t) -> _gsl_vector_complex_float_const_view #foreign libgsl;

gsl_vector_complex_float_const_subvector_with_stride :: (v: *gsl_vector_complex_float, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_complex_float_const_view #foreign libgsl;

gsl_vector_complex_float_real :: (v: *gsl_vector_complex_float) -> _gsl_vector_float_view #foreign libgsl;

gsl_vector_complex_float_imag :: (v: *gsl_vector_complex_float) -> _gsl_vector_float_view #foreign libgsl;

gsl_vector_complex_float_const_real :: (v: *gsl_vector_complex_float) -> _gsl_vector_float_const_view #foreign libgsl;

gsl_vector_complex_float_const_imag :: (v: *gsl_vector_complex_float) -> _gsl_vector_float_const_view #foreign libgsl;

/* Operations */
gsl_vector_complex_float_set_zero :: (v: *gsl_vector_complex_float) -> void #foreign libgsl;
gsl_vector_complex_float_set_all :: (v: *gsl_vector_complex_float, z: gsl_complex_float) -> void #foreign libgsl;

gsl_vector_complex_float_set_basis :: (v: *gsl_vector_complex_float, i: size_t) -> s32 #foreign libgsl;

gsl_vector_complex_float_fread :: (stream: *FILE, v: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_vector_complex_float_fwrite :: (stream: *FILE, v: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_vector_complex_float_fscanf :: (stream: *FILE, v: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_vector_complex_float_fprintf :: (stream: *FILE, v: *gsl_vector_complex_float, format: *u8) -> s32 #foreign libgsl;

gsl_vector_complex_float_memcpy :: (dest: *gsl_vector_complex_float, src: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_vector_complex_float_reverse :: (v: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_vector_complex_float_swap :: (v: *gsl_vector_complex_float, w: *gsl_vector_complex_float) -> s32 #foreign libgsl;
gsl_vector_complex_float_swap_elements :: (v: *gsl_vector_complex_float, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_vector_complex_float_equal :: (u: *gsl_vector_complex_float, v: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_vector_complex_float_isnull :: (v: *gsl_vector_complex_float) -> s32 #foreign libgsl;
gsl_vector_complex_float_ispos :: (v: *gsl_vector_complex_float) -> s32 #foreign libgsl;
gsl_vector_complex_float_isneg :: (v: *gsl_vector_complex_float) -> s32 #foreign libgsl;
gsl_vector_complex_float_isnonneg :: (v: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_vector_complex_float_add :: (a: *gsl_vector_complex_float, b: *gsl_vector_complex_float) -> s32 #foreign libgsl;
gsl_vector_complex_float_sub :: (a: *gsl_vector_complex_float, b: *gsl_vector_complex_float) -> s32 #foreign libgsl;
gsl_vector_complex_float_mul :: (a: *gsl_vector_complex_float, b: *gsl_vector_complex_float) -> s32 #foreign libgsl;
gsl_vector_complex_float_div :: (a: *gsl_vector_complex_float, b: *gsl_vector_complex_float) -> s32 #foreign libgsl;
gsl_vector_complex_float_scale :: (a: *gsl_vector_complex_float, x: gsl_complex_float) -> s32 #foreign libgsl;
gsl_vector_complex_float_add_constant :: (a: *gsl_vector_complex_float, x: gsl_complex_float) -> s32 #foreign libgsl;
gsl_vector_complex_float_axpby :: (alpha: gsl_complex_float, x: *gsl_vector_complex_float, beta: gsl_complex_float, y: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_vector_complex_float_get :: (v: *gsl_vector_complex_float, i: size_t) -> gsl_complex_float #foreign libgsl;
gsl_vector_complex_float_set :: (v: *gsl_vector_complex_float, i: size_t, z: gsl_complex_float) -> void #foreign libgsl;
gsl_vector_complex_float_ptr :: (v: *gsl_vector_complex_float, i: size_t) -> *gsl_complex_float #foreign libgsl;
gsl_vector_complex_float_const_ptr :: (v: *gsl_vector_complex_float, i: size_t) -> *gsl_complex_float #foreign libgsl;

gsl_vector_ulong :: struct {
    size:   size_t;
    stride: size_t;
    data:   *u64;
    block:  *gsl_block_ulong;
    owner:  s32;
}

_gsl_vector_ulong_view :: struct {
    vector: gsl_vector_ulong;
}

gsl_vector_ulong_view :: _gsl_vector_ulong_view;

_gsl_vector_ulong_const_view :: struct {
    vector: gsl_vector_ulong;
}

gsl_vector_ulong_const_view :: _gsl_vector_ulong_const_view;

/* Allocation */
gsl_vector_ulong_alloc :: (n: size_t) -> *gsl_vector_ulong #foreign libgsl;
gsl_vector_ulong_calloc :: (n: size_t) -> *gsl_vector_ulong #foreign libgsl;

gsl_vector_ulong_alloc_from_block :: (b: *gsl_block_ulong, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_ulong #foreign libgsl;

gsl_vector_ulong_alloc_from_vector :: (v: *gsl_vector_ulong, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_ulong #foreign libgsl;

gsl_vector_ulong_free :: (v: *gsl_vector_ulong) -> void #foreign libgsl;

/* Views */
gsl_vector_ulong_view_array :: (v: *u64, n: size_t) -> _gsl_vector_ulong_view #foreign libgsl;

gsl_vector_ulong_view_array_with_stride :: (base: *u64, stride: size_t, n: size_t) -> _gsl_vector_ulong_view #foreign libgsl;

gsl_vector_ulong_const_view_array :: (v: *u64, n: size_t) -> _gsl_vector_ulong_const_view #foreign libgsl;

gsl_vector_ulong_const_view_array_with_stride :: (base: *u64, stride: size_t, n: size_t) -> _gsl_vector_ulong_const_view #foreign libgsl;

gsl_vector_ulong_subvector :: (v: *gsl_vector_ulong, i: size_t, n: size_t) -> _gsl_vector_ulong_view #foreign libgsl;

gsl_vector_ulong_subvector_with_stride :: (v: *gsl_vector_ulong, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_ulong_view #foreign libgsl;

gsl_vector_ulong_const_subvector :: (v: *gsl_vector_ulong, i: size_t, n: size_t) -> _gsl_vector_ulong_const_view #foreign libgsl;

gsl_vector_ulong_const_subvector_with_stride :: (v: *gsl_vector_ulong, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_ulong_const_view #foreign libgsl;

/* Operations */
gsl_vector_ulong_set_zero :: (v: *gsl_vector_ulong) -> void #foreign libgsl;
gsl_vector_ulong_set_all :: (v: *gsl_vector_ulong, x: u64) -> void #foreign libgsl;
gsl_vector_ulong_set_basis :: (v: *gsl_vector_ulong, i: size_t) -> s32 #foreign libgsl;

gsl_vector_ulong_fread :: (stream: *FILE, v: *gsl_vector_ulong) -> s32 #foreign libgsl;
gsl_vector_ulong_fwrite :: (stream: *FILE, v: *gsl_vector_ulong) -> s32 #foreign libgsl;
gsl_vector_ulong_fscanf :: (stream: *FILE, v: *gsl_vector_ulong) -> s32 #foreign libgsl;
gsl_vector_ulong_fprintf :: (stream: *FILE, v: *gsl_vector_ulong, format: *u8) -> s32 #foreign libgsl;

gsl_vector_ulong_memcpy :: (dest: *gsl_vector_ulong, src: *gsl_vector_ulong) -> s32 #foreign libgsl;

gsl_vector_ulong_reverse :: (v: *gsl_vector_ulong) -> s32 #foreign libgsl;

gsl_vector_ulong_swap :: (v: *gsl_vector_ulong, w: *gsl_vector_ulong) -> s32 #foreign libgsl;
gsl_vector_ulong_swap_elements :: (v: *gsl_vector_ulong, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_vector_ulong_max :: (v: *gsl_vector_ulong) -> u64 #foreign libgsl;
gsl_vector_ulong_min :: (v: *gsl_vector_ulong) -> u64 #foreign libgsl;
gsl_vector_ulong_minmax :: (v: *gsl_vector_ulong, min_out: *u64, max_out: *u64) -> void #foreign libgsl;

gsl_vector_ulong_max_index :: (v: *gsl_vector_ulong) -> size_t #foreign libgsl;
gsl_vector_ulong_min_index :: (v: *gsl_vector_ulong) -> size_t #foreign libgsl;
gsl_vector_ulong_minmax_index :: (v: *gsl_vector_ulong, imin: *size_t, imax: *size_t) -> void #foreign libgsl;

gsl_vector_ulong_add :: (a: *gsl_vector_ulong, b: *gsl_vector_ulong) -> s32 #foreign libgsl;
gsl_vector_ulong_sub :: (a: *gsl_vector_ulong, b: *gsl_vector_ulong) -> s32 #foreign libgsl;
gsl_vector_ulong_mul :: (a: *gsl_vector_ulong, b: *gsl_vector_ulong) -> s32 #foreign libgsl;
gsl_vector_ulong_div :: (a: *gsl_vector_ulong, b: *gsl_vector_ulong) -> s32 #foreign libgsl;
gsl_vector_ulong_scale :: (a: *gsl_vector_ulong, x: u64) -> s32 #foreign libgsl;
gsl_vector_ulong_add_constant :: (a: *gsl_vector_ulong, x: u64) -> s32 #foreign libgsl;
gsl_vector_ulong_axpby :: (alpha: u64, x: *gsl_vector_ulong, beta: u64, y: *gsl_vector_ulong) -> s32 #foreign libgsl;
gsl_vector_ulong_sum :: (a: *gsl_vector_ulong) -> u64 #foreign libgsl;

gsl_vector_ulong_equal :: (u: *gsl_vector_ulong, v: *gsl_vector_ulong) -> s32 #foreign libgsl;

gsl_vector_ulong_isnull :: (v: *gsl_vector_ulong) -> s32 #foreign libgsl;
gsl_vector_ulong_ispos :: (v: *gsl_vector_ulong) -> s32 #foreign libgsl;
gsl_vector_ulong_isneg :: (v: *gsl_vector_ulong) -> s32 #foreign libgsl;
gsl_vector_ulong_isnonneg :: (v: *gsl_vector_ulong) -> s32 #foreign libgsl;

gsl_vector_ulong_get :: (v: *gsl_vector_ulong, i: size_t) -> u64 #foreign libgsl;
gsl_vector_ulong_set :: (v: *gsl_vector_ulong, i: size_t, x: u64) -> void #foreign libgsl;
gsl_vector_ulong_ptr :: (v: *gsl_vector_ulong, i: size_t) -> *u64 #foreign libgsl;
gsl_vector_ulong_const_ptr :: (v: *gsl_vector_ulong, i: size_t) -> *u64 #foreign libgsl;

gsl_vector_long :: struct {
    size:   size_t;
    stride: size_t;
    data:   *s64;
    block:  *gsl_block_long;
    owner:  s32;
}

_gsl_vector_long_view :: struct {
    vector: gsl_vector_long;
}

gsl_vector_long_view :: _gsl_vector_long_view;

_gsl_vector_long_const_view :: struct {
    vector: gsl_vector_long;
}

gsl_vector_long_const_view :: _gsl_vector_long_const_view;

/* Allocation */
gsl_vector_long_alloc :: (n: size_t) -> *gsl_vector_long #foreign libgsl;
gsl_vector_long_calloc :: (n: size_t) -> *gsl_vector_long #foreign libgsl;

gsl_vector_long_alloc_from_block :: (b: *gsl_block_long, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_long #foreign libgsl;

gsl_vector_long_alloc_from_vector :: (v: *gsl_vector_long, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_long #foreign libgsl;

gsl_vector_long_free :: (v: *gsl_vector_long) -> void #foreign libgsl;

/* Views */
gsl_vector_long_view_array :: (v: *s64, n: size_t) -> _gsl_vector_long_view #foreign libgsl;

gsl_vector_long_view_array_with_stride :: (base: *s64, stride: size_t, n: size_t) -> _gsl_vector_long_view #foreign libgsl;

gsl_vector_long_const_view_array :: (v: *s64, n: size_t) -> _gsl_vector_long_const_view #foreign libgsl;

gsl_vector_long_const_view_array_with_stride :: (base: *s64, stride: size_t, n: size_t) -> _gsl_vector_long_const_view #foreign libgsl;

gsl_vector_long_subvector :: (v: *gsl_vector_long, i: size_t, n: size_t) -> _gsl_vector_long_view #foreign libgsl;

gsl_vector_long_subvector_with_stride :: (v: *gsl_vector_long, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_long_view #foreign libgsl;

gsl_vector_long_const_subvector :: (v: *gsl_vector_long, i: size_t, n: size_t) -> _gsl_vector_long_const_view #foreign libgsl;

gsl_vector_long_const_subvector_with_stride :: (v: *gsl_vector_long, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_long_const_view #foreign libgsl;

/* Operations */
gsl_vector_long_set_zero :: (v: *gsl_vector_long) -> void #foreign libgsl;
gsl_vector_long_set_all :: (v: *gsl_vector_long, x: s64) -> void #foreign libgsl;
gsl_vector_long_set_basis :: (v: *gsl_vector_long, i: size_t) -> s32 #foreign libgsl;

gsl_vector_long_fread :: (stream: *FILE, v: *gsl_vector_long) -> s32 #foreign libgsl;
gsl_vector_long_fwrite :: (stream: *FILE, v: *gsl_vector_long) -> s32 #foreign libgsl;
gsl_vector_long_fscanf :: (stream: *FILE, v: *gsl_vector_long) -> s32 #foreign libgsl;
gsl_vector_long_fprintf :: (stream: *FILE, v: *gsl_vector_long, format: *u8) -> s32 #foreign libgsl;

gsl_vector_long_memcpy :: (dest: *gsl_vector_long, src: *gsl_vector_long) -> s32 #foreign libgsl;

gsl_vector_long_reverse :: (v: *gsl_vector_long) -> s32 #foreign libgsl;

gsl_vector_long_swap :: (v: *gsl_vector_long, w: *gsl_vector_long) -> s32 #foreign libgsl;
gsl_vector_long_swap_elements :: (v: *gsl_vector_long, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_vector_long_max :: (v: *gsl_vector_long) -> s64 #foreign libgsl;
gsl_vector_long_min :: (v: *gsl_vector_long) -> s64 #foreign libgsl;
gsl_vector_long_minmax :: (v: *gsl_vector_long, min_out: *s64, max_out: *s64) -> void #foreign libgsl;

gsl_vector_long_max_index :: (v: *gsl_vector_long) -> size_t #foreign libgsl;
gsl_vector_long_min_index :: (v: *gsl_vector_long) -> size_t #foreign libgsl;
gsl_vector_long_minmax_index :: (v: *gsl_vector_long, imin: *size_t, imax: *size_t) -> void #foreign libgsl;

gsl_vector_long_add :: (a: *gsl_vector_long, b: *gsl_vector_long) -> s32 #foreign libgsl;
gsl_vector_long_sub :: (a: *gsl_vector_long, b: *gsl_vector_long) -> s32 #foreign libgsl;
gsl_vector_long_mul :: (a: *gsl_vector_long, b: *gsl_vector_long) -> s32 #foreign libgsl;
gsl_vector_long_div :: (a: *gsl_vector_long, b: *gsl_vector_long) -> s32 #foreign libgsl;
gsl_vector_long_scale :: (a: *gsl_vector_long, x: s64) -> s32 #foreign libgsl;
gsl_vector_long_add_constant :: (a: *gsl_vector_long, x: s64) -> s32 #foreign libgsl;
gsl_vector_long_axpby :: (alpha: s64, x: *gsl_vector_long, beta: s64, y: *gsl_vector_long) -> s32 #foreign libgsl;
gsl_vector_long_sum :: (a: *gsl_vector_long) -> s64 #foreign libgsl;

gsl_vector_long_equal :: (u: *gsl_vector_long, v: *gsl_vector_long) -> s32 #foreign libgsl;

gsl_vector_long_isnull :: (v: *gsl_vector_long) -> s32 #foreign libgsl;
gsl_vector_long_ispos :: (v: *gsl_vector_long) -> s32 #foreign libgsl;
gsl_vector_long_isneg :: (v: *gsl_vector_long) -> s32 #foreign libgsl;
gsl_vector_long_isnonneg :: (v: *gsl_vector_long) -> s32 #foreign libgsl;

gsl_vector_long_get :: (v: *gsl_vector_long, i: size_t) -> s64 #foreign libgsl;
gsl_vector_long_set :: (v: *gsl_vector_long, i: size_t, x: s64) -> void #foreign libgsl;
gsl_vector_long_ptr :: (v: *gsl_vector_long, i: size_t) -> *s64 #foreign libgsl;
gsl_vector_long_const_ptr :: (v: *gsl_vector_long, i: size_t) -> *s64 #foreign libgsl;

gsl_vector_uint :: struct {
    size:   size_t;
    stride: size_t;
    data:   *u32;
    block:  *gsl_block_uint;
    owner:  s32;
}

_gsl_vector_uint_view :: struct {
    vector: gsl_vector_uint;
}

gsl_vector_uint_view :: _gsl_vector_uint_view;

_gsl_vector_uint_const_view :: struct {
    vector: gsl_vector_uint;
}

gsl_vector_uint_const_view :: _gsl_vector_uint_const_view;

/* Allocation */
gsl_vector_uint_alloc :: (n: size_t) -> *gsl_vector_uint #foreign libgsl;
gsl_vector_uint_calloc :: (n: size_t) -> *gsl_vector_uint #foreign libgsl;

gsl_vector_uint_alloc_from_block :: (b: *gsl_block_uint, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_uint #foreign libgsl;

gsl_vector_uint_alloc_from_vector :: (v: *gsl_vector_uint, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_uint #foreign libgsl;

gsl_vector_uint_free :: (v: *gsl_vector_uint) -> void #foreign libgsl;

/* Views */
gsl_vector_uint_view_array :: (v: *u32, n: size_t) -> _gsl_vector_uint_view #foreign libgsl;

gsl_vector_uint_view_array_with_stride :: (base: *u32, stride: size_t, n: size_t) -> _gsl_vector_uint_view #foreign libgsl;

gsl_vector_uint_const_view_array :: (v: *u32, n: size_t) -> _gsl_vector_uint_const_view #foreign libgsl;

gsl_vector_uint_const_view_array_with_stride :: (base: *u32, stride: size_t, n: size_t) -> _gsl_vector_uint_const_view #foreign libgsl;

gsl_vector_uint_subvector :: (v: *gsl_vector_uint, i: size_t, n: size_t) -> _gsl_vector_uint_view #foreign libgsl;

gsl_vector_uint_subvector_with_stride :: (v: *gsl_vector_uint, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_uint_view #foreign libgsl;

gsl_vector_uint_const_subvector :: (v: *gsl_vector_uint, i: size_t, n: size_t) -> _gsl_vector_uint_const_view #foreign libgsl;

gsl_vector_uint_const_subvector_with_stride :: (v: *gsl_vector_uint, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_uint_const_view #foreign libgsl;

/* Operations */
gsl_vector_uint_set_zero :: (v: *gsl_vector_uint) -> void #foreign libgsl;
gsl_vector_uint_set_all :: (v: *gsl_vector_uint, x: u32) -> void #foreign libgsl;
gsl_vector_uint_set_basis :: (v: *gsl_vector_uint, i: size_t) -> s32 #foreign libgsl;

gsl_vector_uint_fread :: (stream: *FILE, v: *gsl_vector_uint) -> s32 #foreign libgsl;
gsl_vector_uint_fwrite :: (stream: *FILE, v: *gsl_vector_uint) -> s32 #foreign libgsl;
gsl_vector_uint_fscanf :: (stream: *FILE, v: *gsl_vector_uint) -> s32 #foreign libgsl;
gsl_vector_uint_fprintf :: (stream: *FILE, v: *gsl_vector_uint, format: *u8) -> s32 #foreign libgsl;

gsl_vector_uint_memcpy :: (dest: *gsl_vector_uint, src: *gsl_vector_uint) -> s32 #foreign libgsl;

gsl_vector_uint_reverse :: (v: *gsl_vector_uint) -> s32 #foreign libgsl;

gsl_vector_uint_swap :: (v: *gsl_vector_uint, w: *gsl_vector_uint) -> s32 #foreign libgsl;
gsl_vector_uint_swap_elements :: (v: *gsl_vector_uint, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_vector_uint_max :: (v: *gsl_vector_uint) -> u32 #foreign libgsl;
gsl_vector_uint_min :: (v: *gsl_vector_uint) -> u32 #foreign libgsl;
gsl_vector_uint_minmax :: (v: *gsl_vector_uint, min_out: *u32, max_out: *u32) -> void #foreign libgsl;

gsl_vector_uint_max_index :: (v: *gsl_vector_uint) -> size_t #foreign libgsl;
gsl_vector_uint_min_index :: (v: *gsl_vector_uint) -> size_t #foreign libgsl;
gsl_vector_uint_minmax_index :: (v: *gsl_vector_uint, imin: *size_t, imax: *size_t) -> void #foreign libgsl;

gsl_vector_uint_add :: (a: *gsl_vector_uint, b: *gsl_vector_uint) -> s32 #foreign libgsl;
gsl_vector_uint_sub :: (a: *gsl_vector_uint, b: *gsl_vector_uint) -> s32 #foreign libgsl;
gsl_vector_uint_mul :: (a: *gsl_vector_uint, b: *gsl_vector_uint) -> s32 #foreign libgsl;
gsl_vector_uint_div :: (a: *gsl_vector_uint, b: *gsl_vector_uint) -> s32 #foreign libgsl;
gsl_vector_uint_scale :: (a: *gsl_vector_uint, x: u32) -> s32 #foreign libgsl;
gsl_vector_uint_add_constant :: (a: *gsl_vector_uint, x: u32) -> s32 #foreign libgsl;
gsl_vector_uint_axpby :: (alpha: u32, x: *gsl_vector_uint, beta: u32, y: *gsl_vector_uint) -> s32 #foreign libgsl;
gsl_vector_uint_sum :: (a: *gsl_vector_uint) -> u32 #foreign libgsl;

gsl_vector_uint_equal :: (u: *gsl_vector_uint, v: *gsl_vector_uint) -> s32 #foreign libgsl;

gsl_vector_uint_isnull :: (v: *gsl_vector_uint) -> s32 #foreign libgsl;
gsl_vector_uint_ispos :: (v: *gsl_vector_uint) -> s32 #foreign libgsl;
gsl_vector_uint_isneg :: (v: *gsl_vector_uint) -> s32 #foreign libgsl;
gsl_vector_uint_isnonneg :: (v: *gsl_vector_uint) -> s32 #foreign libgsl;

gsl_vector_uint_get :: (v: *gsl_vector_uint, i: size_t) -> u32 #foreign libgsl;
gsl_vector_uint_set :: (v: *gsl_vector_uint, i: size_t, x: u32) -> void #foreign libgsl;
gsl_vector_uint_ptr :: (v: *gsl_vector_uint, i: size_t) -> *u32 #foreign libgsl;
gsl_vector_uint_const_ptr :: (v: *gsl_vector_uint, i: size_t) -> *u32 #foreign libgsl;

gsl_vector_int :: struct {
    size:   size_t;
    stride: size_t;
    data:   *s32;
    block:  *gsl_block_int;
    owner:  s32;
}

_gsl_vector_int_view :: struct {
    vector: gsl_vector_int;
}

gsl_vector_int_view :: _gsl_vector_int_view;

_gsl_vector_int_const_view :: struct {
    vector: gsl_vector_int;
}

gsl_vector_int_const_view :: _gsl_vector_int_const_view;

/* Allocation */
gsl_vector_int_alloc :: (n: size_t) -> *gsl_vector_int #foreign libgsl;
gsl_vector_int_calloc :: (n: size_t) -> *gsl_vector_int #foreign libgsl;

gsl_vector_int_alloc_from_block :: (b: *gsl_block_int, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_int #foreign libgsl;

gsl_vector_int_alloc_from_vector :: (v: *gsl_vector_int, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_int #foreign libgsl;

gsl_vector_int_free :: (v: *gsl_vector_int) -> void #foreign libgsl;

/* Views */
gsl_vector_int_view_array :: (v: *s32, n: size_t) -> _gsl_vector_int_view #foreign libgsl;

gsl_vector_int_view_array_with_stride :: (base: *s32, stride: size_t, n: size_t) -> _gsl_vector_int_view #foreign libgsl;

gsl_vector_int_const_view_array :: (v: *s32, n: size_t) -> _gsl_vector_int_const_view #foreign libgsl;

gsl_vector_int_const_view_array_with_stride :: (base: *s32, stride: size_t, n: size_t) -> _gsl_vector_int_const_view #foreign libgsl;

gsl_vector_int_subvector :: (v: *gsl_vector_int, i: size_t, n: size_t) -> _gsl_vector_int_view #foreign libgsl;

gsl_vector_int_subvector_with_stride :: (v: *gsl_vector_int, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_int_view #foreign libgsl;

gsl_vector_int_const_subvector :: (v: *gsl_vector_int, i: size_t, n: size_t) -> _gsl_vector_int_const_view #foreign libgsl;

gsl_vector_int_const_subvector_with_stride :: (v: *gsl_vector_int, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_int_const_view #foreign libgsl;

/* Operations */
gsl_vector_int_set_zero :: (v: *gsl_vector_int) -> void #foreign libgsl;
gsl_vector_int_set_all :: (v: *gsl_vector_int, x: s32) -> void #foreign libgsl;
gsl_vector_int_set_basis :: (v: *gsl_vector_int, i: size_t) -> s32 #foreign libgsl;

gsl_vector_int_fread :: (stream: *FILE, v: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_fwrite :: (stream: *FILE, v: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_fscanf :: (stream: *FILE, v: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_fprintf :: (stream: *FILE, v: *gsl_vector_int, format: *u8) -> s32 #foreign libgsl;

gsl_vector_int_memcpy :: (dest: *gsl_vector_int, src: *gsl_vector_int) -> s32 #foreign libgsl;

gsl_vector_int_reverse :: (v: *gsl_vector_int) -> s32 #foreign libgsl;

gsl_vector_int_swap :: (v: *gsl_vector_int, w: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_swap_elements :: (v: *gsl_vector_int, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_vector_int_max :: (v: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_min :: (v: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_minmax :: (v: *gsl_vector_int, min_out: *s32, max_out: *s32) -> void #foreign libgsl;

gsl_vector_int_max_index :: (v: *gsl_vector_int) -> size_t #foreign libgsl;
gsl_vector_int_min_index :: (v: *gsl_vector_int) -> size_t #foreign libgsl;
gsl_vector_int_minmax_index :: (v: *gsl_vector_int, imin: *size_t, imax: *size_t) -> void #foreign libgsl;

gsl_vector_int_add :: (a: *gsl_vector_int, b: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_sub :: (a: *gsl_vector_int, b: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_mul :: (a: *gsl_vector_int, b: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_div :: (a: *gsl_vector_int, b: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_scale :: (a: *gsl_vector_int, x: s32) -> s32 #foreign libgsl;
gsl_vector_int_add_constant :: (a: *gsl_vector_int, x: s32) -> s32 #foreign libgsl;
gsl_vector_int_axpby :: (alpha: s32, x: *gsl_vector_int, beta: s32, y: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_sum :: (a: *gsl_vector_int) -> s32 #foreign libgsl;

gsl_vector_int_equal :: (u: *gsl_vector_int, v: *gsl_vector_int) -> s32 #foreign libgsl;

gsl_vector_int_isnull :: (v: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_ispos :: (v: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_isneg :: (v: *gsl_vector_int) -> s32 #foreign libgsl;
gsl_vector_int_isnonneg :: (v: *gsl_vector_int) -> s32 #foreign libgsl;

gsl_vector_int_get :: (v: *gsl_vector_int, i: size_t) -> s32 #foreign libgsl;
gsl_vector_int_set :: (v: *gsl_vector_int, i: size_t, x: s32) -> void #foreign libgsl;
gsl_vector_int_ptr :: (v: *gsl_vector_int, i: size_t) -> *s32 #foreign libgsl;
gsl_vector_int_const_ptr :: (v: *gsl_vector_int, i: size_t) -> *s32 #foreign libgsl;

gsl_vector_ushort :: struct {
    size:   size_t;
    stride: size_t;
    data:   *u16;
    block:  *gsl_block_ushort;
    owner:  s32;
}

_gsl_vector_ushort_view :: struct {
    vector: gsl_vector_ushort;
}

gsl_vector_ushort_view :: _gsl_vector_ushort_view;

_gsl_vector_ushort_const_view :: struct {
    vector: gsl_vector_ushort;
}

gsl_vector_ushort_const_view :: _gsl_vector_ushort_const_view;

/* Allocation */
gsl_vector_ushort_alloc :: (n: size_t) -> *gsl_vector_ushort #foreign libgsl;
gsl_vector_ushort_calloc :: (n: size_t) -> *gsl_vector_ushort #foreign libgsl;

gsl_vector_ushort_alloc_from_block :: (b: *gsl_block_ushort, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_ushort #foreign libgsl;

gsl_vector_ushort_alloc_from_vector :: (v: *gsl_vector_ushort, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_ushort #foreign libgsl;

gsl_vector_ushort_free :: (v: *gsl_vector_ushort) -> void #foreign libgsl;

/* Views */
gsl_vector_ushort_view_array :: (v: *u16, n: size_t) -> _gsl_vector_ushort_view #foreign libgsl;

gsl_vector_ushort_view_array_with_stride :: (base: *u16, stride: size_t, n: size_t) -> _gsl_vector_ushort_view #foreign libgsl;

gsl_vector_ushort_const_view_array :: (v: *u16, n: size_t) -> _gsl_vector_ushort_const_view #foreign libgsl;

gsl_vector_ushort_const_view_array_with_stride :: (base: *u16, stride: size_t, n: size_t) -> _gsl_vector_ushort_const_view #foreign libgsl;

gsl_vector_ushort_subvector :: (v: *gsl_vector_ushort, i: size_t, n: size_t) -> _gsl_vector_ushort_view #foreign libgsl;

gsl_vector_ushort_subvector_with_stride :: (v: *gsl_vector_ushort, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_ushort_view #foreign libgsl;

gsl_vector_ushort_const_subvector :: (v: *gsl_vector_ushort, i: size_t, n: size_t) -> _gsl_vector_ushort_const_view #foreign libgsl;

gsl_vector_ushort_const_subvector_with_stride :: (v: *gsl_vector_ushort, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_ushort_const_view #foreign libgsl;

/* Operations */
gsl_vector_ushort_set_zero :: (v: *gsl_vector_ushort) -> void #foreign libgsl;
gsl_vector_ushort_set_all :: (v: *gsl_vector_ushort, x: u16) -> void #foreign libgsl;
gsl_vector_ushort_set_basis :: (v: *gsl_vector_ushort, i: size_t) -> s32 #foreign libgsl;

gsl_vector_ushort_fread :: (stream: *FILE, v: *gsl_vector_ushort) -> s32 #foreign libgsl;
gsl_vector_ushort_fwrite :: (stream: *FILE, v: *gsl_vector_ushort) -> s32 #foreign libgsl;
gsl_vector_ushort_fscanf :: (stream: *FILE, v: *gsl_vector_ushort) -> s32 #foreign libgsl;
gsl_vector_ushort_fprintf :: (stream: *FILE, v: *gsl_vector_ushort, format: *u8) -> s32 #foreign libgsl;

gsl_vector_ushort_memcpy :: (dest: *gsl_vector_ushort, src: *gsl_vector_ushort) -> s32 #foreign libgsl;

gsl_vector_ushort_reverse :: (v: *gsl_vector_ushort) -> s32 #foreign libgsl;

gsl_vector_ushort_swap :: (v: *gsl_vector_ushort, w: *gsl_vector_ushort) -> s32 #foreign libgsl;
gsl_vector_ushort_swap_elements :: (v: *gsl_vector_ushort, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_vector_ushort_max :: (v: *gsl_vector_ushort) -> u16 #foreign libgsl;
gsl_vector_ushort_min :: (v: *gsl_vector_ushort) -> u16 #foreign libgsl;
gsl_vector_ushort_minmax :: (v: *gsl_vector_ushort, min_out: *u16, max_out: *u16) -> void #foreign libgsl;

gsl_vector_ushort_max_index :: (v: *gsl_vector_ushort) -> size_t #foreign libgsl;
gsl_vector_ushort_min_index :: (v: *gsl_vector_ushort) -> size_t #foreign libgsl;
gsl_vector_ushort_minmax_index :: (v: *gsl_vector_ushort, imin: *size_t, imax: *size_t) -> void #foreign libgsl;

gsl_vector_ushort_add :: (a: *gsl_vector_ushort, b: *gsl_vector_ushort) -> s32 #foreign libgsl;
gsl_vector_ushort_sub :: (a: *gsl_vector_ushort, b: *gsl_vector_ushort) -> s32 #foreign libgsl;
gsl_vector_ushort_mul :: (a: *gsl_vector_ushort, b: *gsl_vector_ushort) -> s32 #foreign libgsl;
gsl_vector_ushort_div :: (a: *gsl_vector_ushort, b: *gsl_vector_ushort) -> s32 #foreign libgsl;
gsl_vector_ushort_scale :: (a: *gsl_vector_ushort, x: u16) -> s32 #foreign libgsl;
gsl_vector_ushort_add_constant :: (a: *gsl_vector_ushort, x: u16) -> s32 #foreign libgsl;
gsl_vector_ushort_axpby :: (alpha: u16, x: *gsl_vector_ushort, beta: u16, y: *gsl_vector_ushort) -> s32 #foreign libgsl;
gsl_vector_ushort_sum :: (a: *gsl_vector_ushort) -> u16 #foreign libgsl;

gsl_vector_ushort_equal :: (u: *gsl_vector_ushort, v: *gsl_vector_ushort) -> s32 #foreign libgsl;

gsl_vector_ushort_isnull :: (v: *gsl_vector_ushort) -> s32 #foreign libgsl;
gsl_vector_ushort_ispos :: (v: *gsl_vector_ushort) -> s32 #foreign libgsl;
gsl_vector_ushort_isneg :: (v: *gsl_vector_ushort) -> s32 #foreign libgsl;
gsl_vector_ushort_isnonneg :: (v: *gsl_vector_ushort) -> s32 #foreign libgsl;

gsl_vector_ushort_get :: (v: *gsl_vector_ushort, i: size_t) -> u16 #foreign libgsl;
gsl_vector_ushort_set :: (v: *gsl_vector_ushort, i: size_t, x: u16) -> void #foreign libgsl;
gsl_vector_ushort_ptr :: (v: *gsl_vector_ushort, i: size_t) -> *u16 #foreign libgsl;
gsl_vector_ushort_const_ptr :: (v: *gsl_vector_ushort, i: size_t) -> *u16 #foreign libgsl;

gsl_vector_short :: struct {
    size:   size_t;
    stride: size_t;
    data:   *s16;
    block:  *gsl_block_short;
    owner:  s32;
}

_gsl_vector_short_view :: struct {
    vector: gsl_vector_short;
}

gsl_vector_short_view :: _gsl_vector_short_view;

_gsl_vector_short_const_view :: struct {
    vector: gsl_vector_short;
}

gsl_vector_short_const_view :: _gsl_vector_short_const_view;

/* Allocation */
gsl_vector_short_alloc :: (n: size_t) -> *gsl_vector_short #foreign libgsl;
gsl_vector_short_calloc :: (n: size_t) -> *gsl_vector_short #foreign libgsl;

gsl_vector_short_alloc_from_block :: (b: *gsl_block_short, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_short #foreign libgsl;

gsl_vector_short_alloc_from_vector :: (v: *gsl_vector_short, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_short #foreign libgsl;

gsl_vector_short_free :: (v: *gsl_vector_short) -> void #foreign libgsl;

/* Views */
gsl_vector_short_view_array :: (v: *s16, n: size_t) -> _gsl_vector_short_view #foreign libgsl;

gsl_vector_short_view_array_with_stride :: (base: *s16, stride: size_t, n: size_t) -> _gsl_vector_short_view #foreign libgsl;

gsl_vector_short_const_view_array :: (v: *s16, n: size_t) -> _gsl_vector_short_const_view #foreign libgsl;

gsl_vector_short_const_view_array_with_stride :: (base: *s16, stride: size_t, n: size_t) -> _gsl_vector_short_const_view #foreign libgsl;

gsl_vector_short_subvector :: (v: *gsl_vector_short, i: size_t, n: size_t) -> _gsl_vector_short_view #foreign libgsl;

gsl_vector_short_subvector_with_stride :: (v: *gsl_vector_short, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_short_view #foreign libgsl;

gsl_vector_short_const_subvector :: (v: *gsl_vector_short, i: size_t, n: size_t) -> _gsl_vector_short_const_view #foreign libgsl;

gsl_vector_short_const_subvector_with_stride :: (v: *gsl_vector_short, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_short_const_view #foreign libgsl;

/* Operations */
gsl_vector_short_set_zero :: (v: *gsl_vector_short) -> void #foreign libgsl;
gsl_vector_short_set_all :: (v: *gsl_vector_short, x: s16) -> void #foreign libgsl;
gsl_vector_short_set_basis :: (v: *gsl_vector_short, i: size_t) -> s32 #foreign libgsl;

gsl_vector_short_fread :: (stream: *FILE, v: *gsl_vector_short) -> s32 #foreign libgsl;
gsl_vector_short_fwrite :: (stream: *FILE, v: *gsl_vector_short) -> s32 #foreign libgsl;
gsl_vector_short_fscanf :: (stream: *FILE, v: *gsl_vector_short) -> s32 #foreign libgsl;
gsl_vector_short_fprintf :: (stream: *FILE, v: *gsl_vector_short, format: *u8) -> s32 #foreign libgsl;

gsl_vector_short_memcpy :: (dest: *gsl_vector_short, src: *gsl_vector_short) -> s32 #foreign libgsl;

gsl_vector_short_reverse :: (v: *gsl_vector_short) -> s32 #foreign libgsl;

gsl_vector_short_swap :: (v: *gsl_vector_short, w: *gsl_vector_short) -> s32 #foreign libgsl;
gsl_vector_short_swap_elements :: (v: *gsl_vector_short, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_vector_short_max :: (v: *gsl_vector_short) -> s16 #foreign libgsl;
gsl_vector_short_min :: (v: *gsl_vector_short) -> s16 #foreign libgsl;
gsl_vector_short_minmax :: (v: *gsl_vector_short, min_out: *s16, max_out: *s16) -> void #foreign libgsl;

gsl_vector_short_max_index :: (v: *gsl_vector_short) -> size_t #foreign libgsl;
gsl_vector_short_min_index :: (v: *gsl_vector_short) -> size_t #foreign libgsl;
gsl_vector_short_minmax_index :: (v: *gsl_vector_short, imin: *size_t, imax: *size_t) -> void #foreign libgsl;

gsl_vector_short_add :: (a: *gsl_vector_short, b: *gsl_vector_short) -> s32 #foreign libgsl;
gsl_vector_short_sub :: (a: *gsl_vector_short, b: *gsl_vector_short) -> s32 #foreign libgsl;
gsl_vector_short_mul :: (a: *gsl_vector_short, b: *gsl_vector_short) -> s32 #foreign libgsl;
gsl_vector_short_div :: (a: *gsl_vector_short, b: *gsl_vector_short) -> s32 #foreign libgsl;
gsl_vector_short_scale :: (a: *gsl_vector_short, x: s16) -> s32 #foreign libgsl;
gsl_vector_short_add_constant :: (a: *gsl_vector_short, x: s16) -> s32 #foreign libgsl;
gsl_vector_short_axpby :: (alpha: s16, x: *gsl_vector_short, beta: s16, y: *gsl_vector_short) -> s32 #foreign libgsl;
gsl_vector_short_sum :: (a: *gsl_vector_short) -> s16 #foreign libgsl;

gsl_vector_short_equal :: (u: *gsl_vector_short, v: *gsl_vector_short) -> s32 #foreign libgsl;

gsl_vector_short_isnull :: (v: *gsl_vector_short) -> s32 #foreign libgsl;
gsl_vector_short_ispos :: (v: *gsl_vector_short) -> s32 #foreign libgsl;
gsl_vector_short_isneg :: (v: *gsl_vector_short) -> s32 #foreign libgsl;
gsl_vector_short_isnonneg :: (v: *gsl_vector_short) -> s32 #foreign libgsl;

gsl_vector_short_get :: (v: *gsl_vector_short, i: size_t) -> s16 #foreign libgsl;
gsl_vector_short_set :: (v: *gsl_vector_short, i: size_t, x: s16) -> void #foreign libgsl;
gsl_vector_short_ptr :: (v: *gsl_vector_short, i: size_t) -> *s16 #foreign libgsl;
gsl_vector_short_const_ptr :: (v: *gsl_vector_short, i: size_t) -> *s16 #foreign libgsl;

gsl_vector_uchar :: struct {
    size:   size_t;
    stride: size_t;
    data:   *u8;
    block:  *gsl_block_uchar;
    owner:  s32;
}

_gsl_vector_uchar_view :: struct {
    vector: gsl_vector_uchar;
}

gsl_vector_uchar_view :: _gsl_vector_uchar_view;

_gsl_vector_uchar_const_view :: struct {
    vector: gsl_vector_uchar;
}

gsl_vector_uchar_const_view :: _gsl_vector_uchar_const_view;

/* Allocation */
gsl_vector_uchar_alloc :: (n: size_t) -> *gsl_vector_uchar #foreign libgsl;
gsl_vector_uchar_calloc :: (n: size_t) -> *gsl_vector_uchar #foreign libgsl;

gsl_vector_uchar_alloc_from_block :: (b: *gsl_block_uchar, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_uchar #foreign libgsl;

gsl_vector_uchar_alloc_from_vector :: (v: *gsl_vector_uchar, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_uchar #foreign libgsl;

gsl_vector_uchar_free :: (v: *gsl_vector_uchar) -> void #foreign libgsl;

/* Views */
gsl_vector_uchar_view_array :: (v: *u8, n: size_t) -> _gsl_vector_uchar_view #foreign libgsl;

gsl_vector_uchar_view_array_with_stride :: (base: *u8, stride: size_t, n: size_t) -> _gsl_vector_uchar_view #foreign libgsl;

gsl_vector_uchar_const_view_array :: (v: *u8, n: size_t) -> _gsl_vector_uchar_const_view #foreign libgsl;

gsl_vector_uchar_const_view_array_with_stride :: (base: *u8, stride: size_t, n: size_t) -> _gsl_vector_uchar_const_view #foreign libgsl;

gsl_vector_uchar_subvector :: (v: *gsl_vector_uchar, i: size_t, n: size_t) -> _gsl_vector_uchar_view #foreign libgsl;

gsl_vector_uchar_subvector_with_stride :: (v: *gsl_vector_uchar, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_uchar_view #foreign libgsl;

gsl_vector_uchar_const_subvector :: (v: *gsl_vector_uchar, i: size_t, n: size_t) -> _gsl_vector_uchar_const_view #foreign libgsl;

gsl_vector_uchar_const_subvector_with_stride :: (v: *gsl_vector_uchar, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_uchar_const_view #foreign libgsl;

/* Operations */
gsl_vector_uchar_set_zero :: (v: *gsl_vector_uchar) -> void #foreign libgsl;
gsl_vector_uchar_set_all :: (v: *gsl_vector_uchar, x: u8) -> void #foreign libgsl;
gsl_vector_uchar_set_basis :: (v: *gsl_vector_uchar, i: size_t) -> s32 #foreign libgsl;

gsl_vector_uchar_fread :: (stream: *FILE, v: *gsl_vector_uchar) -> s32 #foreign libgsl;
gsl_vector_uchar_fwrite :: (stream: *FILE, v: *gsl_vector_uchar) -> s32 #foreign libgsl;
gsl_vector_uchar_fscanf :: (stream: *FILE, v: *gsl_vector_uchar) -> s32 #foreign libgsl;
gsl_vector_uchar_fprintf :: (stream: *FILE, v: *gsl_vector_uchar, format: *u8) -> s32 #foreign libgsl;

gsl_vector_uchar_memcpy :: (dest: *gsl_vector_uchar, src: *gsl_vector_uchar) -> s32 #foreign libgsl;

gsl_vector_uchar_reverse :: (v: *gsl_vector_uchar) -> s32 #foreign libgsl;

gsl_vector_uchar_swap :: (v: *gsl_vector_uchar, w: *gsl_vector_uchar) -> s32 #foreign libgsl;
gsl_vector_uchar_swap_elements :: (v: *gsl_vector_uchar, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_vector_uchar_max :: (v: *gsl_vector_uchar) -> u8 #foreign libgsl;
gsl_vector_uchar_min :: (v: *gsl_vector_uchar) -> u8 #foreign libgsl;
gsl_vector_uchar_minmax :: (v: *gsl_vector_uchar, min_out: *u8, max_out: *u8) -> void #foreign libgsl;

gsl_vector_uchar_max_index :: (v: *gsl_vector_uchar) -> size_t #foreign libgsl;
gsl_vector_uchar_min_index :: (v: *gsl_vector_uchar) -> size_t #foreign libgsl;
gsl_vector_uchar_minmax_index :: (v: *gsl_vector_uchar, imin: *size_t, imax: *size_t) -> void #foreign libgsl;

gsl_vector_uchar_add :: (a: *gsl_vector_uchar, b: *gsl_vector_uchar) -> s32 #foreign libgsl;
gsl_vector_uchar_sub :: (a: *gsl_vector_uchar, b: *gsl_vector_uchar) -> s32 #foreign libgsl;
gsl_vector_uchar_mul :: (a: *gsl_vector_uchar, b: *gsl_vector_uchar) -> s32 #foreign libgsl;
gsl_vector_uchar_div :: (a: *gsl_vector_uchar, b: *gsl_vector_uchar) -> s32 #foreign libgsl;
gsl_vector_uchar_scale :: (a: *gsl_vector_uchar, x: u8) -> s32 #foreign libgsl;
gsl_vector_uchar_add_constant :: (a: *gsl_vector_uchar, x: u8) -> s32 #foreign libgsl;
gsl_vector_uchar_axpby :: (alpha: u8, x: *gsl_vector_uchar, beta: u8, y: *gsl_vector_uchar) -> s32 #foreign libgsl;
gsl_vector_uchar_sum :: (a: *gsl_vector_uchar) -> u8 #foreign libgsl;

gsl_vector_uchar_equal :: (u: *gsl_vector_uchar, v: *gsl_vector_uchar) -> s32 #foreign libgsl;

gsl_vector_uchar_isnull :: (v: *gsl_vector_uchar) -> s32 #foreign libgsl;
gsl_vector_uchar_ispos :: (v: *gsl_vector_uchar) -> s32 #foreign libgsl;
gsl_vector_uchar_isneg :: (v: *gsl_vector_uchar) -> s32 #foreign libgsl;
gsl_vector_uchar_isnonneg :: (v: *gsl_vector_uchar) -> s32 #foreign libgsl;

gsl_vector_uchar_get :: (v: *gsl_vector_uchar, i: size_t) -> u8 #foreign libgsl;
gsl_vector_uchar_set :: (v: *gsl_vector_uchar, i: size_t, x: u8) -> void #foreign libgsl;
gsl_vector_uchar_ptr :: (v: *gsl_vector_uchar, i: size_t) -> *u8 #foreign libgsl;
gsl_vector_uchar_const_ptr :: (v: *gsl_vector_uchar, i: size_t) -> *u8 #foreign libgsl;

gsl_vector_char :: struct {
    size:   size_t;
    stride: size_t;
    data:   *u8;
    block:  *gsl_block_char;
    owner:  s32;
}

_gsl_vector_char_view :: struct {
    vector: gsl_vector_char;
}

gsl_vector_char_view :: _gsl_vector_char_view;

_gsl_vector_char_const_view :: struct {
    vector: gsl_vector_char;
}

gsl_vector_char_const_view :: _gsl_vector_char_const_view;

/* Allocation */
gsl_vector_char_alloc :: (n: size_t) -> *gsl_vector_char #foreign libgsl;
gsl_vector_char_calloc :: (n: size_t) -> *gsl_vector_char #foreign libgsl;

gsl_vector_char_alloc_from_block :: (b: *gsl_block_char, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_char #foreign libgsl;

gsl_vector_char_alloc_from_vector :: (v: *gsl_vector_char, offset: size_t, n: size_t, stride: size_t) -> *gsl_vector_char #foreign libgsl;

gsl_vector_char_free :: (v: *gsl_vector_char) -> void #foreign libgsl;

/* Views */
gsl_vector_char_view_array :: (v: *u8, n: size_t) -> _gsl_vector_char_view #foreign libgsl;

gsl_vector_char_view_array_with_stride :: (base: *u8, stride: size_t, n: size_t) -> _gsl_vector_char_view #foreign libgsl;

gsl_vector_char_const_view_array :: (v: *u8, n: size_t) -> _gsl_vector_char_const_view #foreign libgsl;

gsl_vector_char_const_view_array_with_stride :: (base: *u8, stride: size_t, n: size_t) -> _gsl_vector_char_const_view #foreign libgsl;

gsl_vector_char_subvector :: (v: *gsl_vector_char, i: size_t, n: size_t) -> _gsl_vector_char_view #foreign libgsl;

gsl_vector_char_subvector_with_stride :: (v: *gsl_vector_char, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_char_view #foreign libgsl;

gsl_vector_char_const_subvector :: (v: *gsl_vector_char, i: size_t, n: size_t) -> _gsl_vector_char_const_view #foreign libgsl;

gsl_vector_char_const_subvector_with_stride :: (v: *gsl_vector_char, i: size_t, stride: size_t, n: size_t) -> _gsl_vector_char_const_view #foreign libgsl;

/* Operations */
gsl_vector_char_set_zero :: (v: *gsl_vector_char) -> void #foreign libgsl;
gsl_vector_char_set_all :: (v: *gsl_vector_char, x: u8) -> void #foreign libgsl;
gsl_vector_char_set_basis :: (v: *gsl_vector_char, i: size_t) -> s32 #foreign libgsl;

gsl_vector_char_fread :: (stream: *FILE, v: *gsl_vector_char) -> s32 #foreign libgsl;
gsl_vector_char_fwrite :: (stream: *FILE, v: *gsl_vector_char) -> s32 #foreign libgsl;
gsl_vector_char_fscanf :: (stream: *FILE, v: *gsl_vector_char) -> s32 #foreign libgsl;
gsl_vector_char_fprintf :: (stream: *FILE, v: *gsl_vector_char, format: *u8) -> s32 #foreign libgsl;

gsl_vector_char_memcpy :: (dest: *gsl_vector_char, src: *gsl_vector_char) -> s32 #foreign libgsl;

gsl_vector_char_reverse :: (v: *gsl_vector_char) -> s32 #foreign libgsl;

gsl_vector_char_swap :: (v: *gsl_vector_char, w: *gsl_vector_char) -> s32 #foreign libgsl;
gsl_vector_char_swap_elements :: (v: *gsl_vector_char, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_vector_char_max :: (v: *gsl_vector_char) -> u8 #foreign libgsl;
gsl_vector_char_min :: (v: *gsl_vector_char) -> u8 #foreign libgsl;
gsl_vector_char_minmax :: (v: *gsl_vector_char, min_out: *u8, max_out: *u8) -> void #foreign libgsl;

gsl_vector_char_max_index :: (v: *gsl_vector_char) -> size_t #foreign libgsl;
gsl_vector_char_min_index :: (v: *gsl_vector_char) -> size_t #foreign libgsl;
gsl_vector_char_minmax_index :: (v: *gsl_vector_char, imin: *size_t, imax: *size_t) -> void #foreign libgsl;

gsl_vector_char_add :: (a: *gsl_vector_char, b: *gsl_vector_char) -> s32 #foreign libgsl;
gsl_vector_char_sub :: (a: *gsl_vector_char, b: *gsl_vector_char) -> s32 #foreign libgsl;
gsl_vector_char_mul :: (a: *gsl_vector_char, b: *gsl_vector_char) -> s32 #foreign libgsl;
gsl_vector_char_div :: (a: *gsl_vector_char, b: *gsl_vector_char) -> s32 #foreign libgsl;
gsl_vector_char_scale :: (a: *gsl_vector_char, x: u8) -> s32 #foreign libgsl;
gsl_vector_char_add_constant :: (a: *gsl_vector_char, x: u8) -> s32 #foreign libgsl;
gsl_vector_char_axpby :: (alpha: u8, x: *gsl_vector_char, beta: u8, y: *gsl_vector_char) -> s32 #foreign libgsl;
gsl_vector_char_sum :: (a: *gsl_vector_char) -> u8 #foreign libgsl;

gsl_vector_char_equal :: (u: *gsl_vector_char, v: *gsl_vector_char) -> s32 #foreign libgsl;

gsl_vector_char_isnull :: (v: *gsl_vector_char) -> s32 #foreign libgsl;
gsl_vector_char_ispos :: (v: *gsl_vector_char) -> s32 #foreign libgsl;
gsl_vector_char_isneg :: (v: *gsl_vector_char) -> s32 #foreign libgsl;
gsl_vector_char_isnonneg :: (v: *gsl_vector_char) -> s32 #foreign libgsl;

gsl_vector_char_get :: (v: *gsl_vector_char, i: size_t) -> u8 #foreign libgsl;
gsl_vector_char_set :: (v: *gsl_vector_char, i: size_t, x: u8) -> void #foreign libgsl;
gsl_vector_char_ptr :: (v: *gsl_vector_char, i: size_t) -> *u8 #foreign libgsl;
gsl_vector_char_const_ptr :: (v: *gsl_vector_char, i: size_t) -> *u8 #foreign libgsl;

gsl_matrix_float :: struct {
    size1: size_t;
    size2: size_t;
    tda:   size_t;
    data:  *float;
    block: *gsl_block_float;
    owner: s32;
}

_gsl_matrix_float_view :: struct {
    matrix: gsl_matrix_float;
}

gsl_matrix_float_view :: _gsl_matrix_float_view;

_gsl_matrix_float_const_view :: struct {
    matrix: gsl_matrix_float;
}

gsl_matrix_float_const_view :: _gsl_matrix_float_const_view;

/* Allocation */
gsl_matrix_float_alloc :: (n1: size_t, n2: size_t) -> *gsl_matrix_float #foreign libgsl;

gsl_matrix_float_calloc :: (n1: size_t, n2: size_t) -> *gsl_matrix_float #foreign libgsl;

gsl_matrix_float_alloc_from_block :: (b: *gsl_block_float, offset: size_t, n1: size_t, n2: size_t, d2: size_t) -> *gsl_matrix_float #foreign libgsl;

gsl_matrix_float_alloc_from_matrix :: (m: *gsl_matrix_float, k1: size_t, k2: size_t, n1: size_t, n2: size_t) -> *gsl_matrix_float #foreign libgsl;

gsl_vector_float_alloc_row_from_matrix :: (m: *gsl_matrix_float, i: size_t) -> *gsl_vector_float #foreign libgsl;

gsl_vector_float_alloc_col_from_matrix :: (m: *gsl_matrix_float, j: size_t) -> *gsl_vector_float #foreign libgsl;

gsl_matrix_float_free :: (m: *gsl_matrix_float) -> void #foreign libgsl;

/* Views */
gsl_matrix_float_submatrix :: (m: *gsl_matrix_float, i: size_t, j: size_t, n1: size_t, n2: size_t) -> _gsl_matrix_float_view #foreign libgsl;

gsl_matrix_float_row :: (m: *gsl_matrix_float, i: size_t) -> _gsl_vector_float_view #foreign libgsl;

gsl_matrix_float_column :: (m: *gsl_matrix_float, j: size_t) -> _gsl_vector_float_view #foreign libgsl;

gsl_matrix_float_diagonal :: (m: *gsl_matrix_float) -> _gsl_vector_float_view #foreign libgsl;

gsl_matrix_float_subdiagonal :: (m: *gsl_matrix_float, k: size_t) -> _gsl_vector_float_view #foreign libgsl;

gsl_matrix_float_superdiagonal :: (m: *gsl_matrix_float, k: size_t) -> _gsl_vector_float_view #foreign libgsl;

gsl_matrix_float_subrow :: (m: *gsl_matrix_float, i: size_t, offset: size_t, n: size_t) -> _gsl_vector_float_view #foreign libgsl;

gsl_matrix_float_subcolumn :: (m: *gsl_matrix_float, j: size_t, offset: size_t, n: size_t) -> _gsl_vector_float_view #foreign libgsl;

gsl_matrix_float_view_array :: (base: *float, n1: size_t, n2: size_t) -> _gsl_matrix_float_view #foreign libgsl;

gsl_matrix_float_view_array_with_tda :: (base: *float, n1: size_t, n2: size_t, tda: size_t) -> _gsl_matrix_float_view #foreign libgsl;

gsl_matrix_float_view_vector :: (v: *gsl_vector_float, n1: size_t, n2: size_t) -> _gsl_matrix_float_view #foreign libgsl;

gsl_matrix_float_view_vector_with_tda :: (v: *gsl_vector_float, n1: size_t, n2: size_t, tda: size_t) -> _gsl_matrix_float_view #foreign libgsl;

gsl_matrix_float_const_submatrix :: (m: *gsl_matrix_float, i: size_t, j: size_t, n1: size_t, n2: size_t) -> _gsl_matrix_float_const_view #foreign libgsl;

gsl_matrix_float_const_row :: (m: *gsl_matrix_float, i: size_t) -> _gsl_vector_float_const_view #foreign libgsl;

gsl_matrix_float_const_column :: (m: *gsl_matrix_float, j: size_t) -> _gsl_vector_float_const_view #foreign libgsl;

gsl_matrix_float_const_diagonal :: (m: *gsl_matrix_float) -> _gsl_vector_float_const_view #foreign libgsl;

gsl_matrix_float_const_subdiagonal :: (m: *gsl_matrix_float, k: size_t) -> _gsl_vector_float_const_view #foreign libgsl;

gsl_matrix_float_const_superdiagonal :: (m: *gsl_matrix_float, k: size_t) -> _gsl_vector_float_const_view #foreign libgsl;

gsl_matrix_float_const_subrow :: (m: *gsl_matrix_float, i: size_t, offset: size_t, n: size_t) -> _gsl_vector_float_const_view #foreign libgsl;

gsl_matrix_float_const_subcolumn :: (m: *gsl_matrix_float, j: size_t, offset: size_t, n: size_t) -> _gsl_vector_float_const_view #foreign libgsl;

gsl_matrix_float_const_view_array :: (base: *float, n1: size_t, n2: size_t) -> _gsl_matrix_float_const_view #foreign libgsl;

gsl_matrix_float_const_view_array_with_tda :: (base: *float, n1: size_t, n2: size_t, tda: size_t) -> _gsl_matrix_float_const_view #foreign libgsl;

gsl_matrix_float_const_view_vector :: (v: *gsl_vector_float, n1: size_t, n2: size_t) -> _gsl_matrix_float_const_view #foreign libgsl;

gsl_matrix_float_const_view_vector_with_tda :: (v: *gsl_vector_float, n1: size_t, n2: size_t, tda: size_t) -> _gsl_matrix_float_const_view #foreign libgsl;

/* Operations */
gsl_matrix_float_set_zero :: (m: *gsl_matrix_float) -> void #foreign libgsl;
gsl_matrix_float_set_identity :: (m: *gsl_matrix_float) -> void #foreign libgsl;
gsl_matrix_float_set_all :: (m: *gsl_matrix_float, x: float) -> void #foreign libgsl;

gsl_matrix_float_fread :: (stream: *FILE, m: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_fwrite :: (stream: *FILE, m: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_fscanf :: (stream: *FILE, m: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_fprintf :: (stream: *FILE, m: *gsl_matrix_float, format: *u8) -> s32 #foreign libgsl;

gsl_matrix_float_memcpy :: (dest: *gsl_matrix_float, src: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_swap :: (m1: *gsl_matrix_float, m2: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_tricpy :: (Uplo: CBLAS_UPLO_t, Diag: CBLAS_DIAG_t, dest: *gsl_matrix_float, src: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_matrix_float_swap_rows :: (m: *gsl_matrix_float, i: size_t, j: size_t) -> s32 #foreign libgsl;
gsl_matrix_float_swap_columns :: (m: *gsl_matrix_float, i: size_t, j: size_t) -> s32 #foreign libgsl;
gsl_matrix_float_swap_rowcol :: (m: *gsl_matrix_float, i: size_t, j: size_t) -> s32 #foreign libgsl;
gsl_matrix_float_transpose :: (m: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_transpose_memcpy :: (dest: *gsl_matrix_float, src: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_transpose_tricpy :: (Uplo_src: CBLAS_UPLO_t, Diag: CBLAS_DIAG_t, dest: *gsl_matrix_float, src: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_matrix_float_max :: (m: *gsl_matrix_float) -> float #foreign libgsl;
gsl_matrix_float_min :: (m: *gsl_matrix_float) -> float #foreign libgsl;
gsl_matrix_float_minmax :: (m: *gsl_matrix_float, min_out: *float, max_out: *float) -> void #foreign libgsl;

gsl_matrix_float_max_index :: (m: *gsl_matrix_float, imax: *size_t, jmax: *size_t) -> void #foreign libgsl;
gsl_matrix_float_min_index :: (m: *gsl_matrix_float, imin: *size_t, jmin: *size_t) -> void #foreign libgsl;
gsl_matrix_float_minmax_index :: (m: *gsl_matrix_float, imin: *size_t, jmin: *size_t, imax: *size_t, jmax: *size_t) -> void #foreign libgsl;

gsl_matrix_float_equal :: (a: *gsl_matrix_float, b: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_matrix_float_isnull :: (m: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_ispos :: (m: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_isneg :: (m: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_isnonneg :: (m: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_matrix_float_norm1 :: (m: *gsl_matrix_float) -> float #foreign libgsl;

gsl_matrix_float_add :: (a: *gsl_matrix_float, b: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_sub :: (a: *gsl_matrix_float, b: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_mul_elements :: (a: *gsl_matrix_float, b: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_div_elements :: (a: *gsl_matrix_float, b: *gsl_matrix_float) -> s32 #foreign libgsl;
gsl_matrix_float_scale :: (a: *gsl_matrix_float, x: float) -> s32 #foreign libgsl;
gsl_matrix_float_scale_rows :: (a: *gsl_matrix_float, x: *gsl_vector_float) -> s32 #foreign libgsl;
gsl_matrix_float_scale_columns :: (a: *gsl_matrix_float, x: *gsl_vector_float) -> s32 #foreign libgsl;
gsl_matrix_float_add_constant :: (a: *gsl_matrix_float, x: float) -> s32 #foreign libgsl;
gsl_matrix_float_add_diagonal :: (a: *gsl_matrix_float, x: float) -> s32 #foreign libgsl;

/***********************************************************************/
/* The functions below are obsolete                                    */
/***********************************************************************/
gsl_matrix_float_get_row :: (v: *gsl_vector_float, m: *gsl_matrix_float, i: size_t) -> s32 #foreign libgsl;
gsl_matrix_float_get_col :: (v: *gsl_vector_float, m: *gsl_matrix_float, j: size_t) -> s32 #foreign libgsl;
gsl_matrix_float_set_row :: (m: *gsl_matrix_float, i: size_t, v: *gsl_vector_float) -> s32 #foreign libgsl;
gsl_matrix_float_set_col :: (m: *gsl_matrix_float, j: size_t, v: *gsl_vector_float) -> s32 #foreign libgsl;

/* inline functions if you are using GCC */
gsl_matrix_float_get :: (m: *gsl_matrix_float, i: size_t, j: size_t) -> float #foreign libgsl;
gsl_matrix_float_set :: (m: *gsl_matrix_float, i: size_t, j: size_t, x: float) -> void #foreign libgsl;
gsl_matrix_float_ptr :: (m: *gsl_matrix_float, i: size_t, j: size_t) -> *float #foreign libgsl;
gsl_matrix_float_const_ptr :: (m: *gsl_matrix_float, i: size_t, j: size_t) -> *float #foreign libgsl;

gsl_matrix_complex_float :: struct {
    size1: size_t;
    size2: size_t;
    tda:   size_t;
    data:  *float;
    block: *gsl_block_complex_float;
    owner: s32;
}

_gsl_matrix_complex_float_view :: struct {
    matrix: gsl_matrix_complex_float;
}

gsl_matrix_complex_float_view :: _gsl_matrix_complex_float_view;

_gsl_matrix_complex_float_const_view :: struct {
    matrix: gsl_matrix_complex_float;
}

gsl_matrix_complex_float_const_view :: _gsl_matrix_complex_float_const_view;

/* Allocation */
gsl_matrix_complex_float_alloc :: (n1: size_t, n2: size_t) -> *gsl_matrix_complex_float #foreign libgsl;

gsl_matrix_complex_float_calloc :: (n1: size_t, n2: size_t) -> *gsl_matrix_complex_float #foreign libgsl;

gsl_matrix_complex_float_alloc_from_block :: (b: *gsl_block_complex_float, offset: size_t, n1: size_t, n2: size_t, d2: size_t) -> *gsl_matrix_complex_float #foreign libgsl;

gsl_matrix_complex_float_alloc_from_matrix :: (b: *gsl_matrix_complex_float, k1: size_t, k2: size_t, n1: size_t, n2: size_t) -> *gsl_matrix_complex_float #foreign libgsl;

gsl_vector_complex_float_alloc_row_from_matrix :: (m: *gsl_matrix_complex_float, i: size_t) -> *gsl_vector_complex_float #foreign libgsl;

gsl_vector_complex_float_alloc_col_from_matrix :: (m: *gsl_matrix_complex_float, j: size_t) -> *gsl_vector_complex_float #foreign libgsl;

gsl_matrix_complex_float_free :: (m: *gsl_matrix_complex_float) -> void #foreign libgsl;

/* Views */
gsl_matrix_complex_float_submatrix :: (m: *gsl_matrix_complex_float, i: size_t, j: size_t, n1: size_t, n2: size_t) -> _gsl_matrix_complex_float_view #foreign libgsl;

gsl_matrix_complex_float_row :: (m: *gsl_matrix_complex_float, i: size_t) -> _gsl_vector_complex_float_view #foreign libgsl;

gsl_matrix_complex_float_column :: (m: *gsl_matrix_complex_float, j: size_t) -> _gsl_vector_complex_float_view #foreign libgsl;

gsl_matrix_complex_float_diagonal :: (m: *gsl_matrix_complex_float) -> _gsl_vector_complex_float_view #foreign libgsl;

gsl_matrix_complex_float_subdiagonal :: (m: *gsl_matrix_complex_float, k: size_t) -> _gsl_vector_complex_float_view #foreign libgsl;

gsl_matrix_complex_float_superdiagonal :: (m: *gsl_matrix_complex_float, k: size_t) -> _gsl_vector_complex_float_view #foreign libgsl;

gsl_matrix_complex_float_subrow :: (m: *gsl_matrix_complex_float, i: size_t, offset: size_t, n: size_t) -> _gsl_vector_complex_float_view #foreign libgsl;

gsl_matrix_complex_float_subcolumn :: (m: *gsl_matrix_complex_float, j: size_t, offset: size_t, n: size_t) -> _gsl_vector_complex_float_view #foreign libgsl;

gsl_matrix_complex_float_view_array :: (base: *float, n1: size_t, n2: size_t) -> _gsl_matrix_complex_float_view #foreign libgsl;

gsl_matrix_complex_float_view_array_with_tda :: (base: *float, n1: size_t, n2: size_t, tda: size_t) -> _gsl_matrix_complex_float_view #foreign libgsl;

gsl_matrix_complex_float_view_vector :: (v: *gsl_vector_complex_float, n1: size_t, n2: size_t) -> _gsl_matrix_complex_float_view #foreign libgsl;

gsl_matrix_complex_float_view_vector_with_tda :: (v: *gsl_vector_complex_float, n1: size_t, n2: size_t, tda: size_t) -> _gsl_matrix_complex_float_view #foreign libgsl;

gsl_matrix_complex_float_const_submatrix :: (m: *gsl_matrix_complex_float, i: size_t, j: size_t, n1: size_t, n2: size_t) -> _gsl_matrix_complex_float_const_view #foreign libgsl;

gsl_matrix_complex_float_const_row :: (m: *gsl_matrix_complex_float, i: size_t) -> _gsl_vector_complex_float_const_view #foreign libgsl;

gsl_matrix_complex_float_const_column :: (m: *gsl_matrix_complex_float, j: size_t) -> _gsl_vector_complex_float_const_view #foreign libgsl;

gsl_matrix_complex_float_const_diagonal :: (m: *gsl_matrix_complex_float) -> _gsl_vector_complex_float_const_view #foreign libgsl;

gsl_matrix_complex_float_const_subdiagonal :: (m: *gsl_matrix_complex_float, k: size_t) -> _gsl_vector_complex_float_const_view #foreign libgsl;

gsl_matrix_complex_float_const_superdiagonal :: (m: *gsl_matrix_complex_float, k: size_t) -> _gsl_vector_complex_float_const_view #foreign libgsl;

gsl_matrix_complex_float_const_subrow :: (m: *gsl_matrix_complex_float, i: size_t, offset: size_t, n: size_t) -> _gsl_vector_complex_float_const_view #foreign libgsl;

gsl_matrix_complex_float_const_subcolumn :: (m: *gsl_matrix_complex_float, j: size_t, offset: size_t, n: size_t) -> _gsl_vector_complex_float_const_view #foreign libgsl;

gsl_matrix_complex_float_const_view_array :: (base: *float, n1: size_t, n2: size_t) -> _gsl_matrix_complex_float_const_view #foreign libgsl;

gsl_matrix_complex_float_const_view_array_with_tda :: (base: *float, n1: size_t, n2: size_t, tda: size_t) -> _gsl_matrix_complex_float_const_view #foreign libgsl;

gsl_matrix_complex_float_const_view_vector :: (v: *gsl_vector_complex_float, n1: size_t, n2: size_t) -> _gsl_matrix_complex_float_const_view #foreign libgsl;

gsl_matrix_complex_float_const_view_vector_with_tda :: (v: *gsl_vector_complex_float, n1: size_t, n2: size_t, tda: size_t) -> _gsl_matrix_complex_float_const_view #foreign libgsl;

/* Operations */
gsl_matrix_complex_float_set_zero :: (m: *gsl_matrix_complex_float) -> void #foreign libgsl;
gsl_matrix_complex_float_set_identity :: (m: *gsl_matrix_complex_float) -> void #foreign libgsl;
gsl_matrix_complex_float_set_all :: (m: *gsl_matrix_complex_float, x: gsl_complex_float) -> void #foreign libgsl;

gsl_matrix_complex_float_fread :: (stream: *FILE, m: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_fwrite :: (stream: *FILE, m: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_fscanf :: (stream: *FILE, m: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_fprintf :: (stream: *FILE, m: *gsl_matrix_complex_float, format: *u8) -> s32 #foreign libgsl;

gsl_matrix_complex_float_memcpy :: (dest: *gsl_matrix_complex_float, src: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_swap :: (m1: *gsl_matrix_complex_float, m2: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_tricpy :: (Uplo: CBLAS_UPLO_t, Diag: CBLAS_DIAG_t, dest: *gsl_matrix_complex_float, src: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_matrix_complex_float_swap_rows :: (m: *gsl_matrix_complex_float, i: size_t, j: size_t) -> s32 #foreign libgsl;
gsl_matrix_complex_float_swap_columns :: (m: *gsl_matrix_complex_float, i: size_t, j: size_t) -> s32 #foreign libgsl;
gsl_matrix_complex_float_swap_rowcol :: (m: *gsl_matrix_complex_float, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_matrix_complex_float_transpose :: (m: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_transpose_memcpy :: (dest: *gsl_matrix_complex_float, src: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_transpose_tricpy :: (Uplo_src: CBLAS_UPLO_t, Diag: CBLAS_DIAG_t, dest: *gsl_matrix_complex_float, src: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_matrix_complex_float_conjtrans_memcpy :: (dest: *gsl_matrix_complex_float, src: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_matrix_complex_float_equal :: (a: *gsl_matrix_complex_float, b: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_matrix_complex_float_isnull :: (m: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_ispos :: (m: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_isneg :: (m: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_isnonneg :: (m: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_matrix_complex_float_add :: (a: *gsl_matrix_complex_float, b: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_sub :: (a: *gsl_matrix_complex_float, b: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_mul_elements :: (a: *gsl_matrix_complex_float, b: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_div_elements :: (a: *gsl_matrix_complex_float, b: *gsl_matrix_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_scale :: (a: *gsl_matrix_complex_float, x: gsl_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_scale_rows :: (a: *gsl_matrix_complex_float, x: *gsl_vector_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_scale_columns :: (a: *gsl_matrix_complex_float, x: *gsl_vector_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_add_constant :: (a: *gsl_matrix_complex_float, x: gsl_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_add_diagonal :: (a: *gsl_matrix_complex_float, x: gsl_complex_float) -> s32 #foreign libgsl;

/***********************************************************************/
/* The functions below are obsolete                                    */
/***********************************************************************/
gsl_matrix_complex_float_get_row :: (v: *gsl_vector_complex_float, m: *gsl_matrix_complex_float, i: size_t) -> s32 #foreign libgsl;
gsl_matrix_complex_float_get_col :: (v: *gsl_vector_complex_float, m: *gsl_matrix_complex_float, j: size_t) -> s32 #foreign libgsl;
gsl_matrix_complex_float_set_row :: (m: *gsl_matrix_complex_float, i: size_t, v: *gsl_vector_complex_float) -> s32 #foreign libgsl;
gsl_matrix_complex_float_set_col :: (m: *gsl_matrix_complex_float, j: size_t, v: *gsl_vector_complex_float) -> s32 #foreign libgsl;

/* inline functions if you are using GCC */
gsl_matrix_complex_float_get :: (m: *gsl_matrix_complex_float, i: size_t, j: size_t) -> gsl_complex_float #foreign libgsl;
gsl_matrix_complex_float_set :: (m: *gsl_matrix_complex_float, i: size_t, j: size_t, x: gsl_complex_float) -> void #foreign libgsl;

gsl_matrix_complex_float_ptr :: (m: *gsl_matrix_complex_float, i: size_t, j: size_t) -> *gsl_complex_float #foreign libgsl;
gsl_matrix_complex_float_const_ptr :: (m: *gsl_matrix_complex_float, i: size_t, j: size_t) -> *gsl_complex_float #foreign libgsl;

gsl_matrix_complex_long_double :: struct {
    size1: size_t;
    size2: size_t;
    tda:   size_t;

    block: *gsl_block_complex_long_double #align 16;
    owner: s32;
}

_gsl_matrix_complex_long_double_view :: struct {
    matrix: gsl_matrix_complex_long_double;
}

gsl_matrix_complex_long_double_view :: _gsl_matrix_complex_long_double_view;

_gsl_matrix_complex_long_double_const_view :: struct {
    matrix: gsl_matrix_complex_long_double;
}

gsl_matrix_complex_long_double_const_view :: _gsl_matrix_complex_long_double_const_view;

/* Allocation */
gsl_matrix_complex_long_double_alloc :: (n1: size_t, n2: size_t) -> *gsl_matrix_complex_long_double #foreign libgsl;

gsl_matrix_complex_long_double_calloc :: (n1: size_t, n2: size_t) -> *gsl_matrix_complex_long_double #foreign libgsl;

gsl_matrix_complex_long_double_alloc_from_block :: (b: *gsl_block_complex_long_double, offset: size_t, n1: size_t, n2: size_t, d2: size_t) -> *gsl_matrix_complex_long_double #foreign libgsl;

gsl_matrix_complex_long_double_alloc_from_matrix :: (b: *gsl_matrix_complex_long_double, k1: size_t, k2: size_t, n1: size_t, n2: size_t) -> *gsl_matrix_complex_long_double #foreign libgsl;

gsl_vector_complex_long_double_alloc_row_from_matrix :: (m: *gsl_matrix_complex_long_double, i: size_t) -> *gsl_vector_complex_long_double #foreign libgsl;

gsl_vector_complex_long_double_alloc_col_from_matrix :: (m: *gsl_matrix_complex_long_double, j: size_t) -> *gsl_vector_complex_long_double #foreign libgsl;

gsl_matrix_complex_long_double_free :: (m: *gsl_matrix_complex_long_double) -> void #foreign libgsl;

/* Views */
gsl_matrix_complex_long_double_submatrix :: (m: *gsl_matrix_complex_long_double, i: size_t, j: size_t, n1: size_t, n2: size_t) -> _gsl_matrix_complex_long_double_view #foreign libgsl;

gsl_matrix_complex_long_double_row :: (m: *gsl_matrix_complex_long_double, i: size_t) -> _gsl_vector_complex_long_double_view #foreign libgsl;

gsl_matrix_complex_long_double_column :: (m: *gsl_matrix_complex_long_double, j: size_t) -> _gsl_vector_complex_long_double_view #foreign libgsl;

gsl_matrix_complex_long_double_diagonal :: (m: *gsl_matrix_complex_long_double) -> _gsl_vector_complex_long_double_view #foreign libgsl;

gsl_matrix_complex_long_double_subdiagonal :: (m: *gsl_matrix_complex_long_double, k: size_t) -> _gsl_vector_complex_long_double_view #foreign libgsl;

gsl_matrix_complex_long_double_superdiagonal :: (m: *gsl_matrix_complex_long_double, k: size_t) -> _gsl_vector_complex_long_double_view #foreign libgsl;

gsl_matrix_complex_long_double_subrow :: (m: *gsl_matrix_complex_long_double, i: size_t, offset: size_t, n: size_t) -> _gsl_vector_complex_long_double_view #foreign libgsl;

gsl_matrix_complex_long_double_subcolumn :: (m: *gsl_matrix_complex_long_double, j: size_t, offset: size_t, n: size_t) -> _gsl_vector_complex_long_double_view #foreign libgsl;

gsl_matrix_complex_long_double_view_vector :: (v: *gsl_vector_complex_long_double, n1: size_t, n2: size_t) -> _gsl_matrix_complex_long_double_view #foreign libgsl;

gsl_matrix_complex_long_double_view_vector_with_tda :: (v: *gsl_vector_complex_long_double, n1: size_t, n2: size_t, tda: size_t) -> _gsl_matrix_complex_long_double_view #foreign libgsl;

gsl_matrix_complex_long_double_const_submatrix :: (m: *gsl_matrix_complex_long_double, i: size_t, j: size_t, n1: size_t, n2: size_t) -> _gsl_matrix_complex_long_double_const_view #foreign libgsl;

gsl_matrix_complex_long_double_const_row :: (m: *gsl_matrix_complex_long_double, i: size_t) -> _gsl_vector_complex_long_double_const_view #foreign libgsl;

gsl_matrix_complex_long_double_const_column :: (m: *gsl_matrix_complex_long_double, j: size_t) -> _gsl_vector_complex_long_double_const_view #foreign libgsl;

gsl_matrix_complex_long_double_const_diagonal :: (m: *gsl_matrix_complex_long_double) -> _gsl_vector_complex_long_double_const_view #foreign libgsl;

gsl_matrix_complex_long_double_const_subdiagonal :: (m: *gsl_matrix_complex_long_double, k: size_t) -> _gsl_vector_complex_long_double_const_view #foreign libgsl;

gsl_matrix_complex_long_double_const_superdiagonal :: (m: *gsl_matrix_complex_long_double, k: size_t) -> _gsl_vector_complex_long_double_const_view #foreign libgsl;

gsl_matrix_complex_long_double_const_subrow :: (m: *gsl_matrix_complex_long_double, i: size_t, offset: size_t, n: size_t) -> _gsl_vector_complex_long_double_const_view #foreign libgsl;

gsl_matrix_complex_long_double_const_subcolumn :: (m: *gsl_matrix_complex_long_double, j: size_t, offset: size_t, n: size_t) -> _gsl_vector_complex_long_double_const_view #foreign libgsl;

gsl_matrix_complex_long_double_const_view_vector :: (v: *gsl_vector_complex_long_double, n1: size_t, n2: size_t) -> _gsl_matrix_complex_long_double_const_view #foreign libgsl;

gsl_matrix_complex_long_double_const_view_vector_with_tda :: (v: *gsl_vector_complex_long_double, n1: size_t, n2: size_t, tda: size_t) -> _gsl_matrix_complex_long_double_const_view #foreign libgsl;

/* Operations */
gsl_matrix_complex_long_double_set_zero :: (m: *gsl_matrix_complex_long_double) -> void #foreign libgsl;
gsl_matrix_complex_long_double_set_identity :: (m: *gsl_matrix_complex_long_double) -> void #foreign libgsl;
gsl_matrix_complex_long_double_set_all :: (m: *gsl_matrix_complex_long_double, x: gsl_complex_long_double) -> void #foreign libgsl;

gsl_matrix_complex_long_double_fread :: (stream: *FILE, m: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_fwrite :: (stream: *FILE, m: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_fscanf :: (stream: *FILE, m: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_fprintf :: (stream: *FILE, m: *gsl_matrix_complex_long_double, format: *u8) -> s32 #foreign libgsl;

gsl_matrix_complex_long_double_memcpy :: (dest: *gsl_matrix_complex_long_double, src: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_swap :: (m1: *gsl_matrix_complex_long_double, m2: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_tricpy :: (Uplo: CBLAS_UPLO_t, Diag: CBLAS_DIAG_t, dest: *gsl_matrix_complex_long_double, src: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;

gsl_matrix_complex_long_double_swap_rows :: (m: *gsl_matrix_complex_long_double, i: size_t, j: size_t) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_swap_columns :: (m: *gsl_matrix_complex_long_double, i: size_t, j: size_t) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_swap_rowcol :: (m: *gsl_matrix_complex_long_double, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_matrix_complex_long_double_transpose :: (m: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_transpose_memcpy :: (dest: *gsl_matrix_complex_long_double, src: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_transpose_tricpy :: (Uplo_src: CBLAS_UPLO_t, Diag: CBLAS_DIAG_t, dest: *gsl_matrix_complex_long_double, src: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;

gsl_matrix_complex_long_double_conjtrans_memcpy :: (dest: *gsl_matrix_complex_long_double, src: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;

gsl_matrix_complex_long_double_equal :: (a: *gsl_matrix_complex_long_double, b: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;

gsl_matrix_complex_long_double_isnull :: (m: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_ispos :: (m: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_isneg :: (m: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_isnonneg :: (m: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;

gsl_matrix_complex_long_double_add :: (a: *gsl_matrix_complex_long_double, b: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_sub :: (a: *gsl_matrix_complex_long_double, b: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_mul_elements :: (a: *gsl_matrix_complex_long_double, b: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_div_elements :: (a: *gsl_matrix_complex_long_double, b: *gsl_matrix_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_scale :: (a: *gsl_matrix_complex_long_double, x: gsl_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_scale_rows :: (a: *gsl_matrix_complex_long_double, x: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_scale_columns :: (a: *gsl_matrix_complex_long_double, x: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_add_constant :: (a: *gsl_matrix_complex_long_double, x: gsl_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_add_diagonal :: (a: *gsl_matrix_complex_long_double, x: gsl_complex_long_double) -> s32 #foreign libgsl;

/***********************************************************************/
/* The functions below are obsolete                                    */
/***********************************************************************/
gsl_matrix_complex_long_double_get_row :: (v: *gsl_vector_complex_long_double, m: *gsl_matrix_complex_long_double, i: size_t) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_get_col :: (v: *gsl_vector_complex_long_double, m: *gsl_matrix_complex_long_double, j: size_t) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_set_row :: (m: *gsl_matrix_complex_long_double, i: size_t, v: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;
gsl_matrix_complex_long_double_set_col :: (m: *gsl_matrix_complex_long_double, j: size_t, v: *gsl_vector_complex_long_double) -> s32 #foreign libgsl;

/* inline functions if you are using GCC */
gsl_matrix_complex_long_double_get :: (m: *gsl_matrix_complex_long_double, i: size_t, j: size_t) -> gsl_complex_long_double #foreign libgsl;
gsl_matrix_complex_long_double_set :: (m: *gsl_matrix_complex_long_double, i: size_t, j: size_t, x: gsl_complex_long_double) -> void #foreign libgsl;

gsl_matrix_complex_long_double_ptr :: (m: *gsl_matrix_complex_long_double, i: size_t, j: size_t) -> *gsl_complex_long_double #foreign libgsl;
gsl_matrix_complex_long_double_const_ptr :: (m: *gsl_matrix_complex_long_double, i: size_t, j: size_t) -> *gsl_complex_long_double #foreign libgsl;

/* ========================================================================
* Level 1
* ========================================================================
*/
gsl_blas_sdsdot :: (alpha: float, X: *gsl_vector_float, Y: *gsl_vector_float, result: *float) -> s32 #foreign libgsl;

gsl_blas_dsdot :: (X: *gsl_vector_float, Y: *gsl_vector_float, result: *float64) -> s32 #foreign libgsl;

gsl_blas_sdot :: (X: *gsl_vector_float, Y: *gsl_vector_float, result: *float) -> s32 #foreign libgsl;

gsl_blas_ddot :: (X: *gsl_vector, Y: *gsl_vector, result: *float64) -> s32 #foreign libgsl;

gsl_blas_cdotu :: (X: *gsl_vector_complex_float, Y: *gsl_vector_complex_float, dotu: *gsl_complex_float) -> s32 #foreign libgsl;

gsl_blas_cdotc :: (X: *gsl_vector_complex_float, Y: *gsl_vector_complex_float, dotc: *gsl_complex_float) -> s32 #foreign libgsl;

gsl_blas_zdotu :: (X: *gsl_vector_complex, Y: *gsl_vector_complex, dotu: *gsl_complex) -> s32 #foreign libgsl;

gsl_blas_zdotc :: (X: *gsl_vector_complex, Y: *gsl_vector_complex, dotc: *gsl_complex) -> s32 #foreign libgsl;

gsl_blas_snrm2 :: (X: *gsl_vector_float) -> float #foreign libgsl;
gsl_blas_sasum :: (X: *gsl_vector_float) -> float #foreign libgsl;
gsl_blas_dnrm2 :: (X: *gsl_vector) -> float64 #foreign libgsl;
gsl_blas_dasum :: (X: *gsl_vector) -> float64 #foreign libgsl;
gsl_blas_scnrm2 :: (X: *gsl_vector_complex_float) -> float #foreign libgsl;
gsl_blas_scasum :: (X: *gsl_vector_complex_float) -> float #foreign libgsl;
gsl_blas_dznrm2 :: (X: *gsl_vector_complex) -> float64 #foreign libgsl;
gsl_blas_dzasum :: (X: *gsl_vector_complex) -> float64 #foreign libgsl;

gsl_blas_isamax :: (X: *gsl_vector_float) -> CBLAS_INDEX_t #foreign libgsl;
gsl_blas_idamax :: (X: *gsl_vector) -> CBLAS_INDEX_t #foreign libgsl;
gsl_blas_icamax :: (X: *gsl_vector_complex_float) -> CBLAS_INDEX_t #foreign libgsl;
gsl_blas_izamax :: (X: *gsl_vector_complex) -> CBLAS_INDEX_t #foreign libgsl;

gsl_blas_sswap :: (X: *gsl_vector_float, Y: *gsl_vector_float) -> s32 #foreign libgsl;

gsl_blas_scopy :: (X: *gsl_vector_float, Y: *gsl_vector_float) -> s32 #foreign libgsl;

gsl_blas_saxpy :: (alpha: float, X: *gsl_vector_float, Y: *gsl_vector_float) -> s32 #foreign libgsl;

gsl_blas_dswap :: (X: *gsl_vector, Y: *gsl_vector) -> s32 #foreign libgsl;

gsl_blas_dcopy :: (X: *gsl_vector, Y: *gsl_vector) -> s32 #foreign libgsl;

gsl_blas_daxpy :: (alpha: float64, X: *gsl_vector, Y: *gsl_vector) -> s32 #foreign libgsl;

gsl_blas_cswap :: (X: *gsl_vector_complex_float, Y: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_blas_ccopy :: (X: *gsl_vector_complex_float, Y: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_blas_caxpy :: (alpha: gsl_complex_float, X: *gsl_vector_complex_float, Y: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_blas_zswap :: (X: *gsl_vector_complex, Y: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_blas_zcopy :: (X: *gsl_vector_complex, Y: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_blas_zaxpy :: (alpha: gsl_complex, X: *gsl_vector_complex, Y: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_blas_srotg :: (a: *float, b: *float, c: *float, s: *float) -> s32 #foreign libgsl;

gsl_blas_srotmg :: (d1: *float, d2: *float, b1: *float, b2: float, P: *float) -> s32 #foreign libgsl;

gsl_blas_srot :: (X: *gsl_vector_float, Y: *gsl_vector_float, c: float, s: float) -> s32 #foreign libgsl;

gsl_blas_srotm :: (X: *gsl_vector_float, Y: *gsl_vector_float, P: *float) -> s32 #foreign libgsl;

gsl_blas_drotg :: (a: *float64, b: *float64, c: *float64, s: *float64) -> s32 #foreign libgsl;

gsl_blas_drotmg :: (d1: *float64, d2: *float64, b1: *float64, b2: float64, P: *float64) -> s32 #foreign libgsl;

gsl_blas_drot :: (X: *gsl_vector, Y: *gsl_vector, c: float64, s: float64) -> s32 #foreign libgsl;

gsl_blas_drotm :: (X: *gsl_vector, Y: *gsl_vector, P: *float64) -> s32 #foreign libgsl;

gsl_blas_sscal :: (alpha: float, X: *gsl_vector_float) -> void #foreign libgsl;
gsl_blas_dscal :: (alpha: float64, X: *gsl_vector) -> void #foreign libgsl;
gsl_blas_cscal :: (alpha: gsl_complex_float, X: *gsl_vector_complex_float) -> void #foreign libgsl;
gsl_blas_zscal :: (alpha: gsl_complex, X: *gsl_vector_complex) -> void #foreign libgsl;
gsl_blas_csscal :: (alpha: float, X: *gsl_vector_complex_float) -> void #foreign libgsl;
gsl_blas_zdscal :: (alpha: float64, X: *gsl_vector_complex) -> void #foreign libgsl;

/*
* Routines with standard 4 prefixes (S, D, C, Z)
*/
gsl_blas_sgemv :: (TransA: CBLAS_TRANSPOSE_t, alpha: float, A: *gsl_matrix_float, X: *gsl_vector_float, beta: float, Y: *gsl_vector_float) -> s32 #foreign libgsl;

gsl_blas_strmv :: (Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, A: *gsl_matrix_float, X: *gsl_vector_float) -> s32 #foreign libgsl;

gsl_blas_strsv :: (Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, A: *gsl_matrix_float, X: *gsl_vector_float) -> s32 #foreign libgsl;

gsl_blas_dgemv :: (TransA: CBLAS_TRANSPOSE_t, alpha: float64, A: *gsl_matrix, X: *gsl_vector, beta: float64, Y: *gsl_vector) -> s32 #foreign libgsl;

gsl_blas_dtrmv :: (Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, A: *gsl_matrix, X: *gsl_vector) -> s32 #foreign libgsl;

gsl_blas_dtrsv :: (Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, A: *gsl_matrix, X: *gsl_vector) -> s32 #foreign libgsl;

gsl_blas_cgemv :: (TransA: CBLAS_TRANSPOSE_t, alpha: gsl_complex_float, A: *gsl_matrix_complex_float, X: *gsl_vector_complex_float, beta: gsl_complex_float, Y: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_blas_ctrmv :: (Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, A: *gsl_matrix_complex_float, X: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_blas_ctrsv :: (Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, A: *gsl_matrix_complex_float, X: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_blas_zgemv :: (TransA: CBLAS_TRANSPOSE_t, alpha: gsl_complex, A: *gsl_matrix_complex, X: *gsl_vector_complex, beta: gsl_complex, Y: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_blas_ztrmv :: (Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, A: *gsl_matrix_complex, X: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_blas_ztrsv :: (Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, A: *gsl_matrix_complex, X: *gsl_vector_complex) -> s32 #foreign libgsl;

/*
* Routines with S and D prefixes only
*/
gsl_blas_ssymv :: (Uplo: CBLAS_UPLO_t, alpha: float, A: *gsl_matrix_float, X: *gsl_vector_float, beta: float, Y: *gsl_vector_float) -> s32 #foreign libgsl;

gsl_blas_sger :: (alpha: float, X: *gsl_vector_float, Y: *gsl_vector_float, A: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_blas_ssyr :: (Uplo: CBLAS_UPLO_t, alpha: float, X: *gsl_vector_float, A: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_blas_ssyr2 :: (Uplo: CBLAS_UPLO_t, alpha: float, X: *gsl_vector_float, Y: *gsl_vector_float, A: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_blas_dsymv :: (Uplo: CBLAS_UPLO_t, alpha: float64, A: *gsl_matrix, X: *gsl_vector, beta: float64, Y: *gsl_vector) -> s32 #foreign libgsl;

gsl_blas_dger :: (alpha: float64, X: *gsl_vector, Y: *gsl_vector, A: *gsl_matrix) -> s32 #foreign libgsl;

gsl_blas_dsyr :: (Uplo: CBLAS_UPLO_t, alpha: float64, X: *gsl_vector, A: *gsl_matrix) -> s32 #foreign libgsl;

gsl_blas_dsyr2 :: (Uplo: CBLAS_UPLO_t, alpha: float64, X: *gsl_vector, Y: *gsl_vector, A: *gsl_matrix) -> s32 #foreign libgsl;

/*
* Routines with C and Z prefixes only
*/
gsl_blas_chemv :: (Uplo: CBLAS_UPLO_t, alpha: gsl_complex_float, A: *gsl_matrix_complex_float, X: *gsl_vector_complex_float, beta: gsl_complex_float, Y: *gsl_vector_complex_float) -> s32 #foreign libgsl;

gsl_blas_cgeru :: (alpha: gsl_complex_float, X: *gsl_vector_complex_float, Y: *gsl_vector_complex_float, A: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_cgerc :: (alpha: gsl_complex_float, X: *gsl_vector_complex_float, Y: *gsl_vector_complex_float, A: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_cher :: (Uplo: CBLAS_UPLO_t, alpha: float, X: *gsl_vector_complex_float, A: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_cher2 :: (Uplo: CBLAS_UPLO_t, alpha: gsl_complex_float, X: *gsl_vector_complex_float, Y: *gsl_vector_complex_float, A: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_zhemv :: (Uplo: CBLAS_UPLO_t, alpha: gsl_complex, A: *gsl_matrix_complex, X: *gsl_vector_complex, beta: gsl_complex, Y: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_blas_zgeru :: (alpha: gsl_complex, X: *gsl_vector_complex, Y: *gsl_vector_complex, A: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_blas_zgerc :: (alpha: gsl_complex, X: *gsl_vector_complex, Y: *gsl_vector_complex, A: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_blas_zher :: (Uplo: CBLAS_UPLO_t, alpha: float64, X: *gsl_vector_complex, A: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_blas_zher2 :: (Uplo: CBLAS_UPLO_t, alpha: gsl_complex, X: *gsl_vector_complex, Y: *gsl_vector_complex, A: *gsl_matrix_complex) -> s32 #foreign libgsl;

/*
* Routines with standard 4 prefixes (S, D, C, Z)
*/
gsl_blas_sgemm :: (TransA: CBLAS_TRANSPOSE_t, TransB: CBLAS_TRANSPOSE_t, alpha: float, A: *gsl_matrix_float, B: *gsl_matrix_float, beta: float, C: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_blas_ssymm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, alpha: float, A: *gsl_matrix_float, B: *gsl_matrix_float, beta: float, C: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_blas_ssyrk :: (Uplo: CBLAS_UPLO_t, Trans: CBLAS_TRANSPOSE_t, alpha: float, A: *gsl_matrix_float, beta: float, C: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_blas_ssyr2k :: (Uplo: CBLAS_UPLO_t, Trans: CBLAS_TRANSPOSE_t, alpha: float, A: *gsl_matrix_float, B: *gsl_matrix_float, beta: float, C: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_blas_strmm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, alpha: float, A: *gsl_matrix_float, B: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_blas_strsm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, alpha: float, A: *gsl_matrix_float, B: *gsl_matrix_float) -> s32 #foreign libgsl;

gsl_blas_dgemm :: (TransA: CBLAS_TRANSPOSE_t, TransB: CBLAS_TRANSPOSE_t, alpha: float64, A: *gsl_matrix, B: *gsl_matrix, beta: float64, C: *gsl_matrix) -> s32 #foreign libgsl;

gsl_blas_dsymm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, alpha: float64, A: *gsl_matrix, B: *gsl_matrix, beta: float64, C: *gsl_matrix) -> s32 #foreign libgsl;

gsl_blas_dsyrk :: (Uplo: CBLAS_UPLO_t, Trans: CBLAS_TRANSPOSE_t, alpha: float64, A: *gsl_matrix, beta: float64, C: *gsl_matrix) -> s32 #foreign libgsl;

gsl_blas_dsyr2k :: (Uplo: CBLAS_UPLO_t, Trans: CBLAS_TRANSPOSE_t, alpha: float64, A: *gsl_matrix, B: *gsl_matrix, beta: float64, C: *gsl_matrix) -> s32 #foreign libgsl;

gsl_blas_dtrmm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, alpha: float64, A: *gsl_matrix, B: *gsl_matrix) -> s32 #foreign libgsl;

gsl_blas_dtrsm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, alpha: float64, A: *gsl_matrix, B: *gsl_matrix) -> s32 #foreign libgsl;

gsl_blas_cgemm :: (TransA: CBLAS_TRANSPOSE_t, TransB: CBLAS_TRANSPOSE_t, alpha: gsl_complex_float, A: *gsl_matrix_complex_float, B: *gsl_matrix_complex_float, beta: gsl_complex_float, C: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_csymm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, alpha: gsl_complex_float, A: *gsl_matrix_complex_float, B: *gsl_matrix_complex_float, beta: gsl_complex_float, C: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_csyrk :: (Uplo: CBLAS_UPLO_t, Trans: CBLAS_TRANSPOSE_t, alpha: gsl_complex_float, A: *gsl_matrix_complex_float, beta: gsl_complex_float, C: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_csyr2k :: (Uplo: CBLAS_UPLO_t, Trans: CBLAS_TRANSPOSE_t, alpha: gsl_complex_float, A: *gsl_matrix_complex_float, B: *gsl_matrix_complex_float, beta: gsl_complex_float, C: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_ctrmm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, alpha: gsl_complex_float, A: *gsl_matrix_complex_float, B: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_ctrsm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, alpha: gsl_complex_float, A: *gsl_matrix_complex_float, B: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_zgemm :: (TransA: CBLAS_TRANSPOSE_t, TransB: CBLAS_TRANSPOSE_t, alpha: gsl_complex, A: *gsl_matrix_complex, B: *gsl_matrix_complex, beta: gsl_complex, C: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_blas_zsymm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, alpha: gsl_complex, A: *gsl_matrix_complex, B: *gsl_matrix_complex, beta: gsl_complex, C: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_blas_zsyrk :: (Uplo: CBLAS_UPLO_t, Trans: CBLAS_TRANSPOSE_t, alpha: gsl_complex, A: *gsl_matrix_complex, beta: gsl_complex, C: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_blas_zsyr2k :: (Uplo: CBLAS_UPLO_t, Trans: CBLAS_TRANSPOSE_t, alpha: gsl_complex, A: *gsl_matrix_complex, B: *gsl_matrix_complex, beta: gsl_complex, C: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_blas_ztrmm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, alpha: gsl_complex, A: *gsl_matrix_complex, B: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_blas_ztrsm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, TransA: CBLAS_TRANSPOSE_t, Diag: CBLAS_DIAG_t, alpha: gsl_complex, A: *gsl_matrix_complex, B: *gsl_matrix_complex) -> s32 #foreign libgsl;

/*
* Routines with prefixes C and Z only
*/
gsl_blas_chemm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, alpha: gsl_complex_float, A: *gsl_matrix_complex_float, B: *gsl_matrix_complex_float, beta: gsl_complex_float, C: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_cherk :: (Uplo: CBLAS_UPLO_t, Trans: CBLAS_TRANSPOSE_t, alpha: float, A: *gsl_matrix_complex_float, beta: float, C: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_cher2k :: (Uplo: CBLAS_UPLO_t, Trans: CBLAS_TRANSPOSE_t, alpha: gsl_complex_float, A: *gsl_matrix_complex_float, B: *gsl_matrix_complex_float, beta: float, C: *gsl_matrix_complex_float) -> s32 #foreign libgsl;

gsl_blas_zhemm :: (Side: CBLAS_SIDE_t, Uplo: CBLAS_UPLO_t, alpha: gsl_complex, A: *gsl_matrix_complex, B: *gsl_matrix_complex, beta: gsl_complex, C: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_blas_zherk :: (Uplo: CBLAS_UPLO_t, Trans: CBLAS_TRANSPOSE_t, alpha: float64, A: *gsl_matrix_complex, beta: float64, C: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_blas_zher2k :: (Uplo: CBLAS_UPLO_t, Trans: CBLAS_TRANSPOSE_t, alpha: gsl_complex, A: *gsl_matrix_complex, B: *gsl_matrix_complex, beta: float64, C: *gsl_matrix_complex) -> s32 #foreign libgsl;

/* Some functions can take a mode argument. This
* is a rough method to do things like control
* the precision of the algorithm. This mainly
* occurs in special functions, but we figured
* it was ok to have a general facility.
*
* The mode type is 32-bit field. Most of
* the fields are currently unused. Users
* '|' various predefined constants to get
* a desired mode.
*/
gsl_mode_t :: u32;

gsl_permutation_struct :: struct {
    size: size_t;
    data: *size_t;
}

gsl_permutation :: gsl_permutation_struct;

gsl_permutation_alloc :: (n: size_t) -> *gsl_permutation #foreign libgsl;
gsl_permutation_calloc :: (n: size_t) -> *gsl_permutation #foreign libgsl;
gsl_permutation_init :: (p: *gsl_permutation) -> void #foreign libgsl;
gsl_permutation_free :: (p: *gsl_permutation) -> void #foreign libgsl;
gsl_permutation_memcpy :: (dest: *gsl_permutation, src: *gsl_permutation) -> s32 #foreign libgsl;

gsl_permutation_fread :: (stream: *FILE, p: *gsl_permutation) -> s32 #foreign libgsl;
gsl_permutation_fwrite :: (stream: *FILE, p: *gsl_permutation) -> s32 #foreign libgsl;
gsl_permutation_fscanf :: (stream: *FILE, p: *gsl_permutation) -> s32 #foreign libgsl;
gsl_permutation_fprintf :: (stream: *FILE, p: *gsl_permutation, format: *u8) -> s32 #foreign libgsl;

gsl_permutation_size :: (p: *gsl_permutation) -> size_t #foreign libgsl;
gsl_permutation_data :: (p: *gsl_permutation) -> *size_t #foreign libgsl;

gsl_permutation_swap :: (p: *gsl_permutation, i: size_t, j: size_t) -> s32 #foreign libgsl;

gsl_permutation_valid :: (p: *gsl_permutation) -> s32 #foreign libgsl;
gsl_permutation_reverse :: (p: *gsl_permutation) -> void #foreign libgsl;
gsl_permutation_inverse :: (inv: *gsl_permutation, p: *gsl_permutation) -> s32 #foreign libgsl;
gsl_permutation_next :: (p: *gsl_permutation) -> s32 #foreign libgsl;
gsl_permutation_prev :: (p: *gsl_permutation) -> s32 #foreign libgsl;
gsl_permutation_mul :: (p: *gsl_permutation, pa: *gsl_permutation, pb: *gsl_permutation) -> s32 #foreign libgsl;

gsl_permutation_linear_to_canonical :: (q: *gsl_permutation, p: *gsl_permutation) -> s32 #foreign libgsl;
gsl_permutation_canonical_to_linear :: (p: *gsl_permutation, q: *gsl_permutation) -> s32 #foreign libgsl;

gsl_permutation_inversions :: (p: *gsl_permutation) -> size_t #foreign libgsl;
gsl_permutation_linear_cycles :: (p: *gsl_permutation) -> size_t #foreign libgsl;
gsl_permutation_canonical_cycles :: (q: *gsl_permutation) -> size_t #foreign libgsl;

gsl_permutation_get :: (p: *gsl_permutation, i: size_t) -> size_t #foreign libgsl;

gsl_rng_type :: struct {
    name:       *u8;
    max:        u64;
    min:        u64;
    size:       size_t;
    set:        #type (state: *void, seed: u64) -> void #c_call;
    get:        #type (state: *void) -> u64 #c_call;
    get_double: #type (state: *void) -> float64 #c_call;
}

gsl_rng :: struct {
    type:  *gsl_rng_type;
    state: *void;
}

/* These structs also need to appear in default.c so you can select
them via the environment variable GSL_RNG_TYPE */
gsl_rng_borosh13: *gsl_rng_type #elsewhere libgsl;
gsl_rng_coveyou: *gsl_rng_type #elsewhere libgsl;
gsl_rng_cmrg: *gsl_rng_type #elsewhere libgsl;
gsl_rng_fishman18: *gsl_rng_type #elsewhere libgsl;
gsl_rng_fishman20: *gsl_rng_type #elsewhere libgsl;
gsl_rng_fishman2x: *gsl_rng_type #elsewhere libgsl;
gsl_rng_gfsr4: *gsl_rng_type #elsewhere libgsl;
gsl_rng_knuthran: *gsl_rng_type #elsewhere libgsl;
gsl_rng_knuthran2: *gsl_rng_type #elsewhere libgsl;
gsl_rng_knuthran2002: *gsl_rng_type #elsewhere libgsl;
gsl_rng_lecuyer21: *gsl_rng_type #elsewhere libgsl;
gsl_rng_minstd: *gsl_rng_type #elsewhere libgsl;
gsl_rng_mrg: *gsl_rng_type #elsewhere libgsl;
gsl_rng_mt19937: *gsl_rng_type #elsewhere libgsl;
gsl_rng_mt19937_1999: *gsl_rng_type #elsewhere libgsl;
gsl_rng_mt19937_1998: *gsl_rng_type #elsewhere libgsl;
gsl_rng_r250: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ran0: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ran1: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ran2: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ran3: *gsl_rng_type #elsewhere libgsl;
gsl_rng_rand: *gsl_rng_type #elsewhere libgsl;
gsl_rng_rand48: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random128_bsd: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random128_glibc2: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random128_libc5: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random256_bsd: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random256_glibc2: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random256_libc5: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random32_bsd: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random32_glibc2: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random32_libc5: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random64_bsd: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random64_glibc2: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random64_libc5: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random8_bsd: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random8_glibc2: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random8_libc5: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random_bsd: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random_glibc2: *gsl_rng_type #elsewhere libgsl;
gsl_rng_random_libc5: *gsl_rng_type #elsewhere libgsl;
gsl_rng_randu: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ranf: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ranlux: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ranlux389: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ranlxd1: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ranlxd2: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ranlxs0: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ranlxs1: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ranlxs2: *gsl_rng_type #elsewhere libgsl;
gsl_rng_ranmar: *gsl_rng_type #elsewhere libgsl;
gsl_rng_slatec: *gsl_rng_type #elsewhere libgsl;
gsl_rng_taus: *gsl_rng_type #elsewhere libgsl;
gsl_rng_taus2: *gsl_rng_type #elsewhere libgsl;
gsl_rng_taus113: *gsl_rng_type #elsewhere libgsl;
gsl_rng_transputer: *gsl_rng_type #elsewhere libgsl;
gsl_rng_tt800: *gsl_rng_type #elsewhere libgsl;
gsl_rng_uni: *gsl_rng_type #elsewhere libgsl;
gsl_rng_uni32: *gsl_rng_type #elsewhere libgsl;
gsl_rng_vax: *gsl_rng_type #elsewhere libgsl;
gsl_rng_waterman14: *gsl_rng_type #elsewhere libgsl;
gsl_rng_zuf: *gsl_rng_type #elsewhere libgsl;

gsl_rng_types_setup :: () -> **gsl_rng_type #foreign libgsl;

gsl_rng_default: *gsl_rng_type #elsewhere libgsl;
gsl_rng_default_seed: u64 #elsewhere libgsl;

gsl_rng_alloc :: (T: *gsl_rng_type) -> *gsl_rng #foreign libgsl;
gsl_rng_memcpy :: (dest: *gsl_rng, src: *gsl_rng) -> s32 #foreign libgsl;
gsl_rng_clone :: (r: *gsl_rng) -> *gsl_rng #foreign libgsl;

gsl_rng_free :: (r: *gsl_rng) -> void #foreign libgsl;

gsl_rng_set :: (r: *gsl_rng, seed: u64) -> void #foreign libgsl;
gsl_rng_max :: (r: *gsl_rng) -> u64 #foreign libgsl;
gsl_rng_min :: (r: *gsl_rng) -> u64 #foreign libgsl;
gsl_rng_name :: (r: *gsl_rng) -> *u8 #foreign libgsl;

gsl_rng_fread :: (stream: *FILE, r: *gsl_rng) -> s32 #foreign libgsl;
gsl_rng_fwrite :: (stream: *FILE, r: *gsl_rng) -> s32 #foreign libgsl;

gsl_rng_size :: (r: *gsl_rng) -> size_t #foreign libgsl;
gsl_rng_state :: (r: *gsl_rng) -> *void #foreign libgsl;

gsl_rng_print_state :: (r: *gsl_rng) -> void #foreign libgsl;

gsl_rng_env_setup :: () -> *gsl_rng_type #foreign libgsl;

gsl_rng_get :: (r: *gsl_rng) -> u64 #foreign libgsl;
gsl_rng_uniform :: (r: *gsl_rng) -> float64 #foreign libgsl;
gsl_rng_uniform_pos :: (r: *gsl_rng) -> float64 #foreign libgsl;
gsl_rng_uniform_int :: (r: *gsl_rng, n: u64) -> u64 #foreign libgsl;

/* Structure describing a type of generator.
*/
gsl_qrng_type :: struct {
    name:          *u8;
    max_dimension: u32;
    state_size:    #type (dimension: u32) -> size_t #c_call;
    init_state:    #type (state: *void, dimension: u32) -> s32 #c_call;
    get:           #type (state: *void, dimension: u32, x: *float64) -> s32 #c_call;
}

/* Structure describing a generator instance of a
* specified type, with generator-specific state info
* and dimension-specific info.
*/
gsl_qrng :: struct {
    type:       *gsl_qrng_type;
    dimension:  u32;
    state_size: size_t;
    state:      *void;
}

/* Supported generator types.
*/
gsl_qrng_niederreiter_2: *gsl_qrng_type #elsewhere libgsl;
gsl_qrng_sobol: *gsl_qrng_type #elsewhere libgsl;
gsl_qrng_halton: *gsl_qrng_type #elsewhere libgsl;
gsl_qrng_reversehalton: *gsl_qrng_type #elsewhere libgsl;

/* Allocate and initialize a generator
* of the specified type, in the given
* space dimension.
*/
gsl_qrng_alloc :: (T: *gsl_qrng_type, dimension: u32) -> *gsl_qrng #foreign libgsl;

/* Copy a generator. */
gsl_qrng_memcpy :: (dest: *gsl_qrng, src: *gsl_qrng) -> s32 #foreign libgsl;

/* Clone a generator. */
gsl_qrng_clone :: (q: *gsl_qrng) -> *gsl_qrng #foreign libgsl;

/* Free a generator. */
gsl_qrng_free :: (q: *gsl_qrng) -> void #foreign libgsl;

/* Intialize a generator. */
gsl_qrng_init :: (q: *gsl_qrng) -> void #foreign libgsl;

/* Get the standardized name of the generator. */
gsl_qrng_name :: (q: *gsl_qrng) -> *u8 #foreign libgsl;

/* ISN'T THIS CONFUSING FOR PEOPLE?
WHAT IF SOMEBODY TRIES TO COPY WITH THIS ???
*/
gsl_qrng_size :: (q: *gsl_qrng) -> size_t #foreign libgsl;

gsl_qrng_state :: (q: *gsl_qrng) -> *void #foreign libgsl;

/* Retrieve next vector in sequence. */
gsl_qrng_get :: (q: *gsl_qrng, x: *float64) -> s32 #foreign libgsl;

gsl_ran_bernoulli :: (r: *gsl_rng, p: float64) -> u32 #foreign libgsl;
gsl_ran_bernoulli_pdf :: (k: u32, p: float64) -> float64 #foreign libgsl;

gsl_ran_beta :: (r: *gsl_rng, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_ran_beta_pdf :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_ran_binomial :: (r: *gsl_rng, p: float64, n: u32) -> u32 #foreign libgsl;
gsl_ran_binomial_knuth :: (r: *gsl_rng, p: float64, n: u32) -> u32 #foreign libgsl;
gsl_ran_binomial_tpe :: (r: *gsl_rng, p: float64, n: u32) -> u32 #foreign libgsl;
gsl_ran_binomial_pdf :: (k: u32, p: float64, n: u32) -> float64 #foreign libgsl;

gsl_ran_exponential :: (r: *gsl_rng, mu: float64) -> float64 #foreign libgsl;
gsl_ran_exponential_pdf :: (x: float64, mu: float64) -> float64 #foreign libgsl;

gsl_ran_exppow :: (r: *gsl_rng, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_ran_exppow_pdf :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_ran_cauchy :: (r: *gsl_rng, a: float64) -> float64 #foreign libgsl;
gsl_ran_cauchy_pdf :: (x: float64, a: float64) -> float64 #foreign libgsl;

gsl_ran_chisq :: (r: *gsl_rng, nu: float64) -> float64 #foreign libgsl;
gsl_ran_chisq_pdf :: (x: float64, nu: float64) -> float64 #foreign libgsl;

gsl_ran_dirichlet :: (r: *gsl_rng, K: size_t, alpha: *float64, theta: *float64) -> void #foreign libgsl;
gsl_ran_dirichlet_pdf :: (K: size_t, alpha: *float64, theta: *float64) -> float64 #foreign libgsl;
gsl_ran_dirichlet_lnpdf :: (K: size_t, alpha: *float64, theta: *float64) -> float64 #foreign libgsl;

gsl_ran_erlang :: (r: *gsl_rng, a: float64, n: float64) -> float64 #foreign libgsl;
gsl_ran_erlang_pdf :: (x: float64, a: float64, n: float64) -> float64 #foreign libgsl;

gsl_ran_fdist :: (r: *gsl_rng, nu1: float64, nu2: float64) -> float64 #foreign libgsl;
gsl_ran_fdist_pdf :: (x: float64, nu1: float64, nu2: float64) -> float64 #foreign libgsl;

gsl_ran_flat :: (r: *gsl_rng, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_ran_flat_pdf :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_ran_gamma :: (r: *gsl_rng, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_ran_gamma_int :: (r: *gsl_rng, a: u32) -> float64 #foreign libgsl;
gsl_ran_gamma_pdf :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_ran_gamma_mt :: (r: *gsl_rng, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_ran_gamma_knuth :: (r: *gsl_rng, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_ran_gaussian :: (r: *gsl_rng, sigma: float64) -> float64 #foreign libgsl;
gsl_ran_gaussian_ratio_method :: (r: *gsl_rng, sigma: float64) -> float64 #foreign libgsl;
gsl_ran_gaussian_ziggurat :: (r: *gsl_rng, sigma: float64) -> float64 #foreign libgsl;
gsl_ran_gaussian_pdf :: (x: float64, sigma: float64) -> float64 #foreign libgsl;

gsl_ran_ugaussian :: (r: *gsl_rng) -> float64 #foreign libgsl;
gsl_ran_ugaussian_ratio_method :: (r: *gsl_rng) -> float64 #foreign libgsl;
gsl_ran_ugaussian_pdf :: (x: float64) -> float64 #foreign libgsl;

gsl_ran_gaussian_tail :: (r: *gsl_rng, a: float64, sigma: float64) -> float64 #foreign libgsl;
gsl_ran_gaussian_tail_pdf :: (x: float64, a: float64, sigma: float64) -> float64 #foreign libgsl;

gsl_ran_ugaussian_tail :: (r: *gsl_rng, a: float64) -> float64 #foreign libgsl;
gsl_ran_ugaussian_tail_pdf :: (x: float64, a: float64) -> float64 #foreign libgsl;

gsl_ran_bivariate_gaussian :: (r: *gsl_rng, sigma_x: float64, sigma_y: float64, rho: float64, x: *float64, y: *float64) -> void #foreign libgsl;
gsl_ran_bivariate_gaussian_pdf :: (x: float64, y: float64, sigma_x: float64, sigma_y: float64, rho: float64) -> float64 #foreign libgsl;

gsl_ran_multivariate_gaussian :: (r: *gsl_rng, mu: *gsl_vector, L: *gsl_matrix, result: *gsl_vector) -> s32 #foreign libgsl;
gsl_ran_multivariate_gaussian_log_pdf :: (x: *gsl_vector, mu: *gsl_vector, L: *gsl_matrix, result: *float64, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_ran_multivariate_gaussian_pdf :: (x: *gsl_vector, mu: *gsl_vector, L: *gsl_matrix, result: *float64, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_ran_multivariate_gaussian_mean :: (X: *gsl_matrix, mu_hat: *gsl_vector) -> s32 #foreign libgsl;
gsl_ran_multivariate_gaussian_vcov :: (X: *gsl_matrix, sigma_hat: *gsl_matrix) -> s32 #foreign libgsl;

gsl_ran_wishart :: (r: *gsl_rng, df: float64, L: *gsl_matrix, result: *gsl_matrix, work: *gsl_matrix) -> s32 #foreign libgsl;

gsl_ran_wishart_log_pdf :: (X: *gsl_matrix, L_X: *gsl_matrix, df: float64, L: *gsl_matrix, result: *float64, work: *gsl_matrix) -> s32 #foreign libgsl;

gsl_ran_wishart_pdf :: (X: *gsl_matrix, L_X: *gsl_matrix, df: float64, L: *gsl_matrix, result: *float64, work: *gsl_matrix) -> s32 #foreign libgsl;

gsl_ran_landau :: (r: *gsl_rng) -> float64 #foreign libgsl;
gsl_ran_landau_pdf :: (x: float64) -> float64 #foreign libgsl;

gsl_ran_geometric :: (r: *gsl_rng, p: float64) -> u32 #foreign libgsl;
gsl_ran_geometric_pdf :: (k: u32, p: float64) -> float64 #foreign libgsl;

gsl_ran_hypergeometric :: (r: *gsl_rng, n1: u32, n2: u32, t: u32) -> u32 #foreign libgsl;
gsl_ran_hypergeometric_pdf :: (k: u32, n1: u32, n2: u32, t: u32) -> float64 #foreign libgsl;

gsl_ran_gumbel1 :: (r: *gsl_rng, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_ran_gumbel1_pdf :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_ran_gumbel2 :: (r: *gsl_rng, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_ran_gumbel2_pdf :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_ran_logistic :: (r: *gsl_rng, a: float64) -> float64 #foreign libgsl;
gsl_ran_logistic_pdf :: (x: float64, a: float64) -> float64 #foreign libgsl;

gsl_ran_lognormal :: (r: *gsl_rng, zeta: float64, sigma: float64) -> float64 #foreign libgsl;
gsl_ran_lognormal_pdf :: (x: float64, zeta: float64, sigma: float64) -> float64 #foreign libgsl;

gsl_ran_logarithmic :: (r: *gsl_rng, p: float64) -> u32 #foreign libgsl;
gsl_ran_logarithmic_pdf :: (k: u32, p: float64) -> float64 #foreign libgsl;

gsl_ran_multinomial :: (r: *gsl_rng, K: size_t, N: u32, p: *float64, n: *u32) -> void #foreign libgsl;

gsl_ran_multinomial_pdf :: (K: size_t, p: *float64, n: *u32) -> float64 #foreign libgsl;

gsl_ran_multinomial_lnpdf :: (K: size_t, p: *float64, n: *u32) -> float64 #foreign libgsl;

gsl_ran_negative_binomial :: (r: *gsl_rng, p: float64, n: float64) -> u32 #foreign libgsl;
gsl_ran_negative_binomial_pdf :: (k: u32, p: float64, n: float64) -> float64 #foreign libgsl;

gsl_ran_pascal :: (r: *gsl_rng, p: float64, n: u32) -> u32 #foreign libgsl;
gsl_ran_pascal_pdf :: (k: u32, p: float64, n: u32) -> float64 #foreign libgsl;

gsl_ran_pareto :: (r: *gsl_rng, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_ran_pareto_pdf :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_ran_poisson :: (r: *gsl_rng, mu: float64) -> u32 #foreign libgsl;
gsl_ran_poisson_array :: (r: *gsl_rng, n: size_t, array: *u32, mu: float64) -> void #foreign libgsl;

gsl_ran_poisson_pdf :: (k: u32, mu: float64) -> float64 #foreign libgsl;

gsl_ran_rayleigh :: (r: *gsl_rng, sigma: float64) -> float64 #foreign libgsl;
gsl_ran_rayleigh_pdf :: (x: float64, sigma: float64) -> float64 #foreign libgsl;

gsl_ran_rayleigh_tail :: (r: *gsl_rng, a: float64, sigma: float64) -> float64 #foreign libgsl;
gsl_ran_rayleigh_tail_pdf :: (x: float64, a: float64, sigma: float64) -> float64 #foreign libgsl;

gsl_ran_tdist :: (r: *gsl_rng, nu: float64) -> float64 #foreign libgsl;
gsl_ran_tdist_pdf :: (x: float64, nu: float64) -> float64 #foreign libgsl;

gsl_ran_laplace :: (r: *gsl_rng, a: float64) -> float64 #foreign libgsl;
gsl_ran_laplace_pdf :: (x: float64, a: float64) -> float64 #foreign libgsl;

gsl_ran_levy :: (r: *gsl_rng, c: float64, alpha: float64) -> float64 #foreign libgsl;
gsl_ran_levy_skew :: (r: *gsl_rng, c: float64, alpha: float64, beta: float64) -> float64 #foreign libgsl;

gsl_ran_weibull :: (r: *gsl_rng, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_ran_weibull_pdf :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_ran_dir_2d :: (r: *gsl_rng, x: *float64, y: *float64) -> void #foreign libgsl;
gsl_ran_dir_2d_trig_method :: (r: *gsl_rng, x: *float64, y: *float64) -> void #foreign libgsl;
gsl_ran_dir_3d :: (r: *gsl_rng, x: *float64, y: *float64, z: *float64) -> void #foreign libgsl;
gsl_ran_dir_nd :: (r: *gsl_rng, n: size_t, x: *float64) -> void #foreign libgsl;

gsl_ran_shuffle :: (r: *gsl_rng, base: *void, nmembm: size_t, size: size_t) -> void #foreign libgsl;
gsl_ran_choose :: (r: *gsl_rng, dest: *void, k: size_t, src: *void, n: size_t, size: size_t) -> s32 #foreign libgsl;
gsl_ran_sample :: (r: *gsl_rng, dest: *void, k: size_t, src: *void, n: size_t, size: size_t) -> void #foreign libgsl;

gsl_ran_discrete_t :: struct {
    K: size_t;
    A: *size_t;
    F: *float64;
}

gsl_ran_discrete_preproc :: (K: size_t, P: *float64) -> *gsl_ran_discrete_t #foreign libgsl;
gsl_ran_discrete_free :: (g: *gsl_ran_discrete_t) -> void #foreign libgsl;
gsl_ran_discrete :: (r: *gsl_rng, g: *gsl_ran_discrete_t) -> size_t #foreign libgsl;
gsl_ran_discrete_pdf :: (k: size_t, g: *gsl_ran_discrete_t) -> float64 #foreign libgsl;

gsl_cdf_ugaussian_P :: (x: float64) -> float64 #foreign libgsl;
gsl_cdf_ugaussian_Q :: (x: float64) -> float64 #foreign libgsl;

gsl_cdf_ugaussian_Pinv :: (P: float64) -> float64 #foreign libgsl;
gsl_cdf_ugaussian_Qinv :: (Q: float64) -> float64 #foreign libgsl;

gsl_cdf_gaussian_P :: (x: float64, sigma: float64) -> float64 #foreign libgsl;
gsl_cdf_gaussian_Q :: (x: float64, sigma: float64) -> float64 #foreign libgsl;

gsl_cdf_gaussian_Pinv :: (P: float64, sigma: float64) -> float64 #foreign libgsl;
gsl_cdf_gaussian_Qinv :: (Q: float64, sigma: float64) -> float64 #foreign libgsl;

gsl_cdf_gamma_P :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_gamma_Q :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_gamma_Pinv :: (P: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_gamma_Qinv :: (Q: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_cauchy_P :: (x: float64, a: float64) -> float64 #foreign libgsl;
gsl_cdf_cauchy_Q :: (x: float64, a: float64) -> float64 #foreign libgsl;

gsl_cdf_cauchy_Pinv :: (P: float64, a: float64) -> float64 #foreign libgsl;
gsl_cdf_cauchy_Qinv :: (Q: float64, a: float64) -> float64 #foreign libgsl;

gsl_cdf_laplace_P :: (x: float64, a: float64) -> float64 #foreign libgsl;
gsl_cdf_laplace_Q :: (x: float64, a: float64) -> float64 #foreign libgsl;

gsl_cdf_laplace_Pinv :: (P: float64, a: float64) -> float64 #foreign libgsl;
gsl_cdf_laplace_Qinv :: (Q: float64, a: float64) -> float64 #foreign libgsl;

gsl_cdf_rayleigh_P :: (x: float64, sigma: float64) -> float64 #foreign libgsl;
gsl_cdf_rayleigh_Q :: (x: float64, sigma: float64) -> float64 #foreign libgsl;

gsl_cdf_rayleigh_Pinv :: (P: float64, sigma: float64) -> float64 #foreign libgsl;
gsl_cdf_rayleigh_Qinv :: (Q: float64, sigma: float64) -> float64 #foreign libgsl;

gsl_cdf_chisq_P :: (x: float64, nu: float64) -> float64 #foreign libgsl;
gsl_cdf_chisq_Q :: (x: float64, nu: float64) -> float64 #foreign libgsl;

gsl_cdf_chisq_Pinv :: (P: float64, nu: float64) -> float64 #foreign libgsl;
gsl_cdf_chisq_Qinv :: (Q: float64, nu: float64) -> float64 #foreign libgsl;

gsl_cdf_exponential_P :: (x: float64, mu: float64) -> float64 #foreign libgsl;
gsl_cdf_exponential_Q :: (x: float64, mu: float64) -> float64 #foreign libgsl;

gsl_cdf_exponential_Pinv :: (P: float64, mu: float64) -> float64 #foreign libgsl;
gsl_cdf_exponential_Qinv :: (Q: float64, mu: float64) -> float64 #foreign libgsl;

gsl_cdf_exppow_P :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_exppow_Q :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_tdist_P :: (x: float64, nu: float64) -> float64 #foreign libgsl;
gsl_cdf_tdist_Q :: (x: float64, nu: float64) -> float64 #foreign libgsl;

gsl_cdf_tdist_Pinv :: (P: float64, nu: float64) -> float64 #foreign libgsl;
gsl_cdf_tdist_Qinv :: (Q: float64, nu: float64) -> float64 #foreign libgsl;

gsl_cdf_fdist_P :: (x: float64, nu1: float64, nu2: float64) -> float64 #foreign libgsl;
gsl_cdf_fdist_Q :: (x: float64, nu1: float64, nu2: float64) -> float64 #foreign libgsl;

gsl_cdf_fdist_Pinv :: (P: float64, nu1: float64, nu2: float64) -> float64 #foreign libgsl;
gsl_cdf_fdist_Qinv :: (Q: float64, nu1: float64, nu2: float64) -> float64 #foreign libgsl;

gsl_cdf_beta_P :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_beta_Q :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_beta_Pinv :: (P: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_beta_Qinv :: (Q: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_flat_P :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_flat_Q :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_flat_Pinv :: (P: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_flat_Qinv :: (Q: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_lognormal_P :: (x: float64, zeta: float64, sigma: float64) -> float64 #foreign libgsl;
gsl_cdf_lognormal_Q :: (x: float64, zeta: float64, sigma: float64) -> float64 #foreign libgsl;

gsl_cdf_lognormal_Pinv :: (P: float64, zeta: float64, sigma: float64) -> float64 #foreign libgsl;
gsl_cdf_lognormal_Qinv :: (Q: float64, zeta: float64, sigma: float64) -> float64 #foreign libgsl;

gsl_cdf_gumbel1_P :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_gumbel1_Q :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_gumbel1_Pinv :: (P: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_gumbel1_Qinv :: (Q: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_gumbel2_P :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_gumbel2_Q :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_gumbel2_Pinv :: (P: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_gumbel2_Qinv :: (Q: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_weibull_P :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_weibull_Q :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_weibull_Pinv :: (P: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_weibull_Qinv :: (Q: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_pareto_P :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_pareto_Q :: (x: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_pareto_Pinv :: (P: float64, a: float64, b: float64) -> float64 #foreign libgsl;
gsl_cdf_pareto_Qinv :: (Q: float64, a: float64, b: float64) -> float64 #foreign libgsl;

gsl_cdf_logistic_P :: (x: float64, a: float64) -> float64 #foreign libgsl;
gsl_cdf_logistic_Q :: (x: float64, a: float64) -> float64 #foreign libgsl;

gsl_cdf_logistic_Pinv :: (P: float64, a: float64) -> float64 #foreign libgsl;
gsl_cdf_logistic_Qinv :: (Q: float64, a: float64) -> float64 #foreign libgsl;

gsl_cdf_binomial_P :: (k: u32, p: float64, n: u32) -> float64 #foreign libgsl;
gsl_cdf_binomial_Q :: (k: u32, p: float64, n: u32) -> float64 #foreign libgsl;

gsl_cdf_poisson_P :: (k: u32, mu: float64) -> float64 #foreign libgsl;
gsl_cdf_poisson_Q :: (k: u32, mu: float64) -> float64 #foreign libgsl;

gsl_cdf_geometric_P :: (k: u32, p: float64) -> float64 #foreign libgsl;
gsl_cdf_geometric_Q :: (k: u32, p: float64) -> float64 #foreign libgsl;

gsl_cdf_negative_binomial_P :: (k: u32, p: float64, n: float64) -> float64 #foreign libgsl;
gsl_cdf_negative_binomial_Q :: (k: u32, p: float64, n: float64) -> float64 #foreign libgsl;

gsl_cdf_pascal_P :: (k: u32, p: float64, n: u32) -> float64 #foreign libgsl;
gsl_cdf_pascal_Q :: (k: u32, p: float64, n: u32) -> float64 #foreign libgsl;

gsl_cdf_hypergeometric_P :: (k: u32, n1: u32, n2: u32, t: u32) -> float64 #foreign libgsl;

gsl_cdf_hypergeometric_Q :: (k: u32, n1: u32, n2: u32, t: u32) -> float64 #foreign libgsl;

gsl_histogram :: struct {
    n:     size_t;
    range: *float64;
    bin:   *float64;
}

gsl_histogram_pdf :: struct {
    n:     size_t;
    range: *float64;
    sum:   *float64;
}

gsl_histogram_alloc :: (n: size_t) -> *gsl_histogram #foreign libgsl;

gsl_histogram_calloc :: (n: size_t) -> *gsl_histogram #foreign libgsl;
gsl_histogram_calloc_uniform :: (n: size_t, xmin: float64, xmax: float64) -> *gsl_histogram #foreign libgsl;
gsl_histogram_free :: (h: *gsl_histogram) -> void #foreign libgsl;
gsl_histogram_increment :: (h: *gsl_histogram, x: float64) -> s32 #foreign libgsl;
gsl_histogram_accumulate :: (h: *gsl_histogram, x: float64, weight: float64) -> s32 #foreign libgsl;
gsl_histogram_find :: (h: *gsl_histogram, x: float64, i: *size_t) -> s32 #foreign libgsl;

gsl_histogram_get :: (h: *gsl_histogram, i: size_t) -> float64 #foreign libgsl;
gsl_histogram_get_range :: (h: *gsl_histogram, i: size_t, lower: *float64, upper: *float64) -> s32 #foreign libgsl;

gsl_histogram_max :: (h: *gsl_histogram) -> float64 #foreign libgsl;
gsl_histogram_min :: (h: *gsl_histogram) -> float64 #foreign libgsl;
gsl_histogram_bins :: (h: *gsl_histogram) -> size_t #foreign libgsl;

gsl_histogram_reset :: (h: *gsl_histogram) -> void #foreign libgsl;

gsl_histogram_calloc_range :: (n: size_t, range: *float64) -> *gsl_histogram #foreign libgsl;

gsl_histogram_set_ranges :: (h: *gsl_histogram, range: *float64, size: size_t) -> s32 #foreign libgsl;

gsl_histogram_set_ranges_uniform :: (h: *gsl_histogram, xmin: float64, xmax: float64) -> s32 #foreign libgsl;

gsl_histogram_memcpy :: (dest: *gsl_histogram, source: *gsl_histogram) -> s32 #foreign libgsl;

gsl_histogram_clone :: (source: *gsl_histogram) -> *gsl_histogram #foreign libgsl;

gsl_histogram_max_val :: (h: *gsl_histogram) -> float64 #foreign libgsl;

gsl_histogram_max_bin :: (h: *gsl_histogram) -> size_t #foreign libgsl;

gsl_histogram_min_val :: (h: *gsl_histogram) -> float64 #foreign libgsl;

gsl_histogram_min_bin :: (h: *gsl_histogram) -> size_t #foreign libgsl;

gsl_histogram_equal_bins_p :: (h1: *gsl_histogram, h2: *gsl_histogram) -> s32 #foreign libgsl;

gsl_histogram_add :: (h1: *gsl_histogram, h2: *gsl_histogram) -> s32 #foreign libgsl;

gsl_histogram_sub :: (h1: *gsl_histogram, h2: *gsl_histogram) -> s32 #foreign libgsl;

gsl_histogram_mul :: (h1: *gsl_histogram, h2: *gsl_histogram) -> s32 #foreign libgsl;

gsl_histogram_div :: (h1: *gsl_histogram, h2: *gsl_histogram) -> s32 #foreign libgsl;

gsl_histogram_scale :: (h: *gsl_histogram, scale: float64) -> s32 #foreign libgsl;

gsl_histogram_shift :: (h: *gsl_histogram, shift: float64) -> s32 #foreign libgsl;

gsl_histogram_sigma :: (h: *gsl_histogram) -> float64 #foreign libgsl;

gsl_histogram_mean :: (h: *gsl_histogram) -> float64 #foreign libgsl;

gsl_histogram_sum :: (h: *gsl_histogram) -> float64 #foreign libgsl;

gsl_histogram_fwrite :: (stream: *FILE, h: *gsl_histogram) -> s32 #foreign libgsl;
gsl_histogram_fread :: (stream: *FILE, h: *gsl_histogram) -> s32 #foreign libgsl;
gsl_histogram_fprintf :: (stream: *FILE, h: *gsl_histogram, range_format: *u8, bin_format: *u8) -> s32 #foreign libgsl;

gsl_histogram_fscanf :: (stream: *FILE, h: *gsl_histogram) -> s32 #foreign libgsl;

gsl_histogram_pdf_alloc :: (n: size_t) -> *gsl_histogram_pdf #foreign libgsl;
gsl_histogram_pdf_init :: (p: *gsl_histogram_pdf, h: *gsl_histogram) -> s32 #foreign libgsl;
gsl_histogram_pdf_free :: (p: *gsl_histogram_pdf) -> void #foreign libgsl;
gsl_histogram_pdf_sample :: (p: *gsl_histogram_pdf, r: float64) -> float64 #foreign libgsl;

gsl_histogram2d :: struct {
    nx:     size_t;
    ny:     size_t;
    xrange: *float64;
    yrange: *float64;
    bin:    *float64;
}

gsl_histogram2d_pdf :: struct {
    nx:     size_t;
    ny:     size_t;
    xrange: *float64;
    yrange: *float64;
    sum:    *float64;
}

gsl_histogram2d_alloc :: (nx: size_t, ny: size_t) -> *gsl_histogram2d #foreign libgsl;
gsl_histogram2d_calloc :: (nx: size_t, ny: size_t) -> *gsl_histogram2d #foreign libgsl;
gsl_histogram2d_calloc_uniform :: (nx: size_t, ny: size_t, xmin: float64, xmax: float64, ymin: float64, ymax: float64) -> *gsl_histogram2d #foreign libgsl;

gsl_histogram2d_free :: (h: *gsl_histogram2d) -> void #foreign libgsl;

gsl_histogram2d_increment :: (h: *gsl_histogram2d, x: float64, y: float64) -> s32 #foreign libgsl;
gsl_histogram2d_accumulate :: (h: *gsl_histogram2d, x: float64, y: float64, weight: float64) -> s32 #foreign libgsl;

gsl_histogram2d_find :: (h: *gsl_histogram2d, x: float64, y: float64, i: *size_t, j: *size_t) -> s32 #foreign libgsl;

gsl_histogram2d_get :: (h: *gsl_histogram2d, i: size_t, j: size_t) -> float64 #foreign libgsl;
gsl_histogram2d_get_xrange :: (h: *gsl_histogram2d, i: size_t, xlower: *float64, xupper: *float64) -> s32 #foreign libgsl;

gsl_histogram2d_get_yrange :: (h: *gsl_histogram2d, j: size_t, ylower: *float64, yupper: *float64) -> s32 #foreign libgsl;

gsl_histogram2d_xmax :: (h: *gsl_histogram2d) -> float64 #foreign libgsl;
gsl_histogram2d_xmin :: (h: *gsl_histogram2d) -> float64 #foreign libgsl;
gsl_histogram2d_nx :: (h: *gsl_histogram2d) -> size_t #foreign libgsl;

gsl_histogram2d_ymax :: (h: *gsl_histogram2d) -> float64 #foreign libgsl;
gsl_histogram2d_ymin :: (h: *gsl_histogram2d) -> float64 #foreign libgsl;
gsl_histogram2d_ny :: (h: *gsl_histogram2d) -> size_t #foreign libgsl;

gsl_histogram2d_reset :: (h: *gsl_histogram2d) -> void #foreign libgsl;

gsl_histogram2d_calloc_range :: (nx: size_t, ny: size_t, xrange: *float64, yrange: *float64) -> *gsl_histogram2d #foreign libgsl;

gsl_histogram2d_set_ranges_uniform :: (h: *gsl_histogram2d, xmin: float64, xmax: float64, ymin: float64, ymax: float64) -> s32 #foreign libgsl;

gsl_histogram2d_set_ranges :: (h: *gsl_histogram2d, xrange: *float64, xsize: size_t, yrange: *float64, ysize: size_t) -> s32 #foreign libgsl;

gsl_histogram2d_memcpy :: (dest: *gsl_histogram2d, source: *gsl_histogram2d) -> s32 #foreign libgsl;

gsl_histogram2d_clone :: (source: *gsl_histogram2d) -> *gsl_histogram2d #foreign libgsl;

gsl_histogram2d_max_val :: (h: *gsl_histogram2d) -> float64 #foreign libgsl;

gsl_histogram2d_max_bin :: (h: *gsl_histogram2d, i: *size_t, j: *size_t) -> void #foreign libgsl;

gsl_histogram2d_min_val :: (h: *gsl_histogram2d) -> float64 #foreign libgsl;

gsl_histogram2d_min_bin :: (h: *gsl_histogram2d, i: *size_t, j: *size_t) -> void #foreign libgsl;

gsl_histogram2d_xmean :: (h: *gsl_histogram2d) -> float64 #foreign libgsl;

gsl_histogram2d_ymean :: (h: *gsl_histogram2d) -> float64 #foreign libgsl;

gsl_histogram2d_xsigma :: (h: *gsl_histogram2d) -> float64 #foreign libgsl;

gsl_histogram2d_ysigma :: (h: *gsl_histogram2d) -> float64 #foreign libgsl;

gsl_histogram2d_cov :: (h: *gsl_histogram2d) -> float64 #foreign libgsl;

gsl_histogram2d_sum :: (h: *gsl_histogram2d) -> float64 #foreign libgsl;

gsl_histogram2d_equal_bins_p :: (h1: *gsl_histogram2d, h2: *gsl_histogram2d) -> s32 #foreign libgsl;

gsl_histogram2d_add :: (h1: *gsl_histogram2d, h2: *gsl_histogram2d) -> s32 #foreign libgsl;

gsl_histogram2d_sub :: (h1: *gsl_histogram2d, h2: *gsl_histogram2d) -> s32 #foreign libgsl;

gsl_histogram2d_mul :: (h1: *gsl_histogram2d, h2: *gsl_histogram2d) -> s32 #foreign libgsl;

gsl_histogram2d_div :: (h1: *gsl_histogram2d, h2: *gsl_histogram2d) -> s32 #foreign libgsl;

gsl_histogram2d_scale :: (h: *gsl_histogram2d, scale: float64) -> s32 #foreign libgsl;

gsl_histogram2d_shift :: (h: *gsl_histogram2d, shift: float64) -> s32 #foreign libgsl;

gsl_histogram2d_fwrite :: (stream: *FILE, h: *gsl_histogram2d) -> s32 #foreign libgsl;
gsl_histogram2d_fread :: (stream: *FILE, h: *gsl_histogram2d) -> s32 #foreign libgsl;
gsl_histogram2d_fprintf :: (stream: *FILE, h: *gsl_histogram2d, range_format: *u8, bin_format: *u8) -> s32 #foreign libgsl;

gsl_histogram2d_fscanf :: (stream: *FILE, h: *gsl_histogram2d) -> s32 #foreign libgsl;

gsl_histogram2d_pdf_alloc :: (nx: size_t, ny: size_t) -> *gsl_histogram2d_pdf #foreign libgsl;
gsl_histogram2d_pdf_init :: (p: *gsl_histogram2d_pdf, h: *gsl_histogram2d) -> s32 #foreign libgsl;
gsl_histogram2d_pdf_free :: (p: *gsl_histogram2d_pdf) -> void #foreign libgsl;
gsl_histogram2d_pdf_sample :: (p: *gsl_histogram2d_pdf, r1: float64, r2: float64, x: *float64, y: *float64) -> s32 #foreign libgsl;

gsl_linalg_matrix_mod_t :: enum u32 {
    NONE      :: 0;
    TRANSPOSE :: 1;
    CONJUGATE :: 2;

    GSL_LINALG_MOD_NONE      :: NONE;
    GSL_LINALG_MOD_TRANSPOSE :: TRANSPOSE;
    GSL_LINALG_MOD_CONJUGATE :: CONJUGATE;
}

/* Simple implementation of matrix multiply.
* Calculates C = A.B
*
* exceptions: GSL_EBADLEN
*/
gsl_linalg_matmult :: (A: *gsl_matrix, B: *gsl_matrix, C: *gsl_matrix) -> s32 #foreign libgsl;

/* Simple implementation of matrix multiply.
* Allows transposition of either matrix, so it
* can compute A.B or Trans(A).B or A.Trans(B) or Trans(A).Trans(B)
*
* exceptions: GSL_EBADLEN
*/
gsl_linalg_matmult_mod :: (A: *gsl_matrix, modA: gsl_linalg_matrix_mod_t, B: *gsl_matrix, modB: gsl_linalg_matrix_mod_t, C: *gsl_matrix) -> s32 #foreign libgsl;

/* Calculate the matrix exponential by the scaling and
* squaring method described in Moler + Van Loan,
* SIAM Rev 20, 801 (1978). The mode argument allows
* choosing an optimal strategy, from the table
* given in the paper, for a given precision.
*
* exceptions: GSL_ENOTSQR, GSL_EBADLEN
*/
gsl_linalg_exponential_ss :: (A: *gsl_matrix, eA: *gsl_matrix, mode: gsl_mode_t) -> s32 #foreign libgsl;

/* Householder Transformations */
gsl_linalg_householder_transform :: (v: *gsl_vector) -> float64 #foreign libgsl;
gsl_linalg_householder_transform2 :: (alpha: *float64, v: *gsl_vector) -> float64 #foreign libgsl;
gsl_linalg_complex_householder_transform :: (v: *gsl_vector_complex) -> gsl_complex #foreign libgsl;

gsl_linalg_householder_hm :: (tau: float64, v: *gsl_vector, A: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_householder_mh :: (tau: float64, v: *gsl_vector, A: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_householder_hv :: (tau: float64, v: *gsl_vector, w: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_householder_left :: (tau: float64, v: *gsl_vector, A: *gsl_matrix, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_householder_right :: (tau: float64, v: *gsl_vector, A: *gsl_matrix, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_householder_hm1 :: (tau: float64, A: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_complex_householder_hm :: (tau: gsl_complex, v: *gsl_vector_complex, A: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_householder_mh :: (tau: gsl_complex, v: *gsl_vector_complex, A: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_householder_hv :: (tau: gsl_complex, v: *gsl_vector_complex, w: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_householder_left :: (tau: gsl_complex, v: *gsl_vector_complex, A: *gsl_matrix_complex, work: *gsl_vector_complex) -> s32 #foreign libgsl;

/* Hessenberg reduction */
gsl_linalg_hessenberg_decomp :: (A: *gsl_matrix, tau: *gsl_vector) -> s32 #foreign libgsl;
gsl_linalg_hessenberg_unpack :: (H: *gsl_matrix, tau: *gsl_vector, U: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_hessenberg_unpack_accum :: (H: *gsl_matrix, tau: *gsl_vector, U: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_hessenberg_set_zero :: (H: *gsl_matrix) -> s32 #foreign libgsl;
gsl_linalg_hessenberg_submatrix :: (M: *gsl_matrix, A: *gsl_matrix, top: size_t, tau: *gsl_vector) -> s32 #foreign libgsl;

/* Hessenberg-Triangular reduction */
gsl_linalg_hesstri_decomp :: (A: *gsl_matrix, B: *gsl_matrix, U: *gsl_matrix, V: *gsl_matrix, work: *gsl_vector) -> s32 #foreign libgsl;

/* Singular Value Decomposition

* exceptions:
*/
gsl_linalg_SV_decomp :: (A: *gsl_matrix, V: *gsl_matrix, S: *gsl_vector, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_SV_decomp_mod :: (A: *gsl_matrix, X: *gsl_matrix, V: *gsl_matrix, S: *gsl_vector, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_SV_decomp_jacobi :: (A: *gsl_matrix, Q: *gsl_matrix, S: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_SV_solve :: (U: *gsl_matrix, Q: *gsl_matrix, S: *gsl_vector, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_SV_leverage :: (U: *gsl_matrix, h: *gsl_vector) -> s32 #foreign libgsl;

/* LU Decomposition, Gaussian elimination with partial pivoting
*/
gsl_linalg_LU_decomp :: (A: *gsl_matrix, p: *gsl_permutation, signum: *s32) -> s32 #foreign libgsl;

gsl_linalg_LU_solve :: (LU: *gsl_matrix, p: *gsl_permutation, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LU_svx :: (LU: *gsl_matrix, p: *gsl_permutation, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LU_refine :: (A: *gsl_matrix, LU: *gsl_matrix, p: *gsl_permutation, b: *gsl_vector, x: *gsl_vector, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LU_invert :: (LU: *gsl_matrix, p: *gsl_permutation, inverse: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_LU_invx :: (LU: *gsl_matrix, p: *gsl_permutation) -> s32 #foreign libgsl;

gsl_linalg_LU_det :: (LU: *gsl_matrix, signum: s32) -> float64 #foreign libgsl;
gsl_linalg_LU_lndet :: (LU: *gsl_matrix) -> float64 #foreign libgsl;
gsl_linalg_LU_sgndet :: (lu: *gsl_matrix, signum: s32) -> s32 #foreign libgsl;

/* Banded LU decomposition */
gsl_linalg_LU_band_decomp :: (M: size_t, lb: size_t, ub: size_t, AB: *gsl_matrix, piv: *gsl_vector_uint) -> s32 #foreign libgsl;

gsl_linalg_LU_band_solve :: (lb: size_t, ub: size_t, LUB: *gsl_matrix, piv: *gsl_vector_uint, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LU_band_svx :: (lb: size_t, ub: size_t, LUB: *gsl_matrix, piv: *gsl_vector_uint, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LU_band_unpack :: (M: size_t, lb: size_t, ub: size_t, LUB: *gsl_matrix, piv: *gsl_vector_uint, L: *gsl_matrix, U: *gsl_matrix) -> s32 #foreign libgsl;

/* Complex LU Decomposition */
gsl_linalg_complex_LU_decomp :: (A: *gsl_matrix_complex, p: *gsl_permutation, signum: *s32) -> s32 #foreign libgsl;

gsl_linalg_complex_LU_solve :: (LU: *gsl_matrix_complex, p: *gsl_permutation, b: *gsl_vector_complex, x: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_LU_svx :: (LU: *gsl_matrix_complex, p: *gsl_permutation, x: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_LU_refine :: (A: *gsl_matrix_complex, LU: *gsl_matrix_complex, p: *gsl_permutation, b: *gsl_vector_complex, x: *gsl_vector_complex, work: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_LU_invert :: (LU: *gsl_matrix_complex, p: *gsl_permutation, inverse: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_LU_invx :: (LU: *gsl_matrix_complex, p: *gsl_permutation) -> s32 #foreign libgsl;

gsl_linalg_complex_LU_det :: (LU: *gsl_matrix_complex, signum: s32) -> gsl_complex #foreign libgsl;

gsl_linalg_complex_LU_lndet :: (LU: *gsl_matrix_complex) -> float64 #foreign libgsl;

gsl_linalg_complex_LU_sgndet :: (LU: *gsl_matrix_complex, signum: s32) -> gsl_complex #foreign libgsl;

/* QR decomposition */
gsl_linalg_QR_decomp :: (A: *gsl_matrix, tau: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_decomp_old :: (A: *gsl_matrix, tau: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_decomp_r :: (A: *gsl_matrix, T: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_QR_solve :: (QR: *gsl_matrix, tau: *gsl_vector, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_solve_r :: (QR: *gsl_matrix, T: *gsl_matrix, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_svx :: (QR: *gsl_matrix, tau: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_lssolve :: (QR: *gsl_matrix, tau: *gsl_vector, b: *gsl_vector, x: *gsl_vector, residual: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_lssolve_r :: (QR: *gsl_matrix, T: *gsl_matrix, b: *gsl_vector, x: *gsl_vector, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_QRsolve :: (Q: *gsl_matrix, R: *gsl_matrix, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_Rsolve :: (QR: *gsl_matrix, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_Rsvx :: (QR: *gsl_matrix, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_update :: (Q: *gsl_matrix, R: *gsl_matrix, w: *gsl_vector, v: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_QTvec :: (QR: *gsl_matrix, tau: *gsl_vector, v: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_QTvec_r :: (QR: *gsl_matrix, T: *gsl_matrix, b: *gsl_vector, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_Qvec :: (QR: *gsl_matrix, tau: *gsl_vector, v: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_QTmat :: (QR: *gsl_matrix, tau: *gsl_vector, A: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_QR_QTmat_r :: (QR: *gsl_matrix, T: *gsl_matrix, B: *gsl_matrix, work: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_QR_matQ :: (QR: *gsl_matrix, tau: *gsl_vector, A: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_QR_unpack :: (QR: *gsl_matrix, tau: *gsl_vector, Q: *gsl_matrix, R: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_QR_unpack_r :: (QR: *gsl_matrix, T: *gsl_matrix, Q: *gsl_matrix, R: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_R_solve :: (R: *gsl_matrix, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_R_svx :: (R: *gsl_matrix, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_rcond :: (QR: *gsl_matrix, rcond: *float64, work: *gsl_vector) -> s32 #foreign libgsl;

/* complex QR decomposition */
gsl_linalg_complex_QR_decomp :: (A: *gsl_matrix_complex, tau: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_QR_decomp_r :: (A: *gsl_matrix_complex, T: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_QR_solve :: (QR: *gsl_matrix_complex, tau: *gsl_vector_complex, b: *gsl_vector_complex, x: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_QR_solve_r :: (QR: *gsl_matrix_complex, T: *gsl_matrix_complex, b: *gsl_vector_complex, x: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_QR_svx :: (QR: *gsl_matrix_complex, tau: *gsl_vector_complex, x: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_QR_lssolve :: (QR: *gsl_matrix_complex, tau: *gsl_vector_complex, b: *gsl_vector_complex, x: *gsl_vector_complex, residual: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_QR_lssolve_r :: (QR: *gsl_matrix_complex, T: *gsl_matrix_complex, b: *gsl_vector_complex, x: *gsl_vector_complex, work: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_QR_QHvec :: (QR: *gsl_matrix_complex, tau: *gsl_vector_complex, v: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_QR_QHvec_r :: (QR: *gsl_matrix_complex, T: *gsl_matrix_complex, b: *gsl_vector_complex, work: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_QR_Qvec :: (QR: *gsl_matrix_complex, tau: *gsl_vector_complex, v: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_QR_unpack :: (QR: *gsl_matrix_complex, tau: *gsl_vector_complex, Q: *gsl_matrix_complex, R: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_QR_unpack_r :: (QR: *gsl_matrix_complex, T: *gsl_matrix_complex, Q: *gsl_matrix_complex, R: *gsl_matrix_complex) -> s32 #foreign libgsl;

/* banded QR decomposition */
gsl_linalg_QR_band_decomp_L2 :: (M: size_t, p: size_t, q: size_t, AB: *gsl_matrix, tau: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_band_unpack_L2 :: (p: size_t, q: size_t, QRB: *gsl_matrix, tau: *gsl_vector, Q: *gsl_matrix, R: *gsl_matrix) -> s32 #foreign libgsl;

/* Q R P^T decomposition */
gsl_linalg_QRPT_decomp :: (A: *gsl_matrix, tau: *gsl_vector, p: *gsl_permutation, signum: *s32, norm: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QRPT_decomp2 :: (A: *gsl_matrix, q: *gsl_matrix, r: *gsl_matrix, tau: *gsl_vector, p: *gsl_permutation, signum: *s32, norm: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QRPT_solve :: (QR: *gsl_matrix, tau: *gsl_vector, p: *gsl_permutation, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QRPT_lssolve :: (QR: *gsl_matrix, tau: *gsl_vector, p: *gsl_permutation, b: *gsl_vector, x: *gsl_vector, residual: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QRPT_lssolve2 :: (QR: *gsl_matrix, tau: *gsl_vector, p: *gsl_permutation, b: *gsl_vector, rank: size_t, x: *gsl_vector, residual: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QRPT_svx :: (QR: *gsl_matrix, tau: *gsl_vector, p: *gsl_permutation, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QRPT_QRsolve :: (Q: *gsl_matrix, R: *gsl_matrix, p: *gsl_permutation, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QRPT_Rsolve :: (QR: *gsl_matrix, p: *gsl_permutation, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QRPT_Rsvx :: (QR: *gsl_matrix, p: *gsl_permutation, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QRPT_update :: (Q: *gsl_matrix, R: *gsl_matrix, p: *gsl_permutation, u: *gsl_vector, v: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QRPT_rank :: (QR: *gsl_matrix, tol: float64) -> size_t #foreign libgsl;

gsl_linalg_QRPT_rcond :: (QR: *gsl_matrix, rcond: *float64, work: *gsl_vector) -> s32 #foreign libgsl;

/* triangle on top of diagonal QR decomposition */
gsl_linalg_QR_UD_decomp :: (U: *gsl_matrix, D: *gsl_vector, Y: *gsl_matrix, T: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_QR_UD_lssolve :: (R: *gsl_matrix, Y: *gsl_matrix, T: *gsl_matrix, b: *gsl_vector, x: *gsl_vector, work: *gsl_vector) -> s32 #foreign libgsl;

/* triangle on top of rectangle QR decomposition */
gsl_linalg_QR_UR_decomp :: (S: *gsl_matrix, A: *gsl_matrix, T: *gsl_matrix) -> s32 #foreign libgsl;

/* triangle on top of triangle QR decomposition */
gsl_linalg_QR_UU_decomp :: (U: *gsl_matrix, S: *gsl_matrix, T: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_QR_UU_lssolve :: (R: *gsl_matrix, Y: *gsl_matrix, T: *gsl_matrix, b: *gsl_vector, x: *gsl_vector, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QR_UU_QTvec :: (Y: *gsl_matrix, T: *gsl_matrix, b: *gsl_vector, work: *gsl_vector) -> s32 #foreign libgsl;

/* triangle on top of trapezoidal QR decomposition */
gsl_linalg_QR_UZ_decomp :: (S: *gsl_matrix, A: *gsl_matrix, T: *gsl_matrix) -> s32 #foreign libgsl;

/* QL decomposition */
gsl_linalg_QL_decomp :: (A: *gsl_matrix, tau: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_QL_unpack :: (QL: *gsl_matrix, tau: *gsl_vector, Q: *gsl_matrix, L: *gsl_matrix) -> s32 #foreign libgsl;

/* COD decomposition */
gsl_linalg_COD_decomp :: (A: *gsl_matrix, tau_Q: *gsl_vector, tau_Z: *gsl_vector, p: *gsl_permutation, rank: *size_t, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_COD_decomp_e :: (A: *gsl_matrix, tau_Q: *gsl_vector, tau_Z: *gsl_vector, p: *gsl_permutation, tol: float64, rank: *size_t, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_COD_lssolve :: (QRZT: *gsl_matrix, tau_Q: *gsl_vector, tau_Z: *gsl_vector, perm: *gsl_permutation, rank: size_t, b: *gsl_vector, x: *gsl_vector, residual: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_COD_lssolve2 :: (lambda: float64, QRZT: *gsl_matrix, tau_Q: *gsl_vector, tau_Z: *gsl_vector, perm: *gsl_permutation, rank: size_t, b: *gsl_vector, x: *gsl_vector, residual: *gsl_vector, S: *gsl_matrix, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_COD_unpack :: (QRZT: *gsl_matrix, tau_Q: *gsl_vector, tau_Z: *gsl_vector, rank: size_t, Q: *gsl_matrix, R: *gsl_matrix, Z: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_COD_matZ :: (QRZT: *gsl_matrix, tau_Z: *gsl_vector, rank: size_t, A: *gsl_matrix, work: *gsl_vector) -> s32 #foreign libgsl;

/* LQ decomposition */
gsl_linalg_LQ_decomp :: (A: *gsl_matrix, tau: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LQ_lssolve :: (LQ: *gsl_matrix, tau: *gsl_vector, b: *gsl_vector, x: *gsl_vector, residual: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LQ_QTvec :: (LQ: *gsl_matrix, tau: *gsl_vector, v: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LQ_solve_T :: (LQ: *gsl_matrix, tau: *gsl_vector, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LQ_svx_T :: (LQ: *gsl_matrix, tau: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LQ_lssolve_T :: (LQ: *gsl_matrix, tau: *gsl_vector, b: *gsl_vector, x: *gsl_vector, residual: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LQ_Lsolve_T :: (LQ: *gsl_matrix, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LQ_Lsvx_T :: (LQ: *gsl_matrix, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_L_solve_T :: (L: *gsl_matrix, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LQ_vecQ :: (LQ: *gsl_matrix, tau: *gsl_vector, v: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LQ_vecQT :: (LQ: *gsl_matrix, tau: *gsl_vector, v: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LQ_unpack :: (LQ: *gsl_matrix, tau: *gsl_vector, Q: *gsl_matrix, L: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_LQ_update :: (Q: *gsl_matrix, R: *gsl_matrix, v: *gsl_vector, w: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_LQ_LQsolve :: (Q: *gsl_matrix, L: *gsl_matrix, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

/* P^T L Q decomposition */
gsl_linalg_PTLQ_decomp :: (A: *gsl_matrix, tau: *gsl_vector, p: *gsl_permutation, signum: *s32, norm: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_PTLQ_decomp2 :: (A: *gsl_matrix, q: *gsl_matrix, r: *gsl_matrix, tau: *gsl_vector, p: *gsl_permutation, signum: *s32, norm: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_PTLQ_solve_T :: (QR: *gsl_matrix, tau: *gsl_vector, p: *gsl_permutation, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_PTLQ_svx_T :: (LQ: *gsl_matrix, tau: *gsl_vector, p: *gsl_permutation, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_PTLQ_LQsolve_T :: (Q: *gsl_matrix, L: *gsl_matrix, p: *gsl_permutation, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_PTLQ_Lsolve_T :: (LQ: *gsl_matrix, p: *gsl_permutation, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_PTLQ_Lsvx_T :: (LQ: *gsl_matrix, p: *gsl_permutation, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_PTLQ_update :: (Q: *gsl_matrix, L: *gsl_matrix, p: *gsl_permutation, v: *gsl_vector, w: *gsl_vector) -> s32 #foreign libgsl;

/* Cholesky Decomposition */
gsl_linalg_cholesky_decomp :: (A: *gsl_matrix) -> s32 #foreign libgsl;
gsl_linalg_cholesky_decomp1 :: (A: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_cholesky_solve :: (cholesky: *gsl_matrix, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_cholesky_solve_mat :: (cholesky: *gsl_matrix, B: *gsl_matrix, X: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_cholesky_svx :: (cholesky: *gsl_matrix, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_cholesky_svx_mat :: (cholesky: *gsl_matrix, X: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_cholesky_invert :: (cholesky: *gsl_matrix) -> s32 #foreign libgsl;

/* Cholesky decomposition with unit-diagonal triangular parts.
*   A = L D L^T, where diag(L) = (1,1,...,1).
*   Upon exit, A contains L and L^T as for Cholesky, and
*   the diagonal of A is (1,1,...,1). The vector Dis set
*   to the diagonal elements of the diagonal matrix D.
*/
gsl_linalg_cholesky_decomp_unit :: (A: *gsl_matrix, D: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_cholesky_scale :: (A: *gsl_matrix, S: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_cholesky_scale_apply :: (A: *gsl_matrix, S: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_cholesky_decomp2 :: (A: *gsl_matrix, S: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_cholesky_svx2 :: (LLT: *gsl_matrix, S: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_cholesky_solve2 :: (LLT: *gsl_matrix, S: *gsl_vector, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_cholesky_rcond :: (LLT: *gsl_matrix, rcond: *float64, work: *gsl_vector) -> s32 #foreign libgsl;

/* Complex Cholesky Decomposition */
gsl_linalg_complex_cholesky_decomp :: (A: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_cholesky_solve :: (cholesky: *gsl_matrix_complex, b: *gsl_vector_complex, x: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_cholesky_svx :: (cholesky: *gsl_matrix_complex, x: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_complex_cholesky_invert :: (cholesky: *gsl_matrix_complex) -> s32 #foreign libgsl;

/* Pivoted Cholesky LDLT decomposition */
gsl_linalg_pcholesky_decomp :: (A: *gsl_matrix, p: *gsl_permutation) -> s32 #foreign libgsl;

gsl_linalg_pcholesky_solve :: (LDLT: *gsl_matrix, p: *gsl_permutation, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_pcholesky_svx :: (LDLT: *gsl_matrix, p: *gsl_permutation, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_pcholesky_decomp2 :: (A: *gsl_matrix, p: *gsl_permutation, S: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_pcholesky_solve2 :: (LDLT: *gsl_matrix, p: *gsl_permutation, S: *gsl_vector, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_pcholesky_svx2 :: (LDLT: *gsl_matrix, p: *gsl_permutation, S: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_pcholesky_invert :: (LDLT: *gsl_matrix, p: *gsl_permutation, Ainv: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_pcholesky_rcond :: (LDLT: *gsl_matrix, p: *gsl_permutation, rcond: *float64, work: *gsl_vector) -> s32 #foreign libgsl;

/* Modified Cholesky decomposition */
gsl_linalg_mcholesky_decomp :: (A: *gsl_matrix, p: *gsl_permutation, E: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_mcholesky_solve :: (LDLT: *gsl_matrix, p: *gsl_permutation, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_mcholesky_svx :: (LDLT: *gsl_matrix, p: *gsl_permutation, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_mcholesky_rcond :: (LDLT: *gsl_matrix, p: *gsl_permutation, rcond: *float64, work: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_mcholesky_invert :: (LDLT: *gsl_matrix, p: *gsl_permutation, Ainv: *gsl_matrix) -> s32 #foreign libgsl;

/* Banded Cholesky decomposition */
gsl_linalg_cholesky_band_decomp :: (A: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_cholesky_band_solve :: (LLT: *gsl_matrix, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_cholesky_band_svx :: (LLT: *gsl_matrix, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_cholesky_band_solvem :: (LLT: *gsl_matrix, B: *gsl_matrix, X: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_cholesky_band_svxm :: (LLT: *gsl_matrix, X: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_cholesky_band_invert :: (LLT: *gsl_matrix, Ainv: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_cholesky_band_unpack :: (LLT: *gsl_matrix, L: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_cholesky_band_scale :: (A: *gsl_matrix, S: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_cholesky_band_scale_apply :: (A: *gsl_matrix, S: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_cholesky_band_rcond :: (LLT: *gsl_matrix, rcond: *float64, work: *gsl_vector) -> s32 #foreign libgsl;

/* L D L^T decomposition */
gsl_linalg_ldlt_decomp :: (A: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_ldlt_solve :: (LDLT: *gsl_matrix, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_ldlt_svx :: (LDLT: *gsl_matrix, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_ldlt_rcond :: (LDLT: *gsl_matrix, rcond: *float64, work: *gsl_vector) -> s32 #foreign libgsl;

/* Banded L D L^T decomposition */
gsl_linalg_ldlt_band_decomp :: (A: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_ldlt_band_solve :: (LDLT: *gsl_matrix, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_ldlt_band_svx :: (LDLT: *gsl_matrix, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_ldlt_band_unpack :: (LDLT: *gsl_matrix, L: *gsl_matrix, D: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_ldlt_band_rcond :: (LDLT: *gsl_matrix, rcond: *float64, work: *gsl_vector) -> s32 #foreign libgsl;

/* Symmetric to symmetric tridiagonal decomposition */
gsl_linalg_symmtd_decomp :: (A: *gsl_matrix, tau: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_symmtd_unpack :: (A: *gsl_matrix, tau: *gsl_vector, Q: *gsl_matrix, diag: *gsl_vector, subdiag: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_symmtd_unpack_T :: (A: *gsl_matrix, diag: *gsl_vector, subdiag: *gsl_vector) -> s32 #foreign libgsl;

/* Hermitian to symmetric tridiagonal decomposition */
gsl_linalg_hermtd_decomp :: (A: *gsl_matrix_complex, tau: *gsl_vector_complex) -> s32 #foreign libgsl;

gsl_linalg_hermtd_unpack :: (A: *gsl_matrix_complex, tau: *gsl_vector_complex, U: *gsl_matrix_complex, diag: *gsl_vector, sudiag: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_hermtd_unpack_T :: (A: *gsl_matrix_complex, diag: *gsl_vector, subdiag: *gsl_vector) -> s32 #foreign libgsl;

/* Linear Solve Using Householder Transformations

* exceptions:
*/
gsl_linalg_HH_solve :: (A: *gsl_matrix, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;
gsl_linalg_HH_svx :: (A: *gsl_matrix, x: *gsl_vector) -> s32 #foreign libgsl;

/* Linear solve for a symmetric tridiagonal system.

* The input vectors represent the NxN matrix as follows:
*
*     diag[0]  offdiag[0]             0    ...
*  offdiag[0]     diag[1]    offdiag[1]    ...
*           0  offdiag[1]       diag[2]    ...
*           0           0    offdiag[2]    ...
*         ...         ...           ...    ...
*/
gsl_linalg_solve_symm_tridiag :: (diag: *gsl_vector, offdiag: *gsl_vector, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

/* Linear solve for a nonsymmetric tridiagonal system.

* The input vectors represent the NxN matrix as follows:
*
*       diag[0]  abovediag[0]              0    ...
*  belowdiag[0]       diag[1]   abovediag[1]    ...
*             0  belowdiag[1]        diag[2]    ...
*             0             0   belowdiag[2]    ...
*           ...           ...            ...    ...
*/
gsl_linalg_solve_tridiag :: (diag: *gsl_vector, abovediag: *gsl_vector, belowdiag: *gsl_vector, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

/* Linear solve for a symmetric cyclic tridiagonal system.

* The input vectors represent the NxN matrix as follows:
*
*      diag[0]  offdiag[0]             0   .....  offdiag[N-1]
*   offdiag[0]     diag[1]    offdiag[1]   .....
*            0  offdiag[1]       diag[2]   .....
*            0           0    offdiag[2]   .....
*          ...         ...
* offdiag[N-1]         ...
*/
gsl_linalg_solve_symm_cyc_tridiag :: (diag: *gsl_vector, offdiag: *gsl_vector, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

/* Linear solve for a nonsymmetric cyclic tridiagonal system.

* The input vectors represent the NxN matrix as follows:
*
*        diag[0]  abovediag[0]             0   .....  belowdiag[N-1]
*   belowdiag[0]       diag[1]  abovediag[1]   .....
*              0  belowdiag[1]       diag[2]
*              0             0  belowdiag[2]   .....
*            ...           ...
* abovediag[N-1]           ...
*/
gsl_linalg_solve_cyc_tridiag :: (diag: *gsl_vector, abovediag: *gsl_vector, belowdiag: *gsl_vector, b: *gsl_vector, x: *gsl_vector) -> s32 #foreign libgsl;

/* Bidiagonal decomposition */
gsl_linalg_bidiag_decomp :: (A: *gsl_matrix, tau_U: *gsl_vector, tau_V: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_bidiag_unpack :: (A: *gsl_matrix, tau_U: *gsl_vector, U: *gsl_matrix, tau_V: *gsl_vector, V: *gsl_matrix, diag: *gsl_vector, superdiag: *gsl_vector) -> s32 #foreign libgsl;

gsl_linalg_bidiag_unpack2 :: (A: *gsl_matrix, tau_U: *gsl_vector, tau_V: *gsl_vector, V: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_bidiag_unpack_B :: (A: *gsl_matrix, diag: *gsl_vector, superdiag: *gsl_vector) -> s32 #foreign libgsl;

/* Balancing */
gsl_linalg_balance_matrix :: (A: *gsl_matrix, D: *gsl_vector) -> s32 #foreign libgsl;
gsl_linalg_balance_accum :: (A: *gsl_matrix, D: *gsl_vector) -> s32 #foreign libgsl;
gsl_linalg_balance_columns :: (A: *gsl_matrix, D: *gsl_vector) -> s32 #foreign libgsl;

/* condition estimation */
gsl_linalg_tri_rcond :: (Uplo: CBLAS_UPLO_t, A: *gsl_matrix, rcond: *float64, work: *gsl_vector) -> s32 #foreign libgsl;
gsl_linalg_tri_upper_rcond :: (A: *gsl_matrix, rcond: *float64, work: *gsl_vector) -> s32 #foreign libgsl;
gsl_linalg_tri_lower_rcond :: (A: *gsl_matrix, rcond: *float64, work: *gsl_vector) -> s32 #foreign libgsl;
gsl_linalg_invnorm1 :: (N: size_t, Ainvx: #type (TransA: CBLAS_TRANSPOSE_t, x: *gsl_vector, params: *void) -> s32 #c_call, params: *void, Ainvnorm: *float64, work: *gsl_vector) -> s32 #foreign libgsl;

/* triangular matrices */
gsl_linalg_tri_upper_invert :: (T: *gsl_matrix) -> s32 #foreign libgsl;
gsl_linalg_tri_lower_invert :: (T: *gsl_matrix) -> s32 #foreign libgsl;
gsl_linalg_tri_upper_unit_invert :: (T: *gsl_matrix) -> s32 #foreign libgsl;
gsl_linalg_tri_lower_unit_invert :: (T: *gsl_matrix) -> s32 #foreign libgsl;

gsl_linalg_tri_invert :: (Uplo: CBLAS_UPLO_t, Diag: CBLAS_DIAG_t, T: *gsl_matrix) -> s32 #foreign libgsl;
gsl_linalg_complex_tri_invert :: (Uplo: CBLAS_UPLO_t, Diag: CBLAS_DIAG_t, T: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_linalg_tri_LTL :: (L: *gsl_matrix) -> s32 #foreign libgsl;
gsl_linalg_tri_UL :: (LU: *gsl_matrix) -> s32 #foreign libgsl;
gsl_linalg_complex_tri_LHL :: (L: *gsl_matrix_complex) -> s32 #foreign libgsl;
gsl_linalg_complex_tri_UL :: (LU: *gsl_matrix_complex) -> s32 #foreign libgsl;

gsl_linalg_givens :: (a: float64, b: float64, c: *float64, s: *float64) -> void #foreign libgsl;

gsl_linalg_givens_gv :: (v: *gsl_vector, i: size_t, j: size_t, c: float64, s: float64) -> void #foreign libgsl;

gsl_fft_direction :: enum s32 {
    forward  :: -1;
    backward :: 1;
    gsl_fft_forward  :: forward;
    gsl_fft_backward :: backward;
}

gsl_fft_real_radix2_transform :: (data: *float64, stride: size_t, n: size_t) -> s32 #foreign libgsl;

gsl_fft_real_wavetable :: struct {
    n:       size_t;
    nf:      size_t;
    factor:  [64] size_t;
    twiddle: [64] *gsl_complex;
    trig:    *gsl_complex;
}

gsl_fft_real_workspace :: struct {
    n:       size_t;
    scratch: *float64;
}

gsl_fft_real_wavetable_alloc :: (n: size_t) -> *gsl_fft_real_wavetable #foreign libgsl;

gsl_fft_real_wavetable_free :: (wavetable: *gsl_fft_real_wavetable) -> void #foreign libgsl;

gsl_fft_real_workspace_alloc :: (n: size_t) -> *gsl_fft_real_workspace #foreign libgsl;

gsl_fft_real_workspace_free :: (workspace: *gsl_fft_real_workspace) -> void #foreign libgsl;

gsl_fft_real_transform :: (data: *float64, stride: size_t, n: size_t, wavetable: *gsl_fft_real_wavetable, work: *gsl_fft_real_workspace) -> s32 #foreign libgsl;

gsl_fft_real_unpack :: (real_coefficient: *float64, complex_coefficient: *float64, stride: size_t, n: size_t) -> s32 #foreign libgsl;

/*  Power of 2 routines  */
gsl_fft_complex_radix2_forward :: (data: gsl_complex_packed_array, stride: size_t, n: size_t) -> s32 #foreign libgsl;

gsl_fft_complex_radix2_backward :: (data: gsl_complex_packed_array, stride: size_t, n: size_t) -> s32 #foreign libgsl;

gsl_fft_complex_radix2_inverse :: (data: gsl_complex_packed_array, stride: size_t, n: size_t) -> s32 #foreign libgsl;

gsl_fft_complex_radix2_transform :: (data: gsl_complex_packed_array, stride: size_t, n: size_t, sign: gsl_fft_direction) -> s32 #foreign libgsl;

gsl_fft_complex_radix2_dif_forward :: (data: gsl_complex_packed_array, stride: size_t, n: size_t) -> s32 #foreign libgsl;

gsl_fft_complex_radix2_dif_backward :: (data: gsl_complex_packed_array, stride: size_t, n: size_t) -> s32 #foreign libgsl;

gsl_fft_complex_radix2_dif_inverse :: (data: gsl_complex_packed_array, stride: size_t, n: size_t) -> s32 #foreign libgsl;

gsl_fft_complex_radix2_dif_transform :: (data: gsl_complex_packed_array, stride: size_t, n: size_t, sign: gsl_fft_direction) -> s32 #foreign libgsl;

/*  Mixed Radix general-N routines  */
gsl_fft_complex_wavetable :: struct {
    n:       size_t;
    nf:      size_t;
    factor:  [64] size_t;
    twiddle: [64] *gsl_complex;
    trig:    *gsl_complex;
}

gsl_fft_complex_workspace :: struct {
    n:       size_t;
    scratch: *float64;
}

gsl_fft_complex_wavetable_alloc :: (n: size_t) -> *gsl_fft_complex_wavetable #foreign libgsl;

gsl_fft_complex_wavetable_free :: (wavetable: *gsl_fft_complex_wavetable) -> void #foreign libgsl;

gsl_fft_complex_workspace_alloc :: (n: size_t) -> *gsl_fft_complex_workspace #foreign libgsl;

gsl_fft_complex_workspace_free :: (workspace: *gsl_fft_complex_workspace) -> void #foreign libgsl;

gsl_fft_complex_memcpy :: (dest: *gsl_fft_complex_wavetable, src: *gsl_fft_complex_wavetable) -> s32 #foreign libgsl;

gsl_fft_complex_forward :: (data: gsl_complex_packed_array, stride: size_t, n: size_t, wavetable: *gsl_fft_complex_wavetable, work: *gsl_fft_complex_workspace) -> s32 #foreign libgsl;

gsl_fft_complex_backward :: (data: gsl_complex_packed_array, stride: size_t, n: size_t, wavetable: *gsl_fft_complex_wavetable, work: *gsl_fft_complex_workspace) -> s32 #foreign libgsl;

gsl_fft_complex_inverse :: (data: gsl_complex_packed_array, stride: size_t, n: size_t, wavetable: *gsl_fft_complex_wavetable, work: *gsl_fft_complex_workspace) -> s32 #foreign libgsl;

gsl_fft_complex_transform :: (data: gsl_complex_packed_array, stride: size_t, n: size_t, wavetable: *gsl_fft_complex_wavetable, work: *gsl_fft_complex_workspace, sign: gsl_fft_direction) -> s32 #foreign libgsl;

gsl_combination_struct :: struct {
    n:    size_t;
    k:    size_t;
    data: *size_t;
}

gsl_combination :: gsl_combination_struct;

gsl_combination_alloc :: (n: size_t, k: size_t) -> *gsl_combination #foreign libgsl;
gsl_combination_calloc :: (n: size_t, k: size_t) -> *gsl_combination #foreign libgsl;
gsl_combination_init_first :: (c: *gsl_combination) -> void #foreign libgsl;
gsl_combination_init_last :: (c: *gsl_combination) -> void #foreign libgsl;
gsl_combination_free :: (c: *gsl_combination) -> void #foreign libgsl;
gsl_combination_memcpy :: (dest: *gsl_combination, src: *gsl_combination) -> s32 #foreign libgsl;

gsl_combination_fread :: (stream: *FILE, c: *gsl_combination) -> s32 #foreign libgsl;
gsl_combination_fwrite :: (stream: *FILE, c: *gsl_combination) -> s32 #foreign libgsl;
gsl_combination_fscanf :: (stream: *FILE, c: *gsl_combination) -> s32 #foreign libgsl;
gsl_combination_fprintf :: (stream: *FILE, c: *gsl_combination, format: *u8) -> s32 #foreign libgsl;

gsl_combination_n :: (c: *gsl_combination) -> size_t #foreign libgsl;
gsl_combination_k :: (c: *gsl_combination) -> size_t #foreign libgsl;
gsl_combination_data :: (c: *gsl_combination) -> *size_t #foreign libgsl;

gsl_combination_valid :: (c: *gsl_combination) -> s32 #foreign libgsl;
gsl_combination_next :: (c: *gsl_combination) -> s32 #foreign libgsl;
gsl_combination_prev :: (c: *gsl_combination) -> s32 #foreign libgsl;

gsl_combination_get :: (c: *gsl_combination, i: size_t) -> size_t #foreign libgsl;

/* evaluation accelerator */
gsl_interp_accel :: struct {
    cache:      size_t; /* cache of index   */
    miss_count: size_t; /* keep statistics  */
    hit_count:  size_t;
}

/* interpolation object type */
gsl_interp_type :: struct {
    name:        *u8;
    min_size:    u32;
    alloc:       #type (size: size_t) -> *void #c_call;
    init:        #type (unknown0: *void, xa: *float64, ya: *float64, size: size_t) -> s32 #c_call;
    eval:        #type (unknown0: *void, xa: *float64, ya: *float64, size: size_t, x: float64, unknown1: *gsl_interp_accel, y: *float64) -> s32 #c_call;
    eval_deriv:  #type (unknown0: *void, xa: *float64, ya: *float64, size: size_t, x: float64, unknown1: *gsl_interp_accel, y_p: *float64) -> s32 #c_call;
    eval_deriv2: #type (unknown0: *void, xa: *float64, ya: *float64, size: size_t, x: float64, unknown1: *gsl_interp_accel, y_pp: *float64) -> s32 #c_call;
    eval_integ:  #type (unknown0: *void, xa: *float64, ya: *float64, size: size_t, unknown1: *gsl_interp_accel, a: float64, b: float64, result: *float64) -> s32 #c_call;
    free:        #type (unknown0: *void) -> void #c_call;
}

/* general interpolation object */
gsl_interp :: struct {
    type:  *gsl_interp_type;
    xmin:  float64;
    xmax:  float64;
    size:  size_t;
    state: *void;
}

/* available types */
gsl_interp_linear: *gsl_interp_type #elsewhere libgsl;
gsl_interp_polynomial: *gsl_interp_type #elsewhere libgsl;
gsl_interp_cspline: *gsl_interp_type #elsewhere libgsl;
gsl_interp_cspline_periodic: *gsl_interp_type #elsewhere libgsl;
gsl_interp_akima: *gsl_interp_type #elsewhere libgsl;
gsl_interp_akima_periodic: *gsl_interp_type #elsewhere libgsl;
gsl_interp_steffen: *gsl_interp_type #elsewhere libgsl;

gsl_interp_accel_alloc :: () -> *gsl_interp_accel #foreign libgsl;

gsl_interp_accel_reset :: (a: *gsl_interp_accel) -> s32 #foreign libgsl;

gsl_interp_accel_free :: (a: *gsl_interp_accel) -> void #foreign libgsl;

gsl_interp_alloc :: (T: *gsl_interp_type, n: size_t) -> *gsl_interp #foreign libgsl;

gsl_interp_init :: (obj: *gsl_interp, xa: *float64, ya: *float64, size: size_t) -> s32 #foreign libgsl;

gsl_interp_name :: (interp: *gsl_interp) -> *u8 #foreign libgsl;
gsl_interp_min_size :: (interp: *gsl_interp) -> u32 #foreign libgsl;
gsl_interp_type_min_size :: (T: *gsl_interp_type) -> u32 #foreign libgsl;

gsl_interp_eval_e :: (obj: *gsl_interp, xa: *float64, ya: *float64, x: float64, a: *gsl_interp_accel, y: *float64) -> s32 #foreign libgsl;

gsl_interp_eval :: (obj: *gsl_interp, xa: *float64, ya: *float64, x: float64, a: *gsl_interp_accel) -> float64 #foreign libgsl;

gsl_interp_eval_deriv_e :: (obj: *gsl_interp, xa: *float64, ya: *float64, x: float64, a: *gsl_interp_accel, d: *float64) -> s32 #foreign libgsl;

gsl_interp_eval_deriv :: (obj: *gsl_interp, xa: *float64, ya: *float64, x: float64, a: *gsl_interp_accel) -> float64 #foreign libgsl;

gsl_interp_eval_deriv2_e :: (obj: *gsl_interp, xa: *float64, ya: *float64, x: float64, a: *gsl_interp_accel, d2: *float64) -> s32 #foreign libgsl;

gsl_interp_eval_deriv2 :: (obj: *gsl_interp, xa: *float64, ya: *float64, x: float64, a: *gsl_interp_accel) -> float64 #foreign libgsl;

gsl_interp_eval_integ_e :: (obj: *gsl_interp, xa: *float64, ya: *float64, a: float64, b: float64, acc: *gsl_interp_accel, result: *float64) -> s32 #foreign libgsl;

gsl_interp_eval_integ :: (obj: *gsl_interp, xa: *float64, ya: *float64, a: float64, b: float64, acc: *gsl_interp_accel) -> float64 #foreign libgsl;

gsl_interp_free :: (interp: *gsl_interp) -> void #foreign libgsl;

gsl_interp_bsearch :: (x_array: *float64, x: float64, index_lo: size_t, index_hi: size_t) -> size_t #foreign libgsl;

gsl_interp_accel_find :: (a: *gsl_interp_accel, x_array: *float64, size: size_t, x: float64) -> size_t #foreign libgsl;

/* general interpolation object */
gsl_spline :: struct {
    interp: *gsl_interp;
    x:      *float64;
    y:      *float64;
    size:   size_t;
}

gsl_spline_alloc :: (T: *gsl_interp_type, size: size_t) -> *gsl_spline #foreign libgsl;

gsl_spline_init :: (spline: *gsl_spline, xa: *float64, ya: *float64, size: size_t) -> s32 #foreign libgsl;

gsl_spline_name :: (spline: *gsl_spline) -> *u8 #foreign libgsl;
gsl_spline_min_size :: (spline: *gsl_spline) -> u32 #foreign libgsl;

gsl_spline_eval_e :: (spline: *gsl_spline, x: float64, a: *gsl_interp_accel, y: *float64) -> s32 #foreign libgsl;

gsl_spline_eval :: (spline: *gsl_spline, x: float64, a: *gsl_interp_accel) -> float64 #foreign libgsl;

gsl_spline_eval_deriv_e :: (spline: *gsl_spline, x: float64, a: *gsl_interp_accel, y: *float64) -> s32 #foreign libgsl;

gsl_spline_eval_deriv :: (spline: *gsl_spline, x: float64, a: *gsl_interp_accel) -> float64 #foreign libgsl;

gsl_spline_eval_deriv2_e :: (spline: *gsl_spline, x: float64, a: *gsl_interp_accel, y: *float64) -> s32 #foreign libgsl;

gsl_spline_eval_deriv2 :: (spline: *gsl_spline, x: float64, a: *gsl_interp_accel) -> float64 #foreign libgsl;

gsl_spline_eval_integ_e :: (spline: *gsl_spline, a: float64, b: float64, acc: *gsl_interp_accel, y: *float64) -> s32 #foreign libgsl;

gsl_spline_eval_integ :: (spline: *gsl_spline, a: float64, b: float64, acc: *gsl_interp_accel) -> float64 #foreign libgsl;

gsl_spline_free :: (spline: *gsl_spline) -> void #foreign libgsl;

gsl_deriv_central :: (f: *gsl_function, x: float64, h: float64, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_deriv_backward :: (f: *gsl_function, x: float64, h: float64, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_deriv_forward :: (f: *gsl_function, x: float64, h: float64, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

/* data for a Chebyshev series over a given interval */
gsl_cheb_series_struct :: struct {
    c:        *float64; /* coefficients                */
    order:    size_t; /* order of expansion          */
    a:        float64; /* lower interval point        */
    b:        float64; /* upper interval point        */

    /* The following exists (mostly) for the benefit
    * of the implementation. It is an effective single
    * precision order, for use in single precision
    * evaluation. Users can use it if they like, but
    * only they know how to calculate it, since it is
    * specific to the approximated function. By default,
    * order_sp = order.
    * It is used explicitly only by the gsl_cheb_eval_mode
    * functions, which are not meant for casual use.
    */
    order_sp: size_t;

    f:        *float64; /* function evaluated at chebyschev points  */
}

gsl_cheb_series :: gsl_cheb_series_struct;

/* Calculate a Chebyshev series of specified order over
* a specified interval, for a given function.
* Return 0 on failure.
*/
gsl_cheb_alloc :: (order: size_t) -> *gsl_cheb_series #foreign libgsl;

/* Free a Chebyshev series previously calculated with gsl_cheb_alloc().
*/
gsl_cheb_free :: (cs: *gsl_cheb_series) -> void #foreign libgsl;

/* Calculate a Chebyshev series using the storage provided.
* Uses the interval (a,b) and the order with which it
* was initially created.
*
*/
gsl_cheb_init :: (cs: *gsl_cheb_series, func: *gsl_function, a: float64, b: float64) -> s32 #foreign libgsl;

/* Return the order, size of coefficient array and coefficient array ptr */
gsl_cheb_order :: (cs: *gsl_cheb_series) -> size_t #foreign libgsl;
gsl_cheb_size :: (cs: *gsl_cheb_series) -> size_t #foreign libgsl;
gsl_cheb_coeffs :: (cs: *gsl_cheb_series) -> *float64 #foreign libgsl;

/* Evaluate a Chebyshev series at a given point.
* No errors can occur for a struct obtained from gsl_cheb_new().
*/
gsl_cheb_eval :: (cs: *gsl_cheb_series, x: float64) -> float64 #foreign libgsl;
gsl_cheb_eval_err :: (cs: *gsl_cheb_series, x: float64, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

/* Evaluate a Chebyshev series at a given point, to (at most) the given order.
* No errors can occur for a struct obtained from gsl_cheb_new().
*/
gsl_cheb_eval_n :: (cs: *gsl_cheb_series, order: size_t, x: float64) -> float64 #foreign libgsl;

gsl_cheb_eval_n_err :: (cs: *gsl_cheb_series, order: size_t, x: float64, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

/* Evaluate a Chebyshev series at a given point, using the default
* order for double precision mode(s) and the single precision
* order for other modes.
* No errors can occur for a struct obtained from gsl_cheb_new().
*/
gsl_cheb_eval_mode :: (cs: *gsl_cheb_series, x: float64, mode: gsl_mode_t) -> float64 #foreign libgsl;
gsl_cheb_eval_mode_e :: (cs: *gsl_cheb_series, x: float64, mode: gsl_mode_t, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

/* Compute the derivative of a Chebyshev series.
*/
gsl_cheb_calc_deriv :: (deriv: *gsl_cheb_series, cs: *gsl_cheb_series) -> s32 #foreign libgsl;

/* Compute the integral of a Chebyshev series. The
* integral is fixed by the condition that it equals zero at
* the left end-point, ie it is precisely
*       Integrate[cs(t; a,b), {t, a, x}]
*/
gsl_cheb_calc_integ :: (integ: *gsl_cheb_series, cs: *gsl_cheb_series) -> s32 #foreign libgsl;

/*  Workspace for Levin U Transform with error estimation,
*
*   size        = number of terms the workspace can handle
*   sum_plain   = simple sum of series
*   q_num       = backward diagonal of numerator; length = size
*   q_den       = backward diagonal of denominator; length = size
*   dq_num      = table of numerator derivatives; length = size**2
*   dq_den      = table of denominator derivatives; length = size**2
*   dsum        = derivative of sum wrt term i; length = size
*/
gsl_sum_levin_u_workspace :: struct {
    size:       size_t;
    i:          size_t; /* position in array */
    terms_used: size_t; /* number of calls */
    sum_plain:  float64;
    q_num:      *float64;
    q_den:      *float64;
    dq_num:     *float64;
    dq_den:     *float64;
    dsum:       *float64;
}

gsl_sum_levin_u_alloc :: (n: size_t) -> *gsl_sum_levin_u_workspace #foreign libgsl;
gsl_sum_levin_u_free :: (w: *gsl_sum_levin_u_workspace) -> void #foreign libgsl;

/* Basic Levin-u acceleration method.
*
*   array       = array of series elements
*   n           = size of array
*   sum_accel   = result of summation acceleration
*   err         = estimated error
*
* See [Fessler et al., ACM TOMS 9, 346 (1983) and TOMS-602]
*/
gsl_sum_levin_u_accel :: (array: *float64, n: size_t, w: *gsl_sum_levin_u_workspace, sum_accel: *float64, abserr: *float64) -> s32 #foreign libgsl;

/* Basic Levin-u acceleration method with constraints on the terms
* used,
*
*   array       = array of series elements
*   n           = size of array
*   min_terms   = minimum number of terms to sum
*   max_terms   = maximum number of terms to sum
*   sum_accel   = result of summation acceleration
*   err         = estimated error
*
* See [Fessler et al., ACM TOMS 9, 346 (1983) and TOMS-602]
*/
gsl_sum_levin_u_minmax :: (array: *float64, n: size_t, min_terms: size_t, max_terms: size_t, w: *gsl_sum_levin_u_workspace, sum_accel: *float64, abserr: *float64) -> s32 #foreign libgsl;

/* Basic Levin-u step w/o reference to the array of terms.
* We only need to specify the value of the current term
* to execute the step. See TOMS-745.
*
* sum = t0 + ... + t_{n-1} + term;  term = t_{n}
*
*   term   = value of the series term to be added
*   n      = position of term in series (starting from 0)
*   sum_accel = result of summation acceleration
*   sum_plain = simple sum of series
*/
gsl_sum_levin_u_step :: (term: float64, n: size_t, nmax: size_t, w: *gsl_sum_levin_u_workspace, sum_accel: *float64) -> s32 #foreign libgsl;

/* The following functions perform the same calculation without
estimating the errors. They require O(N) storage instead of O(N^2).
This may be useful for summing many similar series where the size
of the error has already been estimated reliably and is not
expected to change.  */
gsl_sum_levin_utrunc_workspace :: struct {
    size:       size_t;
    i:          size_t; /* position in array */
    terms_used: size_t; /* number of calls */
    sum_plain:  float64;
    q_num:      *float64;
    q_den:      *float64;
    dsum:       *float64;
}

gsl_sum_levin_utrunc_alloc :: (n: size_t) -> *gsl_sum_levin_utrunc_workspace #foreign libgsl;
gsl_sum_levin_utrunc_free :: (w: *gsl_sum_levin_utrunc_workspace) -> void #foreign libgsl;

gsl_sum_levin_utrunc_accel :: (array: *float64, n: size_t, w: *gsl_sum_levin_utrunc_workspace, sum_accel: *float64, abserr_trunc: *float64) -> s32 #foreign libgsl;

gsl_sum_levin_utrunc_minmax :: (array: *float64, n: size_t, min_terms: size_t, max_terms: size_t, w: *gsl_sum_levin_utrunc_workspace, sum_accel: *float64, abserr_trunc: *float64) -> s32 #foreign libgsl;

gsl_sum_levin_utrunc_step :: (term: float64, n: size_t, w: *gsl_sum_levin_utrunc_workspace, sum_accel: *float64) -> s32 #foreign libgsl;

gsl_wavelet_direction :: enum s32 {
    forward  :: 1;
    backward :: -1;
    gsl_wavelet_forward  :: forward;
    gsl_wavelet_backward :: backward;
}

gsl_wavelet_type :: struct {
    name: *u8;
    init: #type (h1: **float64, g1: **float64, h2: **float64, g2: **float64, nc: *size_t, offset: *size_t, member: size_t) -> s32 #c_call;
}

gsl_wavelet :: struct {
    type:   *gsl_wavelet_type;
    h1:     *float64;
    g1:     *float64;
    h2:     *float64;
    g2:     *float64;
    nc:     size_t;
    offset: size_t;
}

gsl_wavelet_workspace :: struct {
    scratch: *float64;
    n:       size_t;
}

gsl_wavelet_daubechies: *gsl_wavelet_type #elsewhere libgsl;
gsl_wavelet_daubechies_centered: *gsl_wavelet_type #elsewhere libgsl;
gsl_wavelet_haar: *gsl_wavelet_type #elsewhere libgsl;
gsl_wavelet_haar_centered: *gsl_wavelet_type #elsewhere libgsl;
gsl_wavelet_bspline: *gsl_wavelet_type #elsewhere libgsl;
gsl_wavelet_bspline_centered: *gsl_wavelet_type #elsewhere libgsl;

gsl_wavelet_alloc :: (T: *gsl_wavelet_type, k: size_t) -> *gsl_wavelet #foreign libgsl;
gsl_wavelet_free :: (w: *gsl_wavelet) -> void #foreign libgsl;
gsl_wavelet_name :: (w: *gsl_wavelet) -> *u8 #foreign libgsl;

gsl_wavelet_workspace_alloc :: (n: size_t) -> *gsl_wavelet_workspace #foreign libgsl;
gsl_wavelet_workspace_free :: (work: *gsl_wavelet_workspace) -> void #foreign libgsl;

gsl_wavelet_transform :: (w: *gsl_wavelet, data: *float64, stride: size_t, n: size_t, dir: gsl_wavelet_direction, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet_transform_forward :: (w: *gsl_wavelet, data: *float64, stride: size_t, n: size_t, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet_transform_inverse :: (w: *gsl_wavelet, data: *float64, stride: size_t, n: size_t, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet2d_transform :: (w: *gsl_wavelet, data: *float64, tda: size_t, size1: size_t, size2: size_t, dir: gsl_wavelet_direction, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet2d_transform_forward :: (w: *gsl_wavelet, data: *float64, tda: size_t, size1: size_t, size2: size_t, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet2d_transform_inverse :: (w: *gsl_wavelet, data: *float64, tda: size_t, size1: size_t, size2: size_t, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet2d_nstransform :: (w: *gsl_wavelet, data: *float64, tda: size_t, size1: size_t, size2: size_t, dir: gsl_wavelet_direction, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet2d_nstransform_forward :: (w: *gsl_wavelet, data: *float64, tda: size_t, size1: size_t, size2: size_t, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet2d_nstransform_inverse :: (w: *gsl_wavelet, data: *float64, tda: size_t, size1: size_t, size2: size_t, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet2d_transform_matrix :: (w: *gsl_wavelet, a: *gsl_matrix, dir: gsl_wavelet_direction, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet2d_transform_matrix_forward :: (w: *gsl_wavelet, a: *gsl_matrix, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet2d_transform_matrix_inverse :: (w: *gsl_wavelet, a: *gsl_matrix, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet2d_nstransform_matrix :: (w: *gsl_wavelet, a: *gsl_matrix, dir: gsl_wavelet_direction, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet2d_nstransform_matrix_forward :: (w: *gsl_wavelet, a: *gsl_matrix, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_wavelet2d_nstransform_matrix_inverse :: (w: *gsl_wavelet, a: *gsl_matrix, work: *gsl_wavelet_workspace) -> s32 #foreign libgsl;

gsl_dht_struct :: struct {
    size: size_t; /* size of the sample arrays to be transformed    */
    nu:   float64; /* Bessel function order                          */
    xmax: float64; /* the upper limit to the x-sampling domain       */
    kmax: float64; /* the upper limit to the k-sampling domain       */
    j:    *float64; /* array of computed J_nu zeros, j_{nu,s} = j[s]  */
    Jjj:  *float64; /* transform numerator, J_nu(j_i j_m / j_N)       */
    J2:   *float64; /* transform denominator, J_{nu+1}^2(j_m)         */
}

gsl_dht :: gsl_dht_struct;

/* Create a new transform object for a given size
* sampling array on the domain [0, xmax].
*/
gsl_dht_alloc :: (size: size_t) -> *gsl_dht #foreign libgsl;
gsl_dht_new :: (size: size_t, nu: float64, xmax: float64) -> *gsl_dht #foreign libgsl;

/* Recalculate a transform object for given values of nu, xmax.
* You cannot change the size of the object since the internal
* allocation is reused.
*/
gsl_dht_init :: (t: *gsl_dht, nu: float64, xmax: float64) -> s32 #foreign libgsl;

/* The n'th computed x sample point for a given transform.
* 0 <= n <= size-1
*/
gsl_dht_x_sample :: (t: *gsl_dht, n: s32) -> float64 #foreign libgsl;

/* The n'th computed k sample point for a given transform.
* 0 <= n <= size-1
*/
gsl_dht_k_sample :: (t: *gsl_dht, n: s32) -> float64 #foreign libgsl;

/* Free a transform object.
*/
gsl_dht_free :: (t: *gsl_dht) -> void #foreign libgsl;

/* Perform a transform on a sampled array.
* f_in[0] ... f_in[size-1] and similarly for f_out[]
*/
gsl_dht_apply :: (t: *gsl_dht, f_in: *float64, f_out: *float64) -> s32 #foreign libgsl;

/* real polynomial, real x */
gsl_poly_eval :: (c: *float64, len: s32, x: float64) -> float64 #foreign libgsl;

/* real polynomial, complex x */
gsl_poly_complex_eval :: (c: *float64, len: s32, z: gsl_complex) -> gsl_complex #foreign libgsl;

/* complex polynomial, complex x */
gsl_complex_poly_complex_eval :: (c: *gsl_complex, len: s32, z: gsl_complex) -> gsl_complex #foreign libgsl;

gsl_poly_eval_derivs :: (c: *float64, lenc: size_t, x: float64, res: *float64, lenres: size_t) -> s32 #foreign libgsl;

/* Work with divided-difference polynomials, Abramowitz & Stegun 25.2.26 */
gsl_poly_dd_init :: (dd: *float64, x: *float64, y: *float64, size: size_t) -> s32 #foreign libgsl;

gsl_poly_dd_eval :: (dd: *float64, xa: *float64, size: size_t, x: float64) -> float64 #foreign libgsl;

gsl_poly_dd_taylor :: (c: *float64, xp: float64, dd: *float64, x: *float64, size: size_t, w: *float64) -> s32 #foreign libgsl;

gsl_poly_dd_hermite_init :: (dd: *float64, z: *float64, xa: *float64, ya: *float64, dya: *float64, size: size_t) -> s32 #foreign libgsl;

/* Solve for real or complex roots of the standard quadratic equation,
* returning the number of real roots.
*
* Roots are returned ordered.
*/
gsl_poly_solve_quadratic :: (a: float64, b: float64, c: float64, x0: *float64, x1: *float64) -> s32 #foreign libgsl;

gsl_poly_complex_solve_quadratic :: (a: float64, b: float64, c: float64, z0: *gsl_complex, z1: *gsl_complex) -> s32 #foreign libgsl;

/* Solve for real roots of the cubic equation
* x^3 + a x^2 + b x + c = 0, returning the
* number of real roots.
*
* Roots are returned ordered.
*/
gsl_poly_solve_cubic :: (a: float64, b: float64, c: float64, x0: *float64, x1: *float64, x2: *float64) -> s32 #foreign libgsl;

gsl_poly_complex_solve_cubic :: (a: float64, b: float64, c: float64, z0: *gsl_complex, z1: *gsl_complex, z2: *gsl_complex) -> s32 #foreign libgsl;

/* Solve for the complex roots of a general real polynomial */
gsl_poly_complex_workspace :: struct {
    nc:     size_t;
    matrix: *float64;
}

gsl_poly_complex_workspace_alloc :: (n: size_t) -> *gsl_poly_complex_workspace #foreign libgsl;
gsl_poly_complex_workspace_free :: (w: *gsl_poly_complex_workspace) -> void #foreign libgsl;

gsl_poly_complex_solve :: (a: *float64, n: size_t, w: *gsl_poly_complex_workspace, z: gsl_complex_packed_ptr) -> s32 #foreign libgsl;

/* Workspace for adaptive integrators */
gsl_integration_workspace :: struct {
    limit:         size_t;
    size:          size_t;
    nrmax:         size_t;
    i:             size_t;
    maximum_level: size_t;
    alist:         *float64;
    blist:         *float64;
    rlist:         *float64;
    elist:         *float64;
    order:         *size_t;
    level:         *size_t;
}

gsl_integration_workspace_alloc :: (n: size_t) -> *gsl_integration_workspace #foreign libgsl;

gsl_integration_workspace_free :: (w: *gsl_integration_workspace) -> void #foreign libgsl;

/* Workspace for QAWS integrator */
gsl_integration_qaws_table :: struct {
    alpha: float64;
    beta:  float64;
    mu:    s32;
    nu:    s32;
    ri:    [25] float64;
    rj:    [25] float64;
    rg:    [25] float64;
    rh:    [25] float64;
}

gsl_integration_qaws_table_alloc :: (alpha: float64, beta: float64, mu: s32, nu: s32) -> *gsl_integration_qaws_table #foreign libgsl;

gsl_integration_qaws_table_set :: (t: *gsl_integration_qaws_table, alpha: float64, beta: float64, mu: s32, nu: s32) -> s32 #foreign libgsl;

gsl_integration_qaws_table_free :: (t: *gsl_integration_qaws_table) -> void #foreign libgsl;

/* Workspace for QAWO integrator */
gsl_integration_qawo_enum :: enum u32 {
    COSINE :: 0;
    SINE   :: 1;
    GSL_INTEG_COSINE :: COSINE;
    GSL_INTEG_SINE   :: SINE;
}

gsl_integration_qawo_table :: struct {
    n:      size_t;
    omega:  float64;
    L:      float64;
    par:    float64;
    sine:   gsl_integration_qawo_enum;
    chebmo: *float64;
}

gsl_integration_qawo_table_alloc :: (omega: float64, L: float64, sine: gsl_integration_qawo_enum, n: size_t) -> *gsl_integration_qawo_table #foreign libgsl;

gsl_integration_qawo_table_set :: (t: *gsl_integration_qawo_table, omega: float64, L: float64, sine: gsl_integration_qawo_enum) -> s32 #foreign libgsl;

gsl_integration_qawo_table_set_length :: (t: *gsl_integration_qawo_table, L: float64) -> s32 #foreign libgsl;

gsl_integration_qawo_table_free :: (t: *gsl_integration_qawo_table) -> void #foreign libgsl;

/* Definition of an integration rule */
gsl_integration_rule :: #type (f: *gsl_function, a: float64, b: float64, result: *float64, abserr: *float64, defabs: *float64, resabs: *float64) -> void #c_call;

gsl_integration_qk15 :: (f: *gsl_function, a: float64, b: float64, result: *float64, abserr: *float64, resabs: *float64, resasc: *float64) -> void #foreign libgsl;

gsl_integration_qk21 :: (f: *gsl_function, a: float64, b: float64, result: *float64, abserr: *float64, resabs: *float64, resasc: *float64) -> void #foreign libgsl;

gsl_integration_qk31 :: (f: *gsl_function, a: float64, b: float64, result: *float64, abserr: *float64, resabs: *float64, resasc: *float64) -> void #foreign libgsl;

gsl_integration_qk41 :: (f: *gsl_function, a: float64, b: float64, result: *float64, abserr: *float64, resabs: *float64, resasc: *float64) -> void #foreign libgsl;

gsl_integration_qk51 :: (f: *gsl_function, a: float64, b: float64, result: *float64, abserr: *float64, resabs: *float64, resasc: *float64) -> void #foreign libgsl;

gsl_integration_qk61 :: (f: *gsl_function, a: float64, b: float64, result: *float64, abserr: *float64, resabs: *float64, resasc: *float64) -> void #foreign libgsl;

gsl_integration_qcheb :: (f: *gsl_function, a: float64, b: float64, cheb12: *float64, cheb24: *float64) -> void #foreign libgsl;

/* The low-level integration rules in QUADPACK are identified by small
integers (1-6). We'll use symbolic constants to refer to them.  */
GSL_INTEG :: enum u32 {
    GAUSS15 :: 1;
    GAUSS21 :: 2;
    GAUSS31 :: 3;
    GAUSS41 :: 4;
    GAUSS51 :: 5;
    GAUSS61 :: 6;

    GSL_INTEG_GAUSS15 :: GAUSS15;
    GSL_INTEG_GAUSS21 :: GAUSS21;
    GSL_INTEG_GAUSS31 :: GAUSS31;
    GSL_INTEG_GAUSS41 :: GAUSS41;
    GSL_INTEG_GAUSS51 :: GAUSS51;
    GSL_INTEG_GAUSS61 :: GAUSS61;
}

gsl_integration_qk :: (n: s32, xgk: *float64, wg: *float64, wgk: *float64, fv1: *float64, fv2: *float64, f: *gsl_function, a: float64, b: float64, result: *float64, abserr: *float64, resabs: *float64, resasc: *float64) -> void #foreign libgsl;

gsl_integration_qng :: (f: *gsl_function, a: float64, b: float64, epsabs: float64, epsrel: float64, result: *float64, abserr: *float64, neval: *size_t) -> s32 #foreign libgsl;

gsl_integration_qag :: (f: *gsl_function, a: float64, b: float64, epsabs: float64, epsrel: float64, limit: size_t, key: s32, workspace: *gsl_integration_workspace, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_integration_qagi :: (f: *gsl_function, epsabs: float64, epsrel: float64, limit: size_t, workspace: *gsl_integration_workspace, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_integration_qagiu :: (f: *gsl_function, a: float64, epsabs: float64, epsrel: float64, limit: size_t, workspace: *gsl_integration_workspace, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_integration_qagil :: (f: *gsl_function, b: float64, epsabs: float64, epsrel: float64, limit: size_t, workspace: *gsl_integration_workspace, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_integration_qags :: (f: *gsl_function, a: float64, b: float64, epsabs: float64, epsrel: float64, limit: size_t, workspace: *gsl_integration_workspace, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_integration_qagp :: (f: *gsl_function, pts: *float64, npts: size_t, epsabs: float64, epsrel: float64, limit: size_t, workspace: *gsl_integration_workspace, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_integration_qawc :: (f: *gsl_function, a: float64, b: float64, c: float64, epsabs: float64, epsrel: float64, limit: size_t, workspace: *gsl_integration_workspace, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_integration_qaws :: (f: *gsl_function, a: float64, b: float64, t: *gsl_integration_qaws_table, epsabs: float64, epsrel: float64, limit: size_t, workspace: *gsl_integration_workspace, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_integration_qawo :: (f: *gsl_function, a: float64, epsabs: float64, epsrel: float64, limit: size_t, workspace: *gsl_integration_workspace, wf: *gsl_integration_qawo_table, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_integration_qawf :: (f: *gsl_function, a: float64, epsabs: float64, limit: size_t, workspace: *gsl_integration_workspace, cycle_workspace: *gsl_integration_workspace, wf: *gsl_integration_qawo_table, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

/* Workspace for fixed-order Gauss-Legendre integration */
gsl_integration_glfixed_table :: struct {
    n:           size_t; /* number of points */
    x:           *float64; /* Gauss abscissae/points */
    w:           *float64; /* Gauss weights for each abscissae */
    precomputed: s32; /* high precision abscissae/weights precomputed? */
}

gsl_integration_glfixed_table_alloc :: (n: size_t) -> *gsl_integration_glfixed_table #foreign libgsl;

gsl_integration_glfixed_table_free :: (t: *gsl_integration_glfixed_table) -> void #foreign libgsl;

/* Routine for fixed-order Gauss-Legendre integration */
gsl_integration_glfixed :: (f: *gsl_function, a: float64, b: float64, t: *gsl_integration_glfixed_table) -> float64 #foreign libgsl;

/* Routine to retrieve the i-th Gauss-Legendre point and weight from t */
gsl_integration_glfixed_point :: (a: float64, b: float64, i: size_t, xi: *float64, wi: *float64, t: *gsl_integration_glfixed_table) -> s32 #foreign libgsl;

/* Data of a single interval */
gsl_integration_cquad_ival :: struct {
    a:      float64;
    b:      float64;
    c:      [64] float64;
    fx:     [33] float64;
    igral:  float64;
    err:    float64;
    depth:  s32;
    rdepth: s32;
    ndiv:   s32;
}

/* The workspace is just a collection of intervals */
gsl_integration_cquad_workspace :: struct {
    size:  size_t;
    ivals: *gsl_integration_cquad_ival;
    heap:  *size_t;
}

gsl_integration_cquad_workspace_alloc :: (n: size_t) -> *gsl_integration_cquad_workspace #foreign libgsl;

gsl_integration_cquad_workspace_free :: (w: *gsl_integration_cquad_workspace) -> void #foreign libgsl;

gsl_integration_cquad :: (f: *gsl_function, a: float64, b: float64, epsabs: float64, epsrel: float64, ws: *gsl_integration_cquad_workspace, result: *float64, abserr: *float64, nevals: *size_t) -> s32 #foreign libgsl;

/* Romberg integration workspace and routines */
gsl_integration_romberg_workspace :: struct {
    n:     size_t; /* maximum number of steps */
    work1: *float64; /* workspace for a row of R matrix, size n */
    work2: *float64; /* workspace for a row of R matrix, size n */
}

gsl_integration_romberg_alloc :: (n: size_t) -> *gsl_integration_romberg_workspace #foreign libgsl;
gsl_integration_romberg_free :: (w: *gsl_integration_romberg_workspace) -> void #foreign libgsl;
gsl_integration_romberg :: (f: *gsl_function, a: float64, b: float64, epsabs: float64, epsrel: float64, result: *float64, neval: *size_t, w: *gsl_integration_romberg_workspace) -> s32 #foreign libgsl;

/* IQPACK related structures and routines */
gsl_integration_fixed_params :: struct {
    alpha: float64;
    beta:  float64;
    a:     float64;
    b:     float64;
    zemu:  float64;
    shft:  float64;
    slp:   float64;
    al:    float64;
    be:    float64;
}

gsl_integration_fixed_type :: struct {
    check: #type (n: size_t, params: *gsl_integration_fixed_params) -> s32 #c_call;
    init:  #type (n: size_t, diag: *float64, subdiag: *float64, params: *gsl_integration_fixed_params) -> s32 #c_call;
}

gsl_integration_fixed_workspace :: struct {
    n:       size_t; /* number of nodes/weights */
    weights: *float64; /* quadrature weights */
    x:       *float64; /* quadrature nodes */
    diag:    *float64; /* diagonal of Jacobi matrix */
    subdiag: *float64; /* subdiagonal of Jacobi matrix */
    type:    *gsl_integration_fixed_type;
}

/* IQPACK integral types */
gsl_integration_fixed_legendre: *gsl_integration_fixed_type #elsewhere libgsl;
gsl_integration_fixed_chebyshev: *gsl_integration_fixed_type #elsewhere libgsl;
gsl_integration_fixed_gegenbauer: *gsl_integration_fixed_type #elsewhere libgsl;
gsl_integration_fixed_jacobi: *gsl_integration_fixed_type #elsewhere libgsl;
gsl_integration_fixed_laguerre: *gsl_integration_fixed_type #elsewhere libgsl;
gsl_integration_fixed_hermite: *gsl_integration_fixed_type #elsewhere libgsl;
gsl_integration_fixed_exponential: *gsl_integration_fixed_type #elsewhere libgsl;
gsl_integration_fixed_rational: *gsl_integration_fixed_type #elsewhere libgsl;
gsl_integration_fixed_chebyshev2: *gsl_integration_fixed_type #elsewhere libgsl;

gsl_integration_fixed_alloc :: (type: *gsl_integration_fixed_type, n: size_t, a: float64, b: float64, alpha: float64, beta: float64) -> *gsl_integration_fixed_workspace #foreign libgsl;

gsl_integration_fixed_free :: (w: *gsl_integration_fixed_workspace) -> void #foreign libgsl;

gsl_integration_fixed_n :: (w: *gsl_integration_fixed_workspace) -> size_t #foreign libgsl;

gsl_integration_fixed_nodes :: (w: *gsl_integration_fixed_workspace) -> *float64 #foreign libgsl;

gsl_integration_fixed_weights :: (w: *gsl_integration_fixed_workspace) -> *float64 #foreign libgsl;

gsl_integration_fixed :: (func: *gsl_function, result: *float64, w: *gsl_integration_fixed_workspace) -> s32 #foreign libgsl;

gsl_monte_plain_state :: struct {
    dim: size_t;
    x:   *float64;
}

gsl_monte_plain_integrate :: (f: *gsl_monte_function, xl: *float64, xu: *float64, dim: size_t, calls: size_t, r: *gsl_rng, state: *gsl_monte_plain_state, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_monte_plain_alloc :: (dim: size_t) -> *gsl_monte_plain_state #foreign libgsl;

gsl_monte_plain_init :: (state: *gsl_monte_plain_state) -> s32 #foreign libgsl;

gsl_monte_plain_free :: (state: *gsl_monte_plain_state) -> void #foreign libgsl;

gsl_monte_miser_state :: struct {
    min_calls:               size_t;
    min_calls_per_bisection: size_t;
    dither:                  float64;
    estimate_frac:           float64;
    alpha:                   float64;
    dim:                     size_t;
    estimate_style:          s32;
    depth:                   s32;
    verbose:                 s32;
    x:                       *float64;
    xmid:                    *float64;
    sigma_l:                 *float64;
    sigma_r:                 *float64;
    fmax_l:                  *float64;
    fmax_r:                  *float64;
    fmin_l:                  *float64;
    fmin_r:                  *float64;
    fsum_l:                  *float64;
    fsum_r:                  *float64;
    fsum2_l:                 *float64;
    fsum2_r:                 *float64;
    hits_l:                  *size_t;
    hits_r:                  *size_t;
}

gsl_monte_miser_integrate :: (f: *gsl_monte_function, xl: *float64, xh: *float64, dim: size_t, calls: size_t, r: *gsl_rng, state: *gsl_monte_miser_state, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_monte_miser_alloc :: (dim: size_t) -> *gsl_monte_miser_state #foreign libgsl;

gsl_monte_miser_init :: (state: *gsl_monte_miser_state) -> s32 #foreign libgsl;

gsl_monte_miser_free :: (state: *gsl_monte_miser_state) -> void #foreign libgsl;

gsl_monte_miser_params :: struct {
    estimate_frac:           float64;
    min_calls:               size_t;
    min_calls_per_bisection: size_t;
    alpha:                   float64;
    dither:                  float64;
}

gsl_monte_miser_params_get :: (state: *gsl_monte_miser_state, params: *gsl_monte_miser_params) -> void #foreign libgsl;

gsl_monte_miser_params_set :: (state: *gsl_monte_miser_state, params: *gsl_monte_miser_params) -> void #foreign libgsl;

GSL_VEGAS_MODE :: enum s32 {
    IMPORTANCE      :: 1;
    IMPORTANCE_ONLY :: 0;
    STRATIFIED      :: -1;

    GSL_VEGAS_MODE_IMPORTANCE      :: IMPORTANCE;
    GSL_VEGAS_MODE_IMPORTANCE_ONLY :: IMPORTANCE_ONLY;
    GSL_VEGAS_MODE_STRATIFIED      :: STRATIFIED;
}

gsl_monte_vegas_state :: struct {
    /* grid */
    dim:           size_t;
    bins_max:      size_t;
    bins:          u32;
    boxes:         u32; /* these are both counted along the axes */
    xi:            *float64;
    xin:           *float64;
    delx:          *float64;
    weight:        *float64;
    vol:           float64;

    x:             *float64;
    bin:           *s32;
    box:           *s32;

    /* distribution */
    d:             *float64;

    /* control variables */
    alpha:         float64;
    mode:          s32;
    verbose:       s32;
    iterations:    u32;
    stage:         s32;

    /* scratch variables preserved between calls to vegas1/2/3  */
    jac:           float64;
    wtd_int_sum:   float64;
    sum_wgts:      float64;
    chi_sum:       float64;
    chisq:         float64;

    result:        float64;
    sigma:         float64;

    it_start:      u32;
    it_num:        u32;
    samples:       u32;
    calls_per_box: u32;

    ostream:       *FILE;
}

gsl_monte_vegas_integrate :: (f: *gsl_monte_function, xl: *float64, xu: *float64, dim: size_t, calls: size_t, r: *gsl_rng, state: *gsl_monte_vegas_state, result: *float64, abserr: *float64) -> s32 #foreign libgsl;

gsl_monte_vegas_alloc :: (dim: size_t) -> *gsl_monte_vegas_state #foreign libgsl;

gsl_monte_vegas_init :: (state: *gsl_monte_vegas_state) -> s32 #foreign libgsl;

gsl_monte_vegas_free :: (state: *gsl_monte_vegas_state) -> void #foreign libgsl;

gsl_monte_vegas_chisq :: (state: *gsl_monte_vegas_state) -> float64 #foreign libgsl;
gsl_monte_vegas_runval :: (state: *gsl_monte_vegas_state, result: *float64, sigma: *float64) -> void #foreign libgsl;

gsl_monte_vegas_params :: struct {
    alpha:      float64;
    iterations: size_t;
    stage:      s32;
    mode:       s32;
    verbose:    s32;
    ostream:    *FILE;
}

gsl_monte_vegas_params_get :: (state: *gsl_monte_vegas_state, params: *gsl_monte_vegas_params) -> void #foreign libgsl;

gsl_monte_vegas_params_set :: (state: *gsl_monte_vegas_state, params: *gsl_monte_vegas_params) -> void #foreign libgsl;

/* types for the function pointers passed to gsl_siman_solve */
gsl_siman_Efunc_t :: #type (xp: *void) -> float64 #c_call;
gsl_siman_step_t :: #type (r: *gsl_rng, xp: *void, step_size: float64) -> void #c_call;
gsl_siman_metric_t :: #type (xp: *void, yp: *void) -> float64 #c_call;
gsl_siman_print_t :: #type (xp: *void) -> void #c_call;
gsl_siman_copy_t :: #type (source: *void, dest: *void) -> void #c_call;
gsl_siman_copy_construct_t :: #type (xp: *void) -> *void #c_call;
gsl_siman_destroy_t :: #type (xp: *void) -> void #c_call;

/* this structure contains all the information needed to structure the
search, beyond the energy function, the step function and the
initial guess. */
gsl_siman_params_t :: struct {
    n_tries:       s32; /* how many points to try for each step */
    iters_fixed_T: s32; /* how many iterations at each temperature? */
    step_size:     float64; /* max step size in the random walk */

    /* the following parameters are for the Boltzmann distribution */
    k:             float64;
    /* the following parameters are for the Boltzmann distribution */
    t_initial:     float64;
    /* the following parameters are for the Boltzmann distribution */
    mu_t:          float64;
    /* the following parameters are for the Boltzmann distribution */
    t_min:         float64;
}

/* prototype for the workhorse function */
gsl_siman_solve :: (r: *gsl_rng, x0_p: *void, Ef: gsl_siman_Efunc_t, take_step: gsl_siman_step_t, distance: gsl_siman_metric_t, print_position: gsl_siman_print_t, copyfunc: gsl_siman_copy_t, copy_constructor: gsl_siman_copy_construct_t, destructor: gsl_siman_destroy_t, element_size: size_t, params: gsl_siman_params_t) -> void #foreign libgsl;

gsl_siman_solve_many :: (r: *gsl_rng, x0_p: *void, Ef: gsl_siman_Efunc_t, take_step: gsl_siman_step_t, distance: gsl_siman_metric_t, print_position: gsl_siman_print_t, element_size: size_t, params: gsl_siman_params_t) -> void #foreign libgsl;

/* Description of a system of ODEs.
*
* y' = f(t,y) = dydt(t, y)
*
* The system is specified by giving the right-hand-side
* of the equation and possibly a jacobian function.
*
* Some methods require the jacobian function, which calculates
* the matrix dfdy and the vector dfdt. The matrix dfdy conforms
* to the GSL standard, being a continuous range of floating point
* values, in row-order.
*
* As with GSL function objects, user-supplied parameter
* data is also present.
*/
gsl_odeiv_system :: struct {
    function:  #type (t: float64, y: *float64, dydt: *float64, params: *void) -> s32 #c_call;
    jacobian:  #type (t: float64, y: *float64, dfdy: *float64, dfdt: *float64, params: *void) -> s32 #c_call;
    dimension: size_t;
    params:    *void;
}

/* General stepper object.
*
* Opaque object for stepping an ODE system from t to t+h.
* In general the object has some state which facilitates
* iterating the stepping operation.
*/
gsl_odeiv_step_type :: struct {
    name:                 *u8;
    can_use_dydt_in:      s32;
    gives_exact_dydt_out: s32;
    alloc:                #type (dim: size_t) -> *void #c_call;
    apply:                #type (state: *void, dim: size_t, t: float64, h: float64, y: *float64, yerr: *float64, dydt_in: *float64, dydt_out: *float64, dydt: *gsl_odeiv_system) -> s32 #c_call;
    reset:                #type (state: *void, dim: size_t) -> s32 #c_call;
    order:                #type (state: *void) -> u32 #c_call;
    free:                 #type (state: *void) -> void #c_call;
}

gsl_odeiv_step :: struct {
    type:      *gsl_odeiv_step_type;
    dimension: size_t;
    state:     *void;
}

/* Available stepper types.
*
* rk2    : embedded 2nd(3rd) Runge-Kutta
* rk4    : 4th order (classical) Runge-Kutta
* rkck   : embedded 4th(5th) Runge-Kutta, Cash-Karp
* rk8pd  : embedded 8th(9th) Runge-Kutta, Prince-Dormand
* rk2imp : implicit 2nd order Runge-Kutta at Gaussian points
* rk4imp : implicit 4th order Runge-Kutta at Gaussian points
* gear1  : M=1 implicit Gear method
* gear2  : M=2 implicit Gear method
*/
gsl_odeiv_step_rk2: *gsl_odeiv_step_type #elsewhere libgsl;
gsl_odeiv_step_rk4: *gsl_odeiv_step_type #elsewhere libgsl;
gsl_odeiv_step_rkf45: *gsl_odeiv_step_type #elsewhere libgsl;
gsl_odeiv_step_rkck: *gsl_odeiv_step_type #elsewhere libgsl;
gsl_odeiv_step_rk8pd: *gsl_odeiv_step_type #elsewhere libgsl;
gsl_odeiv_step_rk2imp: *gsl_odeiv_step_type #elsewhere libgsl;
gsl_odeiv_step_rk2simp: *gsl_odeiv_step_type #elsewhere libgsl;
gsl_odeiv_step_rk4imp: *gsl_odeiv_step_type #elsewhere libgsl;
gsl_odeiv_step_bsimp: *gsl_odeiv_step_type #elsewhere libgsl;
gsl_odeiv_step_gear1: *gsl_odeiv_step_type #elsewhere libgsl;
gsl_odeiv_step_gear2: *gsl_odeiv_step_type #elsewhere libgsl;

/* Constructor for specialized stepper objects.
*/
gsl_odeiv_step_alloc :: (T: *gsl_odeiv_step_type, dim: size_t) -> *gsl_odeiv_step #foreign libgsl;
gsl_odeiv_step_reset :: (s: *gsl_odeiv_step) -> s32 #foreign libgsl;
gsl_odeiv_step_free :: (s: *gsl_odeiv_step) -> void #foreign libgsl;

/* General stepper object methods.
*/
gsl_odeiv_step_name :: (s: *gsl_odeiv_step) -> *u8 #foreign libgsl;
gsl_odeiv_step_order :: (s: *gsl_odeiv_step) -> u32 #foreign libgsl;

gsl_odeiv_step_apply :: (s: *gsl_odeiv_step, t: float64, h: float64, y: *float64, yerr: *float64, dydt_in: *float64, dydt_out: *float64, dydt: *gsl_odeiv_system) -> s32 #foreign libgsl;

/* General step size control object.
*
* The hadjust() method controls the adjustment of
* step size given the result of a step and the error.
* Valid hadjust() methods must return one of the codes below.
*
* The general data can be used by specializations
* to store state and control their heuristics.
*/
gsl_odeiv_control_type :: struct {
    name:    *u8;
    alloc:   #type () -> *void #c_call;
    init:    #type (state: *void, eps_abs: float64, eps_rel: float64, a_y: float64, a_dydt: float64) -> s32 #c_call;
    hadjust: #type (state: *void, dim: size_t, ord: u32, y: *float64, yerr: *float64, yp: *float64, h: *float64) -> s32 #c_call;
    free:    #type (state: *void) -> void #c_call;
}

gsl_odeiv_control :: struct {
    type:  *gsl_odeiv_control_type;
    state: *void;
}

gsl_odeiv_control_alloc :: (T: *gsl_odeiv_control_type) -> *gsl_odeiv_control #foreign libgsl;
gsl_odeiv_control_init :: (c: *gsl_odeiv_control, eps_abs: float64, eps_rel: float64, a_y: float64, a_dydt: float64) -> s32 #foreign libgsl;
gsl_odeiv_control_free :: (c: *gsl_odeiv_control) -> void #foreign libgsl;
gsl_odeiv_control_hadjust :: (c: *gsl_odeiv_control, s: *gsl_odeiv_step, y: *float64, yerr: *float64, dydt: *float64, h: *float64) -> s32 #foreign libgsl;
gsl_odeiv_control_name :: (c: *gsl_odeiv_control) -> *u8 #foreign libgsl;

/* Available control object constructors.
*
* The standard control object is a four parameter heuristic
* defined as follows:
*    D0 = eps_abs + eps_rel * (a_y |y| + a_dydt h |y'|)
*    D1 = |yerr|
*    q  = consistency order of method (q=4 for 4(5) embedded RK)
*    S  = safety factor (0.9 say)
*
*                      /  (D0/D1)^(1/(q+1))  D0 >= D1
*    h_NEW = S h_OLD * |
*                      \  (D0/D1)^(1/q)      D0 < D1
*
* This encompasses all the standard error scaling methods.
*
* The y method is the standard method with a_y=1, a_dydt=0.
* The yp method is the standard method with a_y=0, a_dydt=1.
*/
gsl_odeiv_control_standard_new :: (eps_abs: float64, eps_rel: float64, a_y: float64, a_dydt: float64) -> *gsl_odeiv_control #foreign libgsl;
gsl_odeiv_control_y_new :: (eps_abs: float64, eps_rel: float64) -> *gsl_odeiv_control #foreign libgsl;
gsl_odeiv_control_yp_new :: (eps_abs: float64, eps_rel: float64) -> *gsl_odeiv_control #foreign libgsl;

/* This controller computes errors using different absolute errors for
* each component
*
*    D0 = eps_abs * scale_abs[i] + eps_rel * (a_y |y| + a_dydt h |y'|)
*/
gsl_odeiv_control_scaled_new :: (eps_abs: float64, eps_rel: float64, a_y: float64, a_dydt: float64, scale_abs: *float64, dim: size_t) -> *gsl_odeiv_control #foreign libgsl;

/* General evolution object.
*/
gsl_odeiv_evolve :: struct {
    dimension:    size_t;
    y0:           *float64;
    yerr:         *float64;
    dydt_in:      *float64;
    dydt_out:     *float64;
    last_step:    float64;
    count:        u64;
    failed_steps: u64;
}

/* Evolution object methods.
*/
gsl_odeiv_evolve_alloc :: (dim: size_t) -> *gsl_odeiv_evolve #foreign libgsl;
gsl_odeiv_evolve_apply :: (e: *gsl_odeiv_evolve, con: *gsl_odeiv_control, step: *gsl_odeiv_step, dydt: *gsl_odeiv_system, t: *float64, t1: float64, h: *float64, y: *float64) -> s32 #foreign libgsl;
gsl_odeiv_evolve_reset :: (e: *gsl_odeiv_evolve) -> s32 #foreign libgsl;
gsl_odeiv_evolve_free :: (e: *gsl_odeiv_evolve) -> void #foreign libgsl;

gsl_root_fsolver_type :: struct {
    name:    *u8;
    size:    size_t;
    set:     #type (state: *void, f: *gsl_function, root: *float64, x_lower: float64, x_upper: float64) -> s32 #c_call;
    iterate: #type (state: *void, f: *gsl_function, root: *float64, x_lower: *float64, x_upper: *float64) -> s32 #c_call;
}

gsl_root_fsolver :: struct {
    type:     *gsl_root_fsolver_type;
    function: *gsl_function;
    root:     float64;
    x_lower:  float64;
    x_upper:  float64;
    state:    *void;
}

gsl_root_fdfsolver_type :: struct {
    name:    *u8;
    size:    size_t;
    set:     #type (state: *void, f: *gsl_function_fdf, root: *float64) -> s32 #c_call;
    iterate: #type (state: *void, f: *gsl_function_fdf, root: *float64) -> s32 #c_call;
}

gsl_root_fdfsolver :: struct {
    type:  *gsl_root_fdfsolver_type;
    fdf:   *gsl_function_fdf;
    root:  float64;
    state: *void;
}

gsl_root_fsolver_alloc :: (T: *gsl_root_fsolver_type) -> *gsl_root_fsolver #foreign libgsl;
gsl_root_fsolver_free :: (s: *gsl_root_fsolver) -> void #foreign libgsl;

gsl_root_fsolver_set :: (s: *gsl_root_fsolver, f: *gsl_function, x_lower: float64, x_upper: float64) -> s32 #foreign libgsl;

gsl_root_fsolver_iterate :: (s: *gsl_root_fsolver) -> s32 #foreign libgsl;

gsl_root_fsolver_name :: (s: *gsl_root_fsolver) -> *u8 #foreign libgsl;
gsl_root_fsolver_root :: (s: *gsl_root_fsolver) -> float64 #foreign libgsl;
gsl_root_fsolver_x_lower :: (s: *gsl_root_fsolver) -> float64 #foreign libgsl;
gsl_root_fsolver_x_upper :: (s: *gsl_root_fsolver) -> float64 #foreign libgsl;

gsl_root_fdfsolver_alloc :: (T: *gsl_root_fdfsolver_type) -> *gsl_root_fdfsolver #foreign libgsl;

gsl_root_fdfsolver_set :: (s: *gsl_root_fdfsolver, fdf: *gsl_function_fdf, root: float64) -> s32 #foreign libgsl;

gsl_root_fdfsolver_iterate :: (s: *gsl_root_fdfsolver) -> s32 #foreign libgsl;

gsl_root_fdfsolver_free :: (s: *gsl_root_fdfsolver) -> void #foreign libgsl;

gsl_root_fdfsolver_name :: (s: *gsl_root_fdfsolver) -> *u8 #foreign libgsl;
gsl_root_fdfsolver_root :: (s: *gsl_root_fdfsolver) -> float64 #foreign libgsl;

gsl_root_test_interval :: (x_lower: float64, x_upper: float64, epsabs: float64, epsrel: float64) -> s32 #foreign libgsl;

gsl_root_test_residual :: (f: float64, epsabs: float64) -> s32 #foreign libgsl;

gsl_root_test_delta :: (x1: float64, x0: float64, epsabs: float64, epsrel: float64) -> s32 #foreign libgsl;

gsl_root_fsolver_bisection: *gsl_root_fsolver_type #elsewhere libgsl;
gsl_root_fsolver_brent: *gsl_root_fsolver_type #elsewhere libgsl;
gsl_root_fsolver_falsepos: *gsl_root_fsolver_type #elsewhere libgsl;
gsl_root_fdfsolver_newton: *gsl_root_fdfsolver_type #elsewhere libgsl;
gsl_root_fdfsolver_secant: *gsl_root_fdfsolver_type #elsewhere libgsl;
gsl_root_fdfsolver_steffenson: *gsl_root_fdfsolver_type #elsewhere libgsl;

gsl_min_fminimizer_type :: struct {
    name:    *u8;
    size:    size_t;
    set:     #type (state: *void, f: *gsl_function, x_minimum: float64, f_minimum: float64, x_lower: float64, f_lower: float64, x_upper: float64, f_upper: float64) -> s32 #c_call;
    iterate: #type (state: *void, f: *gsl_function, x_minimum: *float64, f_minimum: *float64, x_lower: *float64, f_lower: *float64, x_upper: *float64, f_upper: *float64) -> s32 #c_call;
}

gsl_min_fminimizer :: struct {
    type:      *gsl_min_fminimizer_type;
    function:  *gsl_function;
    x_minimum: float64;
    x_lower:   float64;
    x_upper:   float64;
    f_minimum: float64;
    f_lower:   float64;
    f_upper:   float64;
    state:     *void;
}

gsl_min_fminimizer_alloc :: (T: *gsl_min_fminimizer_type) -> *gsl_min_fminimizer #foreign libgsl;

gsl_min_fminimizer_free :: (s: *gsl_min_fminimizer) -> void #foreign libgsl;

gsl_min_fminimizer_set :: (s: *gsl_min_fminimizer, f: *gsl_function, x_minimum: float64, x_lower: float64, x_upper: float64) -> s32 #foreign libgsl;

gsl_min_fminimizer_set_with_values :: (s: *gsl_min_fminimizer, f: *gsl_function, x_minimum: float64, f_minimum: float64, x_lower: float64, f_lower: float64, x_upper: float64, f_upper: float64) -> s32 #foreign libgsl;

gsl_min_fminimizer_iterate :: (s: *gsl_min_fminimizer) -> s32 #foreign libgsl;

gsl_min_fminimizer_name :: (s: *gsl_min_fminimizer) -> *u8 #foreign libgsl;

gsl_min_fminimizer_x_minimum :: (s: *gsl_min_fminimizer) -> float64 #foreign libgsl;
gsl_min_fminimizer_x_lower :: (s: *gsl_min_fminimizer) -> float64 #foreign libgsl;
gsl_min_fminimizer_x_upper :: (s: *gsl_min_fminimizer) -> float64 #foreign libgsl;
gsl_min_fminimizer_f_minimum :: (s: *gsl_min_fminimizer) -> float64 #foreign libgsl;
gsl_min_fminimizer_f_lower :: (s: *gsl_min_fminimizer) -> float64 #foreign libgsl;
gsl_min_fminimizer_f_upper :: (s: *gsl_min_fminimizer) -> float64 #foreign libgsl;

/* Deprecated, use x_minimum instead */
gsl_min_fminimizer_minimum :: (s: *gsl_min_fminimizer) -> float64 #foreign libgsl;

gsl_min_test_interval :: (x_lower: float64, x_upper: float64, epsabs: float64, epsrel: float64) -> s32 #foreign libgsl;

gsl_min_fminimizer_goldensection: *gsl_min_fminimizer_type #elsewhere libgsl;
gsl_min_fminimizer_brent: *gsl_min_fminimizer_type #elsewhere libgsl;
gsl_min_fminimizer_quad_golden: *gsl_min_fminimizer_type #elsewhere libgsl;

gsl_min_bracketing_function :: #type (f: *gsl_function, x_minimum: *float64, f_minimum: *float64, x_lower: *float64, f_lower: *float64, x_upper: *float64, f_upper: *float64, eval_max: size_t) -> s32 #c_call;

gsl_min_find_bracket :: (f: *gsl_function, x_minimum: *float64, f_minimum: *float64, x_lower: *float64, f_lower: *float64, x_upper: *float64, f_upper: *float64, eval_max: size_t) -> s32 #foreign libgsl;

/* Definition of vector-valued functions with parameters based on gsl_vector */
gsl_multiroot_function_struct :: struct {
    f:      #type (x: *gsl_vector, params: *void, f: *gsl_vector) -> s32 #c_call;
    n:      size_t;
    params: *void;
}

gsl_multiroot_function :: gsl_multiroot_function_struct;

gsl_multiroot_fdjacobian :: (F: *gsl_multiroot_function, x: *gsl_vector, f: *gsl_vector, epsrel: float64, jacobian: *gsl_matrix) -> s32 #foreign libgsl;

gsl_multiroot_fsolver_type :: struct {
    name:    *u8;
    size:    size_t;
    alloc:   #type (state: *void, n: size_t) -> s32 #c_call;
    set:     #type (state: *void, function: *gsl_multiroot_function, x: *gsl_vector, f: *gsl_vector, dx: *gsl_vector) -> s32 #c_call;
    iterate: #type (state: *void, function: *gsl_multiroot_function, x: *gsl_vector, f: *gsl_vector, dx: *gsl_vector) -> s32 #c_call;
    free:    #type (state: *void) -> void #c_call;
}

gsl_multiroot_fsolver :: struct {
    type:     *gsl_multiroot_fsolver_type;
    function: *gsl_multiroot_function;
    x:        *gsl_vector;
    f:        *gsl_vector;
    dx:       *gsl_vector;
    state:    *void;
}

gsl_multiroot_fsolver_alloc :: (T: *gsl_multiroot_fsolver_type, n: size_t) -> *gsl_multiroot_fsolver #foreign libgsl;

gsl_multiroot_fsolver_free :: (s: *gsl_multiroot_fsolver) -> void #foreign libgsl;

gsl_multiroot_fsolver_set :: (s: *gsl_multiroot_fsolver, f: *gsl_multiroot_function, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_multiroot_fsolver_iterate :: (s: *gsl_multiroot_fsolver) -> s32 #foreign libgsl;

gsl_multiroot_fsolver_name :: (s: *gsl_multiroot_fsolver) -> *u8 #foreign libgsl;
gsl_multiroot_fsolver_root :: (s: *gsl_multiroot_fsolver) -> *gsl_vector #foreign libgsl;
gsl_multiroot_fsolver_dx :: (s: *gsl_multiroot_fsolver) -> *gsl_vector #foreign libgsl;
gsl_multiroot_fsolver_f :: (s: *gsl_multiroot_fsolver) -> *gsl_vector #foreign libgsl;

/* Definition of vector-valued functions and gradient with parameters
based on gsl_vector */
gsl_multiroot_function_fdf_struct :: struct {
    f:      #type (x: *gsl_vector, params: *void, f: *gsl_vector) -> s32 #c_call;
    df:     #type (x: *gsl_vector, params: *void, df: *gsl_matrix) -> s32 #c_call;
    fdf:    #type (x: *gsl_vector, params: *void, f: *gsl_vector, df: *gsl_matrix) -> s32 #c_call;
    n:      size_t;
    params: *void;
}

gsl_multiroot_function_fdf :: gsl_multiroot_function_fdf_struct;

gsl_multiroot_fdfsolver_type :: struct {
    name:    *u8;
    size:    size_t;
    alloc:   #type (state: *void, n: size_t) -> s32 #c_call;
    set:     #type (state: *void, fdf: *gsl_multiroot_function_fdf, x: *gsl_vector, f: *gsl_vector, J: *gsl_matrix, dx: *gsl_vector) -> s32 #c_call;
    iterate: #type (state: *void, fdf: *gsl_multiroot_function_fdf, x: *gsl_vector, f: *gsl_vector, J: *gsl_matrix, dx: *gsl_vector) -> s32 #c_call;
    free:    #type (state: *void) -> void #c_call;
}

gsl_multiroot_fdfsolver :: struct {
    type:  *gsl_multiroot_fdfsolver_type;
    fdf:   *gsl_multiroot_function_fdf;
    x:     *gsl_vector;
    f:     *gsl_vector;
    J:     *gsl_matrix;
    dx:    *gsl_vector;
    state: *void;
}

gsl_multiroot_fdfsolver_alloc :: (T: *gsl_multiroot_fdfsolver_type, n: size_t) -> *gsl_multiroot_fdfsolver #foreign libgsl;

gsl_multiroot_fdfsolver_set :: (s: *gsl_multiroot_fdfsolver, fdf: *gsl_multiroot_function_fdf, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_multiroot_fdfsolver_iterate :: (s: *gsl_multiroot_fdfsolver) -> s32 #foreign libgsl;

gsl_multiroot_fdfsolver_free :: (s: *gsl_multiroot_fdfsolver) -> void #foreign libgsl;

gsl_multiroot_fdfsolver_name :: (s: *gsl_multiroot_fdfsolver) -> *u8 #foreign libgsl;
gsl_multiroot_fdfsolver_root :: (s: *gsl_multiroot_fdfsolver) -> *gsl_vector #foreign libgsl;
gsl_multiroot_fdfsolver_dx :: (s: *gsl_multiroot_fdfsolver) -> *gsl_vector #foreign libgsl;
gsl_multiroot_fdfsolver_f :: (s: *gsl_multiroot_fdfsolver) -> *gsl_vector #foreign libgsl;

gsl_multiroot_test_delta :: (dx: *gsl_vector, x: *gsl_vector, epsabs: float64, epsrel: float64) -> s32 #foreign libgsl;

gsl_multiroot_test_residual :: (f: *gsl_vector, epsabs: float64) -> s32 #foreign libgsl;

gsl_multiroot_fsolver_dnewton: *gsl_multiroot_fsolver_type #elsewhere libgsl;
gsl_multiroot_fsolver_broyden: *gsl_multiroot_fsolver_type #elsewhere libgsl;
gsl_multiroot_fsolver_hybrid: *gsl_multiroot_fsolver_type #elsewhere libgsl;
gsl_multiroot_fsolver_hybrids: *gsl_multiroot_fsolver_type #elsewhere libgsl;

gsl_multiroot_fdfsolver_newton: *gsl_multiroot_fdfsolver_type #elsewhere libgsl;
gsl_multiroot_fdfsolver_gnewton: *gsl_multiroot_fdfsolver_type #elsewhere libgsl;
gsl_multiroot_fdfsolver_hybridj: *gsl_multiroot_fdfsolver_type #elsewhere libgsl;
gsl_multiroot_fdfsolver_hybridsj: *gsl_multiroot_fdfsolver_type #elsewhere libgsl;

/* Definition of an arbitrary real-valued function with gsl_vector input and */
/* parameters */
gsl_multimin_function_struct :: struct {
    f:      #type (x: *gsl_vector, params: *void) -> float64 #c_call;
    n:      size_t;
    params: *void;
}

gsl_multimin_function :: gsl_multimin_function_struct;

/* Definition of an arbitrary differentiable real-valued function */
/* with gsl_vector input and parameters */
gsl_multimin_function_fdf_struct :: struct {
    f:      #type (x: *gsl_vector, params: *void) -> float64 #c_call;
    df:     #type (x: *gsl_vector, params: *void, df: *gsl_vector) -> void #c_call;
    fdf:    #type (x: *gsl_vector, params: *void, f: *float64, df: *gsl_vector) -> void #c_call;
    n:      size_t;
    params: *void;
}

gsl_multimin_function_fdf :: gsl_multimin_function_fdf_struct;

gsl_multimin_diff :: (f: *gsl_multimin_function, x: *gsl_vector, g: *gsl_vector) -> s32 #foreign libgsl;

/* minimization of non-differentiable functions */
gsl_multimin_fminimizer_type :: struct {
    name:    *u8;
    size:    size_t;
    alloc:   #type (state: *void, n: size_t) -> s32 #c_call;
    set:     #type (state: *void, f: *gsl_multimin_function, x: *gsl_vector, size: *float64, step_size: *gsl_vector) -> s32 #c_call;

    iterate: #type (state: *void, f: *gsl_multimin_function, x: *gsl_vector, size: *float64, fval: *float64) -> s32 #c_call;

    free:    #type (state: *void) -> void #c_call;
}

gsl_multimin_fminimizer :: struct {
    /* multi dimensional part */
    type:  *gsl_multimin_fminimizer_type;
    f:     *gsl_multimin_function;

    fval:  float64;
    x:     *gsl_vector;

    size:  float64;

    state: *void;
}

gsl_multimin_fminimizer_alloc :: (T: *gsl_multimin_fminimizer_type, n: size_t) -> *gsl_multimin_fminimizer #foreign libgsl;

gsl_multimin_fminimizer_set :: (s: *gsl_multimin_fminimizer, f: *gsl_multimin_function, x: *gsl_vector, step_size: *gsl_vector) -> s32 #foreign libgsl;

gsl_multimin_fminimizer_free :: (s: *gsl_multimin_fminimizer) -> void #foreign libgsl;

gsl_multimin_fminimizer_name :: (s: *gsl_multimin_fminimizer) -> *u8 #foreign libgsl;

gsl_multimin_fminimizer_iterate :: (s: *gsl_multimin_fminimizer) -> s32 #foreign libgsl;

gsl_multimin_fminimizer_x :: (s: *gsl_multimin_fminimizer) -> *gsl_vector #foreign libgsl;

gsl_multimin_fminimizer_minimum :: (s: *gsl_multimin_fminimizer) -> float64 #foreign libgsl;

gsl_multimin_fminimizer_size :: (s: *gsl_multimin_fminimizer) -> float64 #foreign libgsl;

/* Convergence test functions */
gsl_multimin_test_gradient :: (g: *gsl_vector, epsabs: float64) -> s32 #foreign libgsl;

gsl_multimin_test_size :: (size: float64, epsabs: float64) -> s32 #foreign libgsl;

/* minimisation of differentiable functions */
gsl_multimin_fdfminimizer_type :: struct {
    name:    *u8;
    size:    size_t;
    alloc:   #type (state: *void, n: size_t) -> s32 #c_call;
    set:     #type (state: *void, fdf: *gsl_multimin_function_fdf, x: *gsl_vector, f: *float64, gradient: *gsl_vector, step_size: float64, tol: float64) -> s32 #c_call;

    iterate: #type (state: *void, fdf: *gsl_multimin_function_fdf, x: *gsl_vector, f: *float64, gradient: *gsl_vector, dx: *gsl_vector) -> s32 #c_call;

    restart: #type (state: *void) -> s32 #c_call;
    free:    #type (state: *void) -> void #c_call;
}

gsl_multimin_fdfminimizer :: struct {
    /* multi dimensional part */
    type:     *gsl_multimin_fdfminimizer_type;
    fdf:      *gsl_multimin_function_fdf;

    f:        float64;
    x:        *gsl_vector;
    gradient: *gsl_vector;
    dx:       *gsl_vector;

    state:    *void;
}

gsl_multimin_fdfminimizer_alloc :: (T: *gsl_multimin_fdfminimizer_type, n: size_t) -> *gsl_multimin_fdfminimizer #foreign libgsl;

gsl_multimin_fdfminimizer_set :: (s: *gsl_multimin_fdfminimizer, fdf: *gsl_multimin_function_fdf, x: *gsl_vector, step_size: float64, tol: float64) -> s32 #foreign libgsl;

gsl_multimin_fdfminimizer_free :: (s: *gsl_multimin_fdfminimizer) -> void #foreign libgsl;

gsl_multimin_fdfminimizer_name :: (s: *gsl_multimin_fdfminimizer) -> *u8 #foreign libgsl;

gsl_multimin_fdfminimizer_iterate :: (s: *gsl_multimin_fdfminimizer) -> s32 #foreign libgsl;

gsl_multimin_fdfminimizer_restart :: (s: *gsl_multimin_fdfminimizer) -> s32 #foreign libgsl;

gsl_multimin_fdfminimizer_x :: (s: *gsl_multimin_fdfminimizer) -> *gsl_vector #foreign libgsl;

gsl_multimin_fdfminimizer_dx :: (s: *gsl_multimin_fdfminimizer) -> *gsl_vector #foreign libgsl;

gsl_multimin_fdfminimizer_gradient :: (s: *gsl_multimin_fdfminimizer) -> *gsl_vector #foreign libgsl;

gsl_multimin_fdfminimizer_minimum :: (s: *gsl_multimin_fdfminimizer) -> float64 #foreign libgsl;

gsl_multimin_fdfminimizer_steepest_descent: *gsl_multimin_fdfminimizer_type #elsewhere libgsl;
gsl_multimin_fdfminimizer_conjugate_pr: *gsl_multimin_fdfminimizer_type #elsewhere libgsl;
gsl_multimin_fdfminimizer_conjugate_fr: *gsl_multimin_fdfminimizer_type #elsewhere libgsl;
gsl_multimin_fdfminimizer_vector_bfgs: *gsl_multimin_fdfminimizer_type #elsewhere libgsl;
gsl_multimin_fdfminimizer_vector_bfgs2: *gsl_multimin_fdfminimizer_type #elsewhere libgsl;
gsl_multimin_fminimizer_nmsimplex: *gsl_multimin_fminimizer_type #elsewhere libgsl;
gsl_multimin_fminimizer_nmsimplex2: *gsl_multimin_fminimizer_type #elsewhere libgsl;
gsl_multimin_fminimizer_nmsimplex2rand: *gsl_multimin_fminimizer_type #elsewhere libgsl;

gsl_fit_linear :: (x: *float64, xstride: size_t, y: *float64, ystride: size_t, n: size_t, c0: *float64, c1: *float64, cov00: *float64, cov01: *float64, cov11: *float64, sumsq: *float64) -> s32 #foreign libgsl;

gsl_fit_wlinear :: (x: *float64, xstride: size_t, w: *float64, wstride: size_t, y: *float64, ystride: size_t, n: size_t, c0: *float64, c1: *float64, cov00: *float64, cov01: *float64, cov11: *float64, chisq: *float64) -> s32 #foreign libgsl;

gsl_fit_linear_est :: (x: float64, c0: float64, c1: float64, cov00: float64, cov01: float64, cov11: float64, y: *float64, y_err: *float64) -> s32 #foreign libgsl;

gsl_fit_mul :: (x: *float64, xstride: size_t, y: *float64, ystride: size_t, n: size_t, c1: *float64, cov11: *float64, sumsq: *float64) -> s32 #foreign libgsl;

gsl_fit_wmul :: (x: *float64, xstride: size_t, w: *float64, wstride: size_t, y: *float64, ystride: size_t, n: size_t, c1: *float64, cov11: *float64, sumsq: *float64) -> s32 #foreign libgsl;

gsl_fit_mul_est :: (x: float64, c1: float64, cov11: float64, y: *float64, y_err: *float64) -> s32 #foreign libgsl;

gsl_multifit_gradient :: (J: *gsl_matrix, f: *gsl_vector, g: *gsl_vector) -> s32 #foreign libgsl;

gsl_multifit_covar :: (J: *gsl_matrix, epsrel: float64, covar: *gsl_matrix) -> s32 #foreign libgsl;
gsl_multifit_covar_QRPT :: (r: *gsl_matrix, perm: *gsl_permutation, epsrel: float64, covar: *gsl_matrix) -> s32 #foreign libgsl;

/* Definition of vector-valued functions with parameters based on gsl_vector */
gsl_multifit_function_struct :: struct {
    f:      #type (x: *gsl_vector, params: *void, f: *gsl_vector) -> s32 #c_call;
    n:      size_t; /* number of functions */
    p:      size_t; /* number of independent variables */
    params: *void;
}

gsl_multifit_function :: gsl_multifit_function_struct;

gsl_multifit_fsolver_type :: struct {
    name:    *u8;
    size:    size_t;
    alloc:   #type (state: *void, n: size_t, p: size_t) -> s32 #c_call;
    set:     #type (state: *void, function: *gsl_multifit_function, x: *gsl_vector, f: *gsl_vector, dx: *gsl_vector) -> s32 #c_call;
    iterate: #type (state: *void, function: *gsl_multifit_function, x: *gsl_vector, f: *gsl_vector, dx: *gsl_vector) -> s32 #c_call;
    free:    #type (state: *void) -> void #c_call;
}

gsl_multifit_fsolver :: struct {
    type:     *gsl_multifit_fsolver_type;
    function: *gsl_multifit_function;
    x:        *gsl_vector;
    f:        *gsl_vector;
    dx:       *gsl_vector;
    state:    *void;
}

gsl_multifit_fsolver_alloc :: (T: *gsl_multifit_fsolver_type, n: size_t, p: size_t) -> *gsl_multifit_fsolver #foreign libgsl;

gsl_multifit_fsolver_free :: (s: *gsl_multifit_fsolver) -> void #foreign libgsl;

gsl_multifit_fsolver_set :: (s: *gsl_multifit_fsolver, f: *gsl_multifit_function, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_multifit_fsolver_iterate :: (s: *gsl_multifit_fsolver) -> s32 #foreign libgsl;

gsl_multifit_fsolver_driver :: (s: *gsl_multifit_fsolver, maxiter: size_t, epsabs: float64, epsrel: float64) -> s32 #foreign libgsl;

gsl_multifit_fsolver_name :: (s: *gsl_multifit_fsolver) -> *u8 #foreign libgsl;
gsl_multifit_fsolver_position :: (s: *gsl_multifit_fsolver) -> *gsl_vector #foreign libgsl;

/* Definition of vector-valued functions and gradient with parameters
based on gsl_vector */
gsl_multifit_function_fdf_struct :: struct {
    f:       #type (x: *gsl_vector, params: *void, f: *gsl_vector) -> s32 #c_call;
    df:      #type (x: *gsl_vector, params: *void, df: *gsl_matrix) -> s32 #c_call;
    fdf:     #type (x: *gsl_vector, params: *void, f: *gsl_vector, df: *gsl_matrix) -> s32 #c_call;
    n:       size_t; /* number of functions */
    p:       size_t; /* number of independent variables */
    params:  *void; /* user parameters */
    nevalf:  size_t; /* number of function evaluations */
    nevaldf: size_t; /* number of Jacobian evaluations */
}

gsl_multifit_function_fdf :: gsl_multifit_function_fdf_struct;

gsl_multifit_fdfsolver_type :: struct {
    name:     *u8;
    size:     size_t;
    alloc:    #type (state: *void, n: size_t, p: size_t) -> s32 #c_call;
    set:      #type (state: *void, wts: *gsl_vector, fdf: *gsl_multifit_function_fdf, x: *gsl_vector, f: *gsl_vector, dx: *gsl_vector) -> s32 #c_call;

    iterate:  #type (state: *void, wts: *gsl_vector, fdf: *gsl_multifit_function_fdf, x: *gsl_vector, f: *gsl_vector, dx: *gsl_vector) -> s32 #c_call;

    gradient: #type (state: *void, g: *gsl_vector) -> s32 #c_call;
    jac:      #type (state: *void, J: *gsl_matrix) -> s32 #c_call;
    free:     #type (state: *void) -> void #c_call;
}

gsl_multifit_fdfsolver :: struct {
    type:     *gsl_multifit_fdfsolver_type;
    fdf:      *gsl_multifit_function_fdf;
    x:        *gsl_vector; /* parameter values x */
    f:        *gsl_vector; /* residual vector f(x) */
    dx:       *gsl_vector; /* step dx */
    g:        *gsl_vector; /* gradient J^T f */
    sqrt_wts: *gsl_vector; /* sqrt(wts) */
    niter:    size_t; /* number of iterations performed */
    state:    *void;
}

gsl_multifit_fdfsolver_alloc :: (T: *gsl_multifit_fdfsolver_type, n: size_t, p: size_t) -> *gsl_multifit_fdfsolver #foreign libgsl;

gsl_multifit_fdfsolver_set :: (s: *gsl_multifit_fdfsolver, fdf: *gsl_multifit_function_fdf, x: *gsl_vector) -> s32 #foreign libgsl;

gsl_multifit_fdfsolver_wset :: (s: *gsl_multifit_fdfsolver, f: *gsl_multifit_function_fdf, x: *gsl_vector, wts: *gsl_vector) -> s32 #foreign libgsl;

gsl_multifit_fdfsolver_iterate :: (s: *gsl_multifit_fdfsolver) -> s32 #foreign libgsl;

gsl_multifit_fdfsolver_driver :: (s: *gsl_multifit_fdfsolver, maxiter: size_t, xtol: float64, gtol: float64, ftol: float64, info: *s32) -> s32 #foreign libgsl;

gsl_multifit_fdfsolver_jac :: (s: *gsl_multifit_fdfsolver, J: *gsl_matrix) -> s32 #foreign libgsl;

gsl_multifit_fdfsolver_free :: (s: *gsl_multifit_fdfsolver) -> void #foreign libgsl;

gsl_multifit_fdfsolver_name :: (s: *gsl_multifit_fdfsolver) -> *u8 #foreign libgsl;
gsl_multifit_fdfsolver_position :: (s: *gsl_multifit_fdfsolver) -> *gsl_vector #foreign libgsl;
gsl_multifit_fdfsolver_residual :: (s: *gsl_multifit_fdfsolver) -> *gsl_vector #foreign libgsl;
gsl_multifit_fdfsolver_niter :: (s: *gsl_multifit_fdfsolver) -> size_t #foreign libgsl;
gsl_multifit_eval_wf :: (fdf: *gsl_multifit_function_fdf, x: *gsl_vector, wts: *gsl_vector, y: *gsl_vector) -> s32 #foreign libgsl;

gsl_multifit_eval_wdf :: (fdf: *gsl_multifit_function_fdf, x: *gsl_vector, wts: *gsl_vector, dy: *gsl_matrix) -> s32 #foreign libgsl;

gsl_multifit_fdfsolver_test :: (s: *gsl_multifit_fdfsolver, xtol: float64, gtol: float64, ftol: float64, info: *s32) -> s32 #foreign libgsl;

gsl_multifit_test_delta :: (dx: *gsl_vector, x: *gsl_vector, epsabs: float64, epsrel: float64) -> s32 #foreign libgsl;

gsl_multifit_test_gradient :: (g: *gsl_vector, epsabs: float64) -> s32 #foreign libgsl;

gsl_multifit_fdfsolver_dif_df :: (x: *gsl_vector, wts: *gsl_vector, fdf: *gsl_multifit_function_fdf, f: *gsl_vector, J: *gsl_matrix) -> s32 #foreign libgsl;

gsl_multifit_fdfsolver_dif_fdf :: (x: *gsl_vector, fdf: *gsl_multifit_function_fdf, f: *gsl_vector, J: *gsl_matrix) -> s32 #foreign libgsl;

gsl_multifit_fdfridge :: struct {
    n:      size_t; /* number of (original) residuals */
    p:      size_t; /* number of model parameters */
    lambda: float64; /* damping parameter */
    L_diag: *gsl_vector; /* diagonal damping matrix or NULL */
    L:      *gsl_matrix; /* general damping matrix or NULL */
    f:      *gsl_vector; /* function values for finite diff J */
    wts:    *gsl_vector; /* weight vector for augmented system */
    s:      *gsl_multifit_fdfsolver;
    fdf:    *gsl_multifit_function_fdf; /* user defined fdf */
    fdftik: gsl_multifit_function_fdf; /* Tikhonov modified fdf */
}

gsl_multifit_fdfridge_alloc :: (T: *gsl_multifit_fdfsolver_type, n: size_t, p: size_t) -> *gsl_multifit_fdfridge #foreign libgsl;

gsl_multifit_fdfridge_free :: (work: *gsl_multifit_fdfridge) -> void #foreign libgsl;
gsl_multifit_fdfridge_name :: (w: *gsl_multifit_fdfridge) -> *u8 #foreign libgsl;
gsl_multifit_fdfridge_position :: (w: *gsl_multifit_fdfridge) -> *gsl_vector #foreign libgsl;
gsl_multifit_fdfridge_residual :: (w: *gsl_multifit_fdfridge) -> *gsl_vector #foreign libgsl;
gsl_multifit_fdfridge_niter :: (w: *gsl_multifit_fdfridge) -> size_t #foreign libgsl;
gsl_multifit_fdfridge_set :: (w: *gsl_multifit_fdfridge, f: *gsl_multifit_function_fdf, x: *gsl_vector, lambda: float64) -> s32 #foreign libgsl;

gsl_multifit_fdfridge_wset :: (w: *gsl_multifit_fdfridge, f: *gsl_multifit_function_fdf, x: *gsl_vector, lambda: float64, wts: *gsl_vector) -> s32 #foreign libgsl;

gsl_multifit_fdfridge_set2 :: (w: *gsl_multifit_fdfridge, f: *gsl_multifit_function_fdf, x: *gsl_vector, lambda: *gsl_vector) -> s32 #foreign libgsl;

gsl_multifit_fdfridge_wset2 :: (w: *gsl_multifit_fdfridge, f: *gsl_multifit_function_fdf, x: *gsl_vector, lambda: *gsl_vector, wts: *gsl_vector) -> s32 #foreign libgsl;

gsl_multifit_fdfridge_set3 :: (w: *gsl_multifit_fdfridge, f: *gsl_multifit_function_fdf, x: *gsl_vector, L: *gsl_matrix) -> s32 #foreign libgsl;

gsl_multifit_fdfridge_wset3 :: (w: *gsl_multifit_fdfridge, f: *gsl_multifit_function_fdf, x: *gsl_vector, L: *gsl_matrix, wts: *gsl_vector) -> s32 #foreign libgsl;

gsl_multifit_fdfridge_iterate :: (w: *gsl_multifit_fdfridge) -> s32 #foreign libgsl;
gsl_multifit_fdfridge_driver :: (w: *gsl_multifit_fdfridge, maxiter: size_t, xtol: float64, gtol: float64, ftol: float64, info: *s32) -> s32 #foreign libgsl;

/* extern const gsl_multifit_fsolver_type * gsl_multifit_fsolver_gradient; */
gsl_multifit_fdfsolver_lmsder: *gsl_multifit_fdfsolver_type #elsewhere libgsl;
gsl_multifit_fdfsolver_lmder: *gsl_multifit_fdfsolver_type #elsewhere libgsl;
gsl_multifit_fdfsolver_lmniel: *gsl_multifit_fdfsolver_type #elsewhere libgsl;

GSL_IEEE_TYPE :: enum u32 {
    NAN      :: 1;
    INF      :: 2;
    NORMAL   :: 3;
    DENORMAL :: 4;
    ZERO     :: 5;

    GSL_IEEE_TYPE_NAN      :: NAN;
    GSL_IEEE_TYPE_INF      :: INF;
    GSL_IEEE_TYPE_NORMAL   :: NORMAL;
    GSL_IEEE_TYPE_DENORMAL :: DENORMAL;
    GSL_IEEE_TYPE_ZERO     :: ZERO;
}

gsl_ieee_float_rep :: struct {
    sign:     s32;
    mantissa: [24] u8; /* Actual bits are 0..22, element 23 is \0 */
    exponent: s32;
    type:     s32;
}

gsl_ieee_double_rep :: struct {
    sign:     s32;
    mantissa: [53] u8; /* Actual bits are 0..51, element 52 is \0 */
    exponent: s32;
    type:     s32;
}

gsl_ieee_printf_float :: (x: *float) -> void #foreign libgsl;
gsl_ieee_printf_double :: (x: *float64) -> void #foreign libgsl;

gsl_ieee_fprintf_float :: (stream: *FILE, x: *float) -> void #foreign libgsl;
gsl_ieee_fprintf_double :: (stream: *FILE, x: *float64) -> void #foreign libgsl;

gsl_ieee_float_to_rep :: (x: *float, r: *gsl_ieee_float_rep) -> void #foreign libgsl;
gsl_ieee_double_to_rep :: (x: *float64, r: *gsl_ieee_double_rep) -> void #foreign libgsl;

GSL_IEEE :: enum u32 {
    SINGLE_PRECISION   :: 1;
    DOUBLE_PRECISION   :: 2;
    EXTENDED_PRECISION :: 3;

    GSL_IEEE_SINGLE_PRECISION   :: SINGLE_PRECISION;
    GSL_IEEE_DOUBLE_PRECISION   :: DOUBLE_PRECISION;
    GSL_IEEE_EXTENDED_PRECISION :: EXTENDED_PRECISION;
}

GSL_IEEE_ROUND :: enum u32 {
    TO_NEAREST :: 1;
    DOWN       :: 2;
    UP         :: 3;
    TO_ZERO    :: 4;

    GSL_IEEE_ROUND_TO_NEAREST :: TO_NEAREST;
    GSL_IEEE_ROUND_DOWN       :: DOWN;
    GSL_IEEE_ROUND_UP         :: UP;
    GSL_IEEE_ROUND_TO_ZERO    :: TO_ZERO;
}

GSL_IEEE_1 :: enum u32 {
    MASK_INVALID          :: 1;
    MASK_DENORMALIZED     :: 2;
    MASK_DIVISION_BY_ZERO :: 4;
    MASK_OVERFLOW         :: 8;
    MASK_UNDERFLOW        :: 16;
    MASK_ALL              :: 31;
    TRAP_INEXACT          :: 32;

    GSL_IEEE_MASK_INVALID          :: MASK_INVALID;
    GSL_IEEE_MASK_DENORMALIZED     :: MASK_DENORMALIZED;
    GSL_IEEE_MASK_DIVISION_BY_ZERO :: MASK_DIVISION_BY_ZERO;
    GSL_IEEE_MASK_OVERFLOW         :: MASK_OVERFLOW;
    GSL_IEEE_MASK_UNDERFLOW        :: MASK_UNDERFLOW;
    GSL_IEEE_MASK_ALL              :: MASK_ALL;
    GSL_IEEE_TRAP_INEXACT          :: TRAP_INEXACT;
}

gsl_ieee_env_setup :: () -> void #foreign libgsl;
gsl_ieee_read_mode_string :: (description: *u8, precision: *s32, rounding: *s32, exception_mask: *s32) -> s32 #foreign libgsl;

gsl_ieee_set_mode :: (precision: s32, rounding: s32, exception_mask: s32) -> s32 #foreign libgsl;

#scope_file

#import "Basic"; // For assert

libgsl :: #system_library "libgsl";
libgslcblas :: #system_library "libgslcblas";

#run {
    {
        instance: gsl_function_struct;
        assert(((cast(*void)(*instance.function)) - cast(*void)(*instance)) == 0, "gsl_function_struct.function has unexpected offset % instead of 0", ((cast(*void)(*instance.function)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_function_struct.function)) == 8, "gsl_function_struct.function has unexpected size % instead of 8", size_of(type_of(gsl_function_struct.function)));
        assert(((cast(*void)(*instance.params)) - cast(*void)(*instance)) == 8, "gsl_function_struct.params has unexpected offset % instead of 8", ((cast(*void)(*instance.params)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_function_struct.params)) == 8, "gsl_function_struct.params has unexpected size % instead of 8", size_of(type_of(gsl_function_struct.params)));
        assert(size_of(gsl_function_struct) == 16, "gsl_function_struct has size % instead of 16", size_of(gsl_function_struct));
    }

    {
        instance: gsl_function_fdf_struct;
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 0, "gsl_function_fdf_struct.f has unexpected offset % instead of 0", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_function_fdf_struct.f)) == 8, "gsl_function_fdf_struct.f has unexpected size % instead of 8", size_of(type_of(gsl_function_fdf_struct.f)));
        assert(((cast(*void)(*instance.df)) - cast(*void)(*instance)) == 8, "gsl_function_fdf_struct.df has unexpected offset % instead of 8", ((cast(*void)(*instance.df)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_function_fdf_struct.df)) == 8, "gsl_function_fdf_struct.df has unexpected size % instead of 8", size_of(type_of(gsl_function_fdf_struct.df)));
        assert(((cast(*void)(*instance.fdf)) - cast(*void)(*instance)) == 16, "gsl_function_fdf_struct.fdf has unexpected offset % instead of 16", ((cast(*void)(*instance.fdf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_function_fdf_struct.fdf)) == 8, "gsl_function_fdf_struct.fdf has unexpected size % instead of 8", size_of(type_of(gsl_function_fdf_struct.fdf)));
        assert(((cast(*void)(*instance.params)) - cast(*void)(*instance)) == 24, "gsl_function_fdf_struct.params has unexpected offset % instead of 24", ((cast(*void)(*instance.params)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_function_fdf_struct.params)) == 8, "gsl_function_fdf_struct.params has unexpected size % instead of 8", size_of(type_of(gsl_function_fdf_struct.params)));
        assert(size_of(gsl_function_fdf_struct) == 32, "gsl_function_fdf_struct has size % instead of 32", size_of(gsl_function_fdf_struct));
    }

    {
        instance: gsl_function_vec_struct;
        assert(((cast(*void)(*instance.function)) - cast(*void)(*instance)) == 0, "gsl_function_vec_struct.function has unexpected offset % instead of 0", ((cast(*void)(*instance.function)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_function_vec_struct.function)) == 8, "gsl_function_vec_struct.function has unexpected size % instead of 8", size_of(type_of(gsl_function_vec_struct.function)));
        assert(((cast(*void)(*instance.params)) - cast(*void)(*instance)) == 8, "gsl_function_vec_struct.params has unexpected offset % instead of 8", ((cast(*void)(*instance.params)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_function_vec_struct.params)) == 8, "gsl_function_vec_struct.params has unexpected size % instead of 8", size_of(type_of(gsl_function_vec_struct.params)));
        assert(size_of(gsl_function_vec_struct) == 16, "gsl_function_vec_struct has size % instead of 16", size_of(gsl_function_vec_struct));
    }

    {
        instance: gsl_complex;
        assert(((cast(*void)(*instance.dat)) - cast(*void)(*instance)) == 0, "gsl_complex.dat has unexpected offset % instead of 0", ((cast(*void)(*instance.dat)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_complex.dat)) == 16, "gsl_complex.dat has unexpected size % instead of 16", size_of(type_of(gsl_complex.dat)));
        assert(size_of(gsl_complex) == 16, "gsl_complex has size % instead of 16", size_of(gsl_complex));
    }

    assert(size_of(gsl_complex_long_double) == 32, "gsl_complex_long_double has size % instead of 32", size_of(gsl_complex_long_double));

    {
        instance: gsl_complex_float;
        assert(((cast(*void)(*instance.dat)) - cast(*void)(*instance)) == 0, "gsl_complex_float.dat has unexpected offset % instead of 0", ((cast(*void)(*instance.dat)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_complex_float.dat)) == 8, "gsl_complex_float.dat has unexpected size % instead of 8", size_of(type_of(gsl_complex_float.dat)));
        assert(size_of(gsl_complex_float) == 8, "gsl_complex_float has size % instead of 8", size_of(gsl_complex_float));
    }

    {
        instance: gsl_block_short_struct;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_block_short_struct.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_short_struct.size)) == 8, "gsl_block_short_struct.size has unexpected size % instead of 8", size_of(type_of(gsl_block_short_struct.size)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 8, "gsl_block_short_struct.data has unexpected offset % instead of 8", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_short_struct.data)) == 8, "gsl_block_short_struct.data has unexpected size % instead of 8", size_of(type_of(gsl_block_short_struct.data)));
        assert(size_of(gsl_block_short_struct) == 16, "gsl_block_short_struct has size % instead of 16", size_of(gsl_block_short_struct));
    }

    {
        instance: gsl_block_ushort_struct;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_block_ushort_struct.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_ushort_struct.size)) == 8, "gsl_block_ushort_struct.size has unexpected size % instead of 8", size_of(type_of(gsl_block_ushort_struct.size)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 8, "gsl_block_ushort_struct.data has unexpected offset % instead of 8", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_ushort_struct.data)) == 8, "gsl_block_ushort_struct.data has unexpected size % instead of 8", size_of(type_of(gsl_block_ushort_struct.data)));
        assert(size_of(gsl_block_ushort_struct) == 16, "gsl_block_ushort_struct has size % instead of 16", size_of(gsl_block_ushort_struct));
    }

    {
        instance: gsl_block_char_struct;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_block_char_struct.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_char_struct.size)) == 8, "gsl_block_char_struct.size has unexpected size % instead of 8", size_of(type_of(gsl_block_char_struct.size)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 8, "gsl_block_char_struct.data has unexpected offset % instead of 8", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_char_struct.data)) == 8, "gsl_block_char_struct.data has unexpected size % instead of 8", size_of(type_of(gsl_block_char_struct.data)));
        assert(size_of(gsl_block_char_struct) == 16, "gsl_block_char_struct has size % instead of 16", size_of(gsl_block_char_struct));
    }

    {
        instance: gsl_block_uchar_struct;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_block_uchar_struct.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_uchar_struct.size)) == 8, "gsl_block_uchar_struct.size has unexpected size % instead of 8", size_of(type_of(gsl_block_uchar_struct.size)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 8, "gsl_block_uchar_struct.data has unexpected offset % instead of 8", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_uchar_struct.data)) == 8, "gsl_block_uchar_struct.data has unexpected size % instead of 8", size_of(type_of(gsl_block_uchar_struct.data)));
        assert(size_of(gsl_block_uchar_struct) == 16, "gsl_block_uchar_struct has size % instead of 16", size_of(gsl_block_uchar_struct));
    }

    {
        instance: gsl_block_int_struct;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_block_int_struct.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_int_struct.size)) == 8, "gsl_block_int_struct.size has unexpected size % instead of 8", size_of(type_of(gsl_block_int_struct.size)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 8, "gsl_block_int_struct.data has unexpected offset % instead of 8", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_int_struct.data)) == 8, "gsl_block_int_struct.data has unexpected size % instead of 8", size_of(type_of(gsl_block_int_struct.data)));
        assert(size_of(gsl_block_int_struct) == 16, "gsl_block_int_struct has size % instead of 16", size_of(gsl_block_int_struct));
    }

    {
        instance: gsl_block_uint_struct;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_block_uint_struct.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_uint_struct.size)) == 8, "gsl_block_uint_struct.size has unexpected size % instead of 8", size_of(type_of(gsl_block_uint_struct.size)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 8, "gsl_block_uint_struct.data has unexpected offset % instead of 8", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_uint_struct.data)) == 8, "gsl_block_uint_struct.data has unexpected size % instead of 8", size_of(type_of(gsl_block_uint_struct.data)));
        assert(size_of(gsl_block_uint_struct) == 16, "gsl_block_uint_struct has size % instead of 16", size_of(gsl_block_uint_struct));
    }

    {
        instance: gsl_block_ulong_struct;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_block_ulong_struct.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_ulong_struct.size)) == 8, "gsl_block_ulong_struct.size has unexpected size % instead of 8", size_of(type_of(gsl_block_ulong_struct.size)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 8, "gsl_block_ulong_struct.data has unexpected offset % instead of 8", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_ulong_struct.data)) == 8, "gsl_block_ulong_struct.data has unexpected size % instead of 8", size_of(type_of(gsl_block_ulong_struct.data)));
        assert(size_of(gsl_block_ulong_struct) == 16, "gsl_block_ulong_struct has size % instead of 16", size_of(gsl_block_ulong_struct));
    }

    {
        instance: gsl_block_long_struct;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_block_long_struct.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_long_struct.size)) == 8, "gsl_block_long_struct.size has unexpected size % instead of 8", size_of(type_of(gsl_block_long_struct.size)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 8, "gsl_block_long_struct.data has unexpected offset % instead of 8", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_long_struct.data)) == 8, "gsl_block_long_struct.data has unexpected size % instead of 8", size_of(type_of(gsl_block_long_struct.data)));
        assert(size_of(gsl_block_long_struct) == 16, "gsl_block_long_struct has size % instead of 16", size_of(gsl_block_long_struct));
    }

    {
        instance: gsl_block_complex_float_struct;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_block_complex_float_struct.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_complex_float_struct.size)) == 8, "gsl_block_complex_float_struct.size has unexpected size % instead of 8", size_of(type_of(gsl_block_complex_float_struct.size)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 8, "gsl_block_complex_float_struct.data has unexpected offset % instead of 8", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_complex_float_struct.data)) == 8, "gsl_block_complex_float_struct.data has unexpected size % instead of 8", size_of(type_of(gsl_block_complex_float_struct.data)));
        assert(size_of(gsl_block_complex_float_struct) == 16, "gsl_block_complex_float_struct has size % instead of 16", size_of(gsl_block_complex_float_struct));
    }

    {
        instance: gsl_block_complex_long_double_struct;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_block_complex_long_double_struct.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_block_complex_long_double_struct.size)) == 8, "gsl_block_complex_long_double_struct.size has unexpected size % instead of 8", size_of(type_of(gsl_block_complex_long_double_struct.size)));
        assert(size_of(gsl_block_complex_long_double_struct) == 16, "gsl_block_complex_long_double_struct has size % instead of 16", size_of(gsl_block_complex_long_double_struct));
    }

    {
        instance: gsl_vector_complex_long_double;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_vector_complex_long_double.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex_long_double.size)) == 8, "gsl_vector_complex_long_double.size has unexpected size % instead of 8", size_of(type_of(gsl_vector_complex_long_double.size)));
        assert(((cast(*void)(*instance.stride)) - cast(*void)(*instance)) == 8, "gsl_vector_complex_long_double.stride has unexpected offset % instead of 8", ((cast(*void)(*instance.stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex_long_double.stride)) == 8, "gsl_vector_complex_long_double.stride has unexpected size % instead of 8", size_of(type_of(gsl_vector_complex_long_double.stride)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 24, "gsl_vector_complex_long_double.block has unexpected offset % instead of 24", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex_long_double.block)) == 8, "gsl_vector_complex_long_double.block has unexpected size % instead of 8", size_of(type_of(gsl_vector_complex_long_double.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 32, "gsl_vector_complex_long_double.owner has unexpected offset % instead of 32", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex_long_double.owner)) == 4, "gsl_vector_complex_long_double.owner has unexpected size % instead of 4", size_of(type_of(gsl_vector_complex_long_double.owner)));
        assert(size_of(gsl_vector_complex_long_double) == 40, "gsl_vector_complex_long_double has size % instead of 40", size_of(gsl_vector_complex_long_double));
    }

    {
        instance: _gsl_vector_complex_long_double_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_complex_long_double_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_complex_long_double_view.vector)) == 40, "_gsl_vector_complex_long_double_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_complex_long_double_view.vector)));
        assert(size_of(_gsl_vector_complex_long_double_view) == 40, "_gsl_vector_complex_long_double_view has size % instead of 40", size_of(_gsl_vector_complex_long_double_view));
    }

    {
        instance: _gsl_vector_complex_long_double_const_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_complex_long_double_const_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_complex_long_double_const_view.vector)) == 40, "_gsl_vector_complex_long_double_const_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_complex_long_double_const_view.vector)));
        assert(size_of(_gsl_vector_complex_long_double_const_view) == 40, "_gsl_vector_complex_long_double_const_view has size % instead of 40", size_of(_gsl_vector_complex_long_double_const_view));
    }

    {
        instance: gsl_vector_complex;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_vector_complex.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex.size)) == 8, "gsl_vector_complex.size has unexpected size % instead of 8", size_of(type_of(gsl_vector_complex.size)));
        assert(((cast(*void)(*instance.stride)) - cast(*void)(*instance)) == 8, "gsl_vector_complex.stride has unexpected offset % instead of 8", ((cast(*void)(*instance.stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex.stride)) == 8, "gsl_vector_complex.stride has unexpected size % instead of 8", size_of(type_of(gsl_vector_complex.stride)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 16, "gsl_vector_complex.data has unexpected offset % instead of 16", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex.data)) == 8, "gsl_vector_complex.data has unexpected size % instead of 8", size_of(type_of(gsl_vector_complex.data)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 24, "gsl_vector_complex.block has unexpected offset % instead of 24", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex.block)) == 8, "gsl_vector_complex.block has unexpected size % instead of 8", size_of(type_of(gsl_vector_complex.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 32, "gsl_vector_complex.owner has unexpected offset % instead of 32", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex.owner)) == 4, "gsl_vector_complex.owner has unexpected size % instead of 4", size_of(type_of(gsl_vector_complex.owner)));
        assert(size_of(gsl_vector_complex) == 40, "gsl_vector_complex has size % instead of 40", size_of(gsl_vector_complex));
    }

    {
        instance: _gsl_vector_complex_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_complex_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_complex_view.vector)) == 40, "_gsl_vector_complex_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_complex_view.vector)));
        assert(size_of(_gsl_vector_complex_view) == 40, "_gsl_vector_complex_view has size % instead of 40", size_of(_gsl_vector_complex_view));
    }

    {
        instance: _gsl_vector_complex_const_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_complex_const_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_complex_const_view.vector)) == 40, "_gsl_vector_complex_const_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_complex_const_view.vector)));
        assert(size_of(_gsl_vector_complex_const_view) == 40, "_gsl_vector_complex_const_view has size % instead of 40", size_of(_gsl_vector_complex_const_view));
    }

    {
        instance: gsl_vector_complex_float;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_vector_complex_float.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex_float.size)) == 8, "gsl_vector_complex_float.size has unexpected size % instead of 8", size_of(type_of(gsl_vector_complex_float.size)));
        assert(((cast(*void)(*instance.stride)) - cast(*void)(*instance)) == 8, "gsl_vector_complex_float.stride has unexpected offset % instead of 8", ((cast(*void)(*instance.stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex_float.stride)) == 8, "gsl_vector_complex_float.stride has unexpected size % instead of 8", size_of(type_of(gsl_vector_complex_float.stride)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 16, "gsl_vector_complex_float.data has unexpected offset % instead of 16", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex_float.data)) == 8, "gsl_vector_complex_float.data has unexpected size % instead of 8", size_of(type_of(gsl_vector_complex_float.data)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 24, "gsl_vector_complex_float.block has unexpected offset % instead of 24", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex_float.block)) == 8, "gsl_vector_complex_float.block has unexpected size % instead of 8", size_of(type_of(gsl_vector_complex_float.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 32, "gsl_vector_complex_float.owner has unexpected offset % instead of 32", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_complex_float.owner)) == 4, "gsl_vector_complex_float.owner has unexpected size % instead of 4", size_of(type_of(gsl_vector_complex_float.owner)));
        assert(size_of(gsl_vector_complex_float) == 40, "gsl_vector_complex_float has size % instead of 40", size_of(gsl_vector_complex_float));
    }

    {
        instance: _gsl_vector_complex_float_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_complex_float_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_complex_float_view.vector)) == 40, "_gsl_vector_complex_float_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_complex_float_view.vector)));
        assert(size_of(_gsl_vector_complex_float_view) == 40, "_gsl_vector_complex_float_view has size % instead of 40", size_of(_gsl_vector_complex_float_view));
    }

    {
        instance: _gsl_vector_complex_float_const_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_complex_float_const_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_complex_float_const_view.vector)) == 40, "_gsl_vector_complex_float_const_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_complex_float_const_view.vector)));
        assert(size_of(_gsl_vector_complex_float_const_view) == 40, "_gsl_vector_complex_float_const_view has size % instead of 40", size_of(_gsl_vector_complex_float_const_view));
    }

    {
        instance: gsl_vector_ulong;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_vector_ulong.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_ulong.size)) == 8, "gsl_vector_ulong.size has unexpected size % instead of 8", size_of(type_of(gsl_vector_ulong.size)));
        assert(((cast(*void)(*instance.stride)) - cast(*void)(*instance)) == 8, "gsl_vector_ulong.stride has unexpected offset % instead of 8", ((cast(*void)(*instance.stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_ulong.stride)) == 8, "gsl_vector_ulong.stride has unexpected size % instead of 8", size_of(type_of(gsl_vector_ulong.stride)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 16, "gsl_vector_ulong.data has unexpected offset % instead of 16", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_ulong.data)) == 8, "gsl_vector_ulong.data has unexpected size % instead of 8", size_of(type_of(gsl_vector_ulong.data)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 24, "gsl_vector_ulong.block has unexpected offset % instead of 24", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_ulong.block)) == 8, "gsl_vector_ulong.block has unexpected size % instead of 8", size_of(type_of(gsl_vector_ulong.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 32, "gsl_vector_ulong.owner has unexpected offset % instead of 32", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_ulong.owner)) == 4, "gsl_vector_ulong.owner has unexpected size % instead of 4", size_of(type_of(gsl_vector_ulong.owner)));
        assert(size_of(gsl_vector_ulong) == 40, "gsl_vector_ulong has size % instead of 40", size_of(gsl_vector_ulong));
    }

    {
        instance: _gsl_vector_ulong_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_ulong_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_ulong_view.vector)) == 40, "_gsl_vector_ulong_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_ulong_view.vector)));
        assert(size_of(_gsl_vector_ulong_view) == 40, "_gsl_vector_ulong_view has size % instead of 40", size_of(_gsl_vector_ulong_view));
    }

    {
        instance: _gsl_vector_ulong_const_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_ulong_const_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_ulong_const_view.vector)) == 40, "_gsl_vector_ulong_const_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_ulong_const_view.vector)));
        assert(size_of(_gsl_vector_ulong_const_view) == 40, "_gsl_vector_ulong_const_view has size % instead of 40", size_of(_gsl_vector_ulong_const_view));
    }

    {
        instance: gsl_vector_long;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_vector_long.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_long.size)) == 8, "gsl_vector_long.size has unexpected size % instead of 8", size_of(type_of(gsl_vector_long.size)));
        assert(((cast(*void)(*instance.stride)) - cast(*void)(*instance)) == 8, "gsl_vector_long.stride has unexpected offset % instead of 8", ((cast(*void)(*instance.stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_long.stride)) == 8, "gsl_vector_long.stride has unexpected size % instead of 8", size_of(type_of(gsl_vector_long.stride)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 16, "gsl_vector_long.data has unexpected offset % instead of 16", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_long.data)) == 8, "gsl_vector_long.data has unexpected size % instead of 8", size_of(type_of(gsl_vector_long.data)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 24, "gsl_vector_long.block has unexpected offset % instead of 24", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_long.block)) == 8, "gsl_vector_long.block has unexpected size % instead of 8", size_of(type_of(gsl_vector_long.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 32, "gsl_vector_long.owner has unexpected offset % instead of 32", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_long.owner)) == 4, "gsl_vector_long.owner has unexpected size % instead of 4", size_of(type_of(gsl_vector_long.owner)));
        assert(size_of(gsl_vector_long) == 40, "gsl_vector_long has size % instead of 40", size_of(gsl_vector_long));
    }

    {
        instance: _gsl_vector_long_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_long_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_long_view.vector)) == 40, "_gsl_vector_long_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_long_view.vector)));
        assert(size_of(_gsl_vector_long_view) == 40, "_gsl_vector_long_view has size % instead of 40", size_of(_gsl_vector_long_view));
    }

    {
        instance: _gsl_vector_long_const_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_long_const_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_long_const_view.vector)) == 40, "_gsl_vector_long_const_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_long_const_view.vector)));
        assert(size_of(_gsl_vector_long_const_view) == 40, "_gsl_vector_long_const_view has size % instead of 40", size_of(_gsl_vector_long_const_view));
    }

    {
        instance: gsl_vector_uint;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_vector_uint.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_uint.size)) == 8, "gsl_vector_uint.size has unexpected size % instead of 8", size_of(type_of(gsl_vector_uint.size)));
        assert(((cast(*void)(*instance.stride)) - cast(*void)(*instance)) == 8, "gsl_vector_uint.stride has unexpected offset % instead of 8", ((cast(*void)(*instance.stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_uint.stride)) == 8, "gsl_vector_uint.stride has unexpected size % instead of 8", size_of(type_of(gsl_vector_uint.stride)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 16, "gsl_vector_uint.data has unexpected offset % instead of 16", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_uint.data)) == 8, "gsl_vector_uint.data has unexpected size % instead of 8", size_of(type_of(gsl_vector_uint.data)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 24, "gsl_vector_uint.block has unexpected offset % instead of 24", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_uint.block)) == 8, "gsl_vector_uint.block has unexpected size % instead of 8", size_of(type_of(gsl_vector_uint.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 32, "gsl_vector_uint.owner has unexpected offset % instead of 32", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_uint.owner)) == 4, "gsl_vector_uint.owner has unexpected size % instead of 4", size_of(type_of(gsl_vector_uint.owner)));
        assert(size_of(gsl_vector_uint) == 40, "gsl_vector_uint has size % instead of 40", size_of(gsl_vector_uint));
    }

    {
        instance: _gsl_vector_uint_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_uint_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_uint_view.vector)) == 40, "_gsl_vector_uint_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_uint_view.vector)));
        assert(size_of(_gsl_vector_uint_view) == 40, "_gsl_vector_uint_view has size % instead of 40", size_of(_gsl_vector_uint_view));
    }

    {
        instance: _gsl_vector_uint_const_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_uint_const_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_uint_const_view.vector)) == 40, "_gsl_vector_uint_const_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_uint_const_view.vector)));
        assert(size_of(_gsl_vector_uint_const_view) == 40, "_gsl_vector_uint_const_view has size % instead of 40", size_of(_gsl_vector_uint_const_view));
    }

    {
        instance: gsl_vector_int;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_vector_int.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_int.size)) == 8, "gsl_vector_int.size has unexpected size % instead of 8", size_of(type_of(gsl_vector_int.size)));
        assert(((cast(*void)(*instance.stride)) - cast(*void)(*instance)) == 8, "gsl_vector_int.stride has unexpected offset % instead of 8", ((cast(*void)(*instance.stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_int.stride)) == 8, "gsl_vector_int.stride has unexpected size % instead of 8", size_of(type_of(gsl_vector_int.stride)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 16, "gsl_vector_int.data has unexpected offset % instead of 16", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_int.data)) == 8, "gsl_vector_int.data has unexpected size % instead of 8", size_of(type_of(gsl_vector_int.data)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 24, "gsl_vector_int.block has unexpected offset % instead of 24", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_int.block)) == 8, "gsl_vector_int.block has unexpected size % instead of 8", size_of(type_of(gsl_vector_int.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 32, "gsl_vector_int.owner has unexpected offset % instead of 32", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_int.owner)) == 4, "gsl_vector_int.owner has unexpected size % instead of 4", size_of(type_of(gsl_vector_int.owner)));
        assert(size_of(gsl_vector_int) == 40, "gsl_vector_int has size % instead of 40", size_of(gsl_vector_int));
    }

    {
        instance: _gsl_vector_int_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_int_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_int_view.vector)) == 40, "_gsl_vector_int_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_int_view.vector)));
        assert(size_of(_gsl_vector_int_view) == 40, "_gsl_vector_int_view has size % instead of 40", size_of(_gsl_vector_int_view));
    }

    {
        instance: _gsl_vector_int_const_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_int_const_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_int_const_view.vector)) == 40, "_gsl_vector_int_const_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_int_const_view.vector)));
        assert(size_of(_gsl_vector_int_const_view) == 40, "_gsl_vector_int_const_view has size % instead of 40", size_of(_gsl_vector_int_const_view));
    }

    {
        instance: gsl_vector_ushort;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_vector_ushort.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_ushort.size)) == 8, "gsl_vector_ushort.size has unexpected size % instead of 8", size_of(type_of(gsl_vector_ushort.size)));
        assert(((cast(*void)(*instance.stride)) - cast(*void)(*instance)) == 8, "gsl_vector_ushort.stride has unexpected offset % instead of 8", ((cast(*void)(*instance.stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_ushort.stride)) == 8, "gsl_vector_ushort.stride has unexpected size % instead of 8", size_of(type_of(gsl_vector_ushort.stride)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 16, "gsl_vector_ushort.data has unexpected offset % instead of 16", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_ushort.data)) == 8, "gsl_vector_ushort.data has unexpected size % instead of 8", size_of(type_of(gsl_vector_ushort.data)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 24, "gsl_vector_ushort.block has unexpected offset % instead of 24", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_ushort.block)) == 8, "gsl_vector_ushort.block has unexpected size % instead of 8", size_of(type_of(gsl_vector_ushort.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 32, "gsl_vector_ushort.owner has unexpected offset % instead of 32", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_ushort.owner)) == 4, "gsl_vector_ushort.owner has unexpected size % instead of 4", size_of(type_of(gsl_vector_ushort.owner)));
        assert(size_of(gsl_vector_ushort) == 40, "gsl_vector_ushort has size % instead of 40", size_of(gsl_vector_ushort));
    }

    {
        instance: _gsl_vector_ushort_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_ushort_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_ushort_view.vector)) == 40, "_gsl_vector_ushort_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_ushort_view.vector)));
        assert(size_of(_gsl_vector_ushort_view) == 40, "_gsl_vector_ushort_view has size % instead of 40", size_of(_gsl_vector_ushort_view));
    }

    {
        instance: _gsl_vector_ushort_const_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_ushort_const_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_ushort_const_view.vector)) == 40, "_gsl_vector_ushort_const_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_ushort_const_view.vector)));
        assert(size_of(_gsl_vector_ushort_const_view) == 40, "_gsl_vector_ushort_const_view has size % instead of 40", size_of(_gsl_vector_ushort_const_view));
    }

    {
        instance: gsl_vector_short;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_vector_short.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_short.size)) == 8, "gsl_vector_short.size has unexpected size % instead of 8", size_of(type_of(gsl_vector_short.size)));
        assert(((cast(*void)(*instance.stride)) - cast(*void)(*instance)) == 8, "gsl_vector_short.stride has unexpected offset % instead of 8", ((cast(*void)(*instance.stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_short.stride)) == 8, "gsl_vector_short.stride has unexpected size % instead of 8", size_of(type_of(gsl_vector_short.stride)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 16, "gsl_vector_short.data has unexpected offset % instead of 16", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_short.data)) == 8, "gsl_vector_short.data has unexpected size % instead of 8", size_of(type_of(gsl_vector_short.data)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 24, "gsl_vector_short.block has unexpected offset % instead of 24", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_short.block)) == 8, "gsl_vector_short.block has unexpected size % instead of 8", size_of(type_of(gsl_vector_short.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 32, "gsl_vector_short.owner has unexpected offset % instead of 32", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_short.owner)) == 4, "gsl_vector_short.owner has unexpected size % instead of 4", size_of(type_of(gsl_vector_short.owner)));
        assert(size_of(gsl_vector_short) == 40, "gsl_vector_short has size % instead of 40", size_of(gsl_vector_short));
    }

    {
        instance: _gsl_vector_short_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_short_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_short_view.vector)) == 40, "_gsl_vector_short_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_short_view.vector)));
        assert(size_of(_gsl_vector_short_view) == 40, "_gsl_vector_short_view has size % instead of 40", size_of(_gsl_vector_short_view));
    }

    {
        instance: _gsl_vector_short_const_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_short_const_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_short_const_view.vector)) == 40, "_gsl_vector_short_const_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_short_const_view.vector)));
        assert(size_of(_gsl_vector_short_const_view) == 40, "_gsl_vector_short_const_view has size % instead of 40", size_of(_gsl_vector_short_const_view));
    }

    {
        instance: gsl_vector_uchar;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_vector_uchar.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_uchar.size)) == 8, "gsl_vector_uchar.size has unexpected size % instead of 8", size_of(type_of(gsl_vector_uchar.size)));
        assert(((cast(*void)(*instance.stride)) - cast(*void)(*instance)) == 8, "gsl_vector_uchar.stride has unexpected offset % instead of 8", ((cast(*void)(*instance.stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_uchar.stride)) == 8, "gsl_vector_uchar.stride has unexpected size % instead of 8", size_of(type_of(gsl_vector_uchar.stride)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 16, "gsl_vector_uchar.data has unexpected offset % instead of 16", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_uchar.data)) == 8, "gsl_vector_uchar.data has unexpected size % instead of 8", size_of(type_of(gsl_vector_uchar.data)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 24, "gsl_vector_uchar.block has unexpected offset % instead of 24", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_uchar.block)) == 8, "gsl_vector_uchar.block has unexpected size % instead of 8", size_of(type_of(gsl_vector_uchar.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 32, "gsl_vector_uchar.owner has unexpected offset % instead of 32", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_uchar.owner)) == 4, "gsl_vector_uchar.owner has unexpected size % instead of 4", size_of(type_of(gsl_vector_uchar.owner)));
        assert(size_of(gsl_vector_uchar) == 40, "gsl_vector_uchar has size % instead of 40", size_of(gsl_vector_uchar));
    }

    {
        instance: _gsl_vector_uchar_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_uchar_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_uchar_view.vector)) == 40, "_gsl_vector_uchar_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_uchar_view.vector)));
        assert(size_of(_gsl_vector_uchar_view) == 40, "_gsl_vector_uchar_view has size % instead of 40", size_of(_gsl_vector_uchar_view));
    }

    {
        instance: _gsl_vector_uchar_const_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_uchar_const_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_uchar_const_view.vector)) == 40, "_gsl_vector_uchar_const_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_uchar_const_view.vector)));
        assert(size_of(_gsl_vector_uchar_const_view) == 40, "_gsl_vector_uchar_const_view has size % instead of 40", size_of(_gsl_vector_uchar_const_view));
    }

    {
        instance: gsl_vector_char;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_vector_char.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_char.size)) == 8, "gsl_vector_char.size has unexpected size % instead of 8", size_of(type_of(gsl_vector_char.size)));
        assert(((cast(*void)(*instance.stride)) - cast(*void)(*instance)) == 8, "gsl_vector_char.stride has unexpected offset % instead of 8", ((cast(*void)(*instance.stride)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_char.stride)) == 8, "gsl_vector_char.stride has unexpected size % instead of 8", size_of(type_of(gsl_vector_char.stride)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 16, "gsl_vector_char.data has unexpected offset % instead of 16", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_char.data)) == 8, "gsl_vector_char.data has unexpected size % instead of 8", size_of(type_of(gsl_vector_char.data)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 24, "gsl_vector_char.block has unexpected offset % instead of 24", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_char.block)) == 8, "gsl_vector_char.block has unexpected size % instead of 8", size_of(type_of(gsl_vector_char.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 32, "gsl_vector_char.owner has unexpected offset % instead of 32", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_vector_char.owner)) == 4, "gsl_vector_char.owner has unexpected size % instead of 4", size_of(type_of(gsl_vector_char.owner)));
        assert(size_of(gsl_vector_char) == 40, "gsl_vector_char has size % instead of 40", size_of(gsl_vector_char));
    }

    {
        instance: _gsl_vector_char_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_char_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_char_view.vector)) == 40, "_gsl_vector_char_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_char_view.vector)));
        assert(size_of(_gsl_vector_char_view) == 40, "_gsl_vector_char_view has size % instead of 40", size_of(_gsl_vector_char_view));
    }

    {
        instance: _gsl_vector_char_const_view;
        assert(((cast(*void)(*instance.vector)) - cast(*void)(*instance)) == 0, "_gsl_vector_char_const_view.vector has unexpected offset % instead of 0", ((cast(*void)(*instance.vector)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_vector_char_const_view.vector)) == 40, "_gsl_vector_char_const_view.vector has unexpected size % instead of 40", size_of(type_of(_gsl_vector_char_const_view.vector)));
        assert(size_of(_gsl_vector_char_const_view) == 40, "_gsl_vector_char_const_view has size % instead of 40", size_of(_gsl_vector_char_const_view));
    }

    {
        instance: gsl_matrix_float;
        assert(((cast(*void)(*instance.size1)) - cast(*void)(*instance)) == 0, "gsl_matrix_float.size1 has unexpected offset % instead of 0", ((cast(*void)(*instance.size1)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_float.size1)) == 8, "gsl_matrix_float.size1 has unexpected size % instead of 8", size_of(type_of(gsl_matrix_float.size1)));
        assert(((cast(*void)(*instance.size2)) - cast(*void)(*instance)) == 8, "gsl_matrix_float.size2 has unexpected offset % instead of 8", ((cast(*void)(*instance.size2)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_float.size2)) == 8, "gsl_matrix_float.size2 has unexpected size % instead of 8", size_of(type_of(gsl_matrix_float.size2)));
        assert(((cast(*void)(*instance.tda)) - cast(*void)(*instance)) == 16, "gsl_matrix_float.tda has unexpected offset % instead of 16", ((cast(*void)(*instance.tda)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_float.tda)) == 8, "gsl_matrix_float.tda has unexpected size % instead of 8", size_of(type_of(gsl_matrix_float.tda)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 24, "gsl_matrix_float.data has unexpected offset % instead of 24", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_float.data)) == 8, "gsl_matrix_float.data has unexpected size % instead of 8", size_of(type_of(gsl_matrix_float.data)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 32, "gsl_matrix_float.block has unexpected offset % instead of 32", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_float.block)) == 8, "gsl_matrix_float.block has unexpected size % instead of 8", size_of(type_of(gsl_matrix_float.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 40, "gsl_matrix_float.owner has unexpected offset % instead of 40", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_float.owner)) == 4, "gsl_matrix_float.owner has unexpected size % instead of 4", size_of(type_of(gsl_matrix_float.owner)));
        assert(size_of(gsl_matrix_float) == 48, "gsl_matrix_float has size % instead of 48", size_of(gsl_matrix_float));
    }

    {
        instance: _gsl_matrix_float_view;
        assert(((cast(*void)(*instance.matrix)) - cast(*void)(*instance)) == 0, "_gsl_matrix_float_view.matrix has unexpected offset % instead of 0", ((cast(*void)(*instance.matrix)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_matrix_float_view.matrix)) == 48, "_gsl_matrix_float_view.matrix has unexpected size % instead of 48", size_of(type_of(_gsl_matrix_float_view.matrix)));
        assert(size_of(_gsl_matrix_float_view) == 48, "_gsl_matrix_float_view has size % instead of 48", size_of(_gsl_matrix_float_view));
    }

    {
        instance: _gsl_matrix_float_const_view;
        assert(((cast(*void)(*instance.matrix)) - cast(*void)(*instance)) == 0, "_gsl_matrix_float_const_view.matrix has unexpected offset % instead of 0", ((cast(*void)(*instance.matrix)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_matrix_float_const_view.matrix)) == 48, "_gsl_matrix_float_const_view.matrix has unexpected size % instead of 48", size_of(type_of(_gsl_matrix_float_const_view.matrix)));
        assert(size_of(_gsl_matrix_float_const_view) == 48, "_gsl_matrix_float_const_view has size % instead of 48", size_of(_gsl_matrix_float_const_view));
    }

    {
        instance: gsl_matrix_complex_float;
        assert(((cast(*void)(*instance.size1)) - cast(*void)(*instance)) == 0, "gsl_matrix_complex_float.size1 has unexpected offset % instead of 0", ((cast(*void)(*instance.size1)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_complex_float.size1)) == 8, "gsl_matrix_complex_float.size1 has unexpected size % instead of 8", size_of(type_of(gsl_matrix_complex_float.size1)));
        assert(((cast(*void)(*instance.size2)) - cast(*void)(*instance)) == 8, "gsl_matrix_complex_float.size2 has unexpected offset % instead of 8", ((cast(*void)(*instance.size2)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_complex_float.size2)) == 8, "gsl_matrix_complex_float.size2 has unexpected size % instead of 8", size_of(type_of(gsl_matrix_complex_float.size2)));
        assert(((cast(*void)(*instance.tda)) - cast(*void)(*instance)) == 16, "gsl_matrix_complex_float.tda has unexpected offset % instead of 16", ((cast(*void)(*instance.tda)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_complex_float.tda)) == 8, "gsl_matrix_complex_float.tda has unexpected size % instead of 8", size_of(type_of(gsl_matrix_complex_float.tda)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 24, "gsl_matrix_complex_float.data has unexpected offset % instead of 24", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_complex_float.data)) == 8, "gsl_matrix_complex_float.data has unexpected size % instead of 8", size_of(type_of(gsl_matrix_complex_float.data)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 32, "gsl_matrix_complex_float.block has unexpected offset % instead of 32", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_complex_float.block)) == 8, "gsl_matrix_complex_float.block has unexpected size % instead of 8", size_of(type_of(gsl_matrix_complex_float.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 40, "gsl_matrix_complex_float.owner has unexpected offset % instead of 40", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_complex_float.owner)) == 4, "gsl_matrix_complex_float.owner has unexpected size % instead of 4", size_of(type_of(gsl_matrix_complex_float.owner)));
        assert(size_of(gsl_matrix_complex_float) == 48, "gsl_matrix_complex_float has size % instead of 48", size_of(gsl_matrix_complex_float));
    }

    {
        instance: _gsl_matrix_complex_float_view;
        assert(((cast(*void)(*instance.matrix)) - cast(*void)(*instance)) == 0, "_gsl_matrix_complex_float_view.matrix has unexpected offset % instead of 0", ((cast(*void)(*instance.matrix)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_matrix_complex_float_view.matrix)) == 48, "_gsl_matrix_complex_float_view.matrix has unexpected size % instead of 48", size_of(type_of(_gsl_matrix_complex_float_view.matrix)));
        assert(size_of(_gsl_matrix_complex_float_view) == 48, "_gsl_matrix_complex_float_view has size % instead of 48", size_of(_gsl_matrix_complex_float_view));
    }

    {
        instance: _gsl_matrix_complex_float_const_view;
        assert(((cast(*void)(*instance.matrix)) - cast(*void)(*instance)) == 0, "_gsl_matrix_complex_float_const_view.matrix has unexpected offset % instead of 0", ((cast(*void)(*instance.matrix)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_matrix_complex_float_const_view.matrix)) == 48, "_gsl_matrix_complex_float_const_view.matrix has unexpected size % instead of 48", size_of(type_of(_gsl_matrix_complex_float_const_view.matrix)));
        assert(size_of(_gsl_matrix_complex_float_const_view) == 48, "_gsl_matrix_complex_float_const_view has size % instead of 48", size_of(_gsl_matrix_complex_float_const_view));
    }

    {
        instance: gsl_matrix_complex_long_double;
        assert(((cast(*void)(*instance.size1)) - cast(*void)(*instance)) == 0, "gsl_matrix_complex_long_double.size1 has unexpected offset % instead of 0", ((cast(*void)(*instance.size1)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_complex_long_double.size1)) == 8, "gsl_matrix_complex_long_double.size1 has unexpected size % instead of 8", size_of(type_of(gsl_matrix_complex_long_double.size1)));
        assert(((cast(*void)(*instance.size2)) - cast(*void)(*instance)) == 8, "gsl_matrix_complex_long_double.size2 has unexpected offset % instead of 8", ((cast(*void)(*instance.size2)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_complex_long_double.size2)) == 8, "gsl_matrix_complex_long_double.size2 has unexpected size % instead of 8", size_of(type_of(gsl_matrix_complex_long_double.size2)));
        assert(((cast(*void)(*instance.tda)) - cast(*void)(*instance)) == 16, "gsl_matrix_complex_long_double.tda has unexpected offset % instead of 16", ((cast(*void)(*instance.tda)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_complex_long_double.tda)) == 8, "gsl_matrix_complex_long_double.tda has unexpected size % instead of 8", size_of(type_of(gsl_matrix_complex_long_double.tda)));
        assert(((cast(*void)(*instance.block)) - cast(*void)(*instance)) == 32, "gsl_matrix_complex_long_double.block has unexpected offset % instead of 32", ((cast(*void)(*instance.block)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_complex_long_double.block)) == 8, "gsl_matrix_complex_long_double.block has unexpected size % instead of 8", size_of(type_of(gsl_matrix_complex_long_double.block)));
        assert(((cast(*void)(*instance.owner)) - cast(*void)(*instance)) == 40, "gsl_matrix_complex_long_double.owner has unexpected offset % instead of 40", ((cast(*void)(*instance.owner)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_matrix_complex_long_double.owner)) == 4, "gsl_matrix_complex_long_double.owner has unexpected size % instead of 4", size_of(type_of(gsl_matrix_complex_long_double.owner)));
        assert(size_of(gsl_matrix_complex_long_double) == 48, "gsl_matrix_complex_long_double has size % instead of 48", size_of(gsl_matrix_complex_long_double));
    }

    {
        instance: _gsl_matrix_complex_long_double_view;
        assert(((cast(*void)(*instance.matrix)) - cast(*void)(*instance)) == 0, "_gsl_matrix_complex_long_double_view.matrix has unexpected offset % instead of 0", ((cast(*void)(*instance.matrix)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_matrix_complex_long_double_view.matrix)) == 48, "_gsl_matrix_complex_long_double_view.matrix has unexpected size % instead of 48", size_of(type_of(_gsl_matrix_complex_long_double_view.matrix)));
        assert(size_of(_gsl_matrix_complex_long_double_view) == 48, "_gsl_matrix_complex_long_double_view has size % instead of 48", size_of(_gsl_matrix_complex_long_double_view));
    }

    {
        instance: _gsl_matrix_complex_long_double_const_view;
        assert(((cast(*void)(*instance.matrix)) - cast(*void)(*instance)) == 0, "_gsl_matrix_complex_long_double_const_view.matrix has unexpected offset % instead of 0", ((cast(*void)(*instance.matrix)) - cast(*void)(*instance)));
        assert(size_of(type_of(_gsl_matrix_complex_long_double_const_view.matrix)) == 48, "_gsl_matrix_complex_long_double_const_view.matrix has unexpected size % instead of 48", size_of(type_of(_gsl_matrix_complex_long_double_const_view.matrix)));
        assert(size_of(_gsl_matrix_complex_long_double_const_view) == 48, "_gsl_matrix_complex_long_double_const_view has size % instead of 48", size_of(_gsl_matrix_complex_long_double_const_view));
    }

    {
        instance: gsl_permutation_struct;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_permutation_struct.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_permutation_struct.size)) == 8, "gsl_permutation_struct.size has unexpected size % instead of 8", size_of(type_of(gsl_permutation_struct.size)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 8, "gsl_permutation_struct.data has unexpected offset % instead of 8", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_permutation_struct.data)) == 8, "gsl_permutation_struct.data has unexpected size % instead of 8", size_of(type_of(gsl_permutation_struct.data)));
        assert(size_of(gsl_permutation_struct) == 16, "gsl_permutation_struct has size % instead of 16", size_of(gsl_permutation_struct));
    }

    {
        instance: gsl_rng_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_rng_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_rng_type.name)) == 8, "gsl_rng_type.name has unexpected size % instead of 8", size_of(type_of(gsl_rng_type.name)));
        assert(((cast(*void)(*instance.max)) - cast(*void)(*instance)) == 8, "gsl_rng_type.max has unexpected offset % instead of 8", ((cast(*void)(*instance.max)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_rng_type.max)) == 8, "gsl_rng_type.max has unexpected size % instead of 8", size_of(type_of(gsl_rng_type.max)));
        assert(((cast(*void)(*instance.min)) - cast(*void)(*instance)) == 16, "gsl_rng_type.min has unexpected offset % instead of 16", ((cast(*void)(*instance.min)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_rng_type.min)) == 8, "gsl_rng_type.min has unexpected size % instead of 8", size_of(type_of(gsl_rng_type.min)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 24, "gsl_rng_type.size has unexpected offset % instead of 24", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_rng_type.size)) == 8, "gsl_rng_type.size has unexpected size % instead of 8", size_of(type_of(gsl_rng_type.size)));
        assert(((cast(*void)(*instance.set)) - cast(*void)(*instance)) == 32, "gsl_rng_type.set has unexpected offset % instead of 32", ((cast(*void)(*instance.set)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_rng_type.set)) == 8, "gsl_rng_type.set has unexpected size % instead of 8", size_of(type_of(gsl_rng_type.set)));
        assert(((cast(*void)(*instance.get)) - cast(*void)(*instance)) == 40, "gsl_rng_type.get has unexpected offset % instead of 40", ((cast(*void)(*instance.get)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_rng_type.get)) == 8, "gsl_rng_type.get has unexpected size % instead of 8", size_of(type_of(gsl_rng_type.get)));
        assert(((cast(*void)(*instance.get_double)) - cast(*void)(*instance)) == 48, "gsl_rng_type.get_double has unexpected offset % instead of 48", ((cast(*void)(*instance.get_double)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_rng_type.get_double)) == 8, "gsl_rng_type.get_double has unexpected size % instead of 8", size_of(type_of(gsl_rng_type.get_double)));
        assert(size_of(gsl_rng_type) == 56, "gsl_rng_type has size % instead of 56", size_of(gsl_rng_type));
    }

    {
        instance: gsl_rng;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_rng.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_rng.type)) == 8, "gsl_rng.type has unexpected size % instead of 8", size_of(type_of(gsl_rng.type)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 8, "gsl_rng.state has unexpected offset % instead of 8", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_rng.state)) == 8, "gsl_rng.state has unexpected size % instead of 8", size_of(type_of(gsl_rng.state)));
        assert(size_of(gsl_rng) == 16, "gsl_rng has size % instead of 16", size_of(gsl_rng));
    }

    {
        instance: gsl_qrng_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_qrng_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_qrng_type.name)) == 8, "gsl_qrng_type.name has unexpected size % instead of 8", size_of(type_of(gsl_qrng_type.name)));
        assert(((cast(*void)(*instance.max_dimension)) - cast(*void)(*instance)) == 8, "gsl_qrng_type.max_dimension has unexpected offset % instead of 8", ((cast(*void)(*instance.max_dimension)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_qrng_type.max_dimension)) == 4, "gsl_qrng_type.max_dimension has unexpected size % instead of 4", size_of(type_of(gsl_qrng_type.max_dimension)));
        assert(((cast(*void)(*instance.state_size)) - cast(*void)(*instance)) == 16, "gsl_qrng_type.state_size has unexpected offset % instead of 16", ((cast(*void)(*instance.state_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_qrng_type.state_size)) == 8, "gsl_qrng_type.state_size has unexpected size % instead of 8", size_of(type_of(gsl_qrng_type.state_size)));
        assert(((cast(*void)(*instance.init_state)) - cast(*void)(*instance)) == 24, "gsl_qrng_type.init_state has unexpected offset % instead of 24", ((cast(*void)(*instance.init_state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_qrng_type.init_state)) == 8, "gsl_qrng_type.init_state has unexpected size % instead of 8", size_of(type_of(gsl_qrng_type.init_state)));
        assert(((cast(*void)(*instance.get)) - cast(*void)(*instance)) == 32, "gsl_qrng_type.get has unexpected offset % instead of 32", ((cast(*void)(*instance.get)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_qrng_type.get)) == 8, "gsl_qrng_type.get has unexpected size % instead of 8", size_of(type_of(gsl_qrng_type.get)));
        assert(size_of(gsl_qrng_type) == 40, "gsl_qrng_type has size % instead of 40", size_of(gsl_qrng_type));
    }

    {
        instance: gsl_qrng;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_qrng.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_qrng.type)) == 8, "gsl_qrng.type has unexpected size % instead of 8", size_of(type_of(gsl_qrng.type)));
        assert(((cast(*void)(*instance.dimension)) - cast(*void)(*instance)) == 8, "gsl_qrng.dimension has unexpected offset % instead of 8", ((cast(*void)(*instance.dimension)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_qrng.dimension)) == 4, "gsl_qrng.dimension has unexpected size % instead of 4", size_of(type_of(gsl_qrng.dimension)));
        assert(((cast(*void)(*instance.state_size)) - cast(*void)(*instance)) == 16, "gsl_qrng.state_size has unexpected offset % instead of 16", ((cast(*void)(*instance.state_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_qrng.state_size)) == 8, "gsl_qrng.state_size has unexpected size % instead of 8", size_of(type_of(gsl_qrng.state_size)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 24, "gsl_qrng.state has unexpected offset % instead of 24", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_qrng.state)) == 8, "gsl_qrng.state has unexpected size % instead of 8", size_of(type_of(gsl_qrng.state)));
        assert(size_of(gsl_qrng) == 32, "gsl_qrng has size % instead of 32", size_of(gsl_qrng));
    }

    {
        instance: gsl_ran_discrete_t;
        assert(((cast(*void)(*instance.K)) - cast(*void)(*instance)) == 0, "gsl_ran_discrete_t.K has unexpected offset % instead of 0", ((cast(*void)(*instance.K)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_ran_discrete_t.K)) == 8, "gsl_ran_discrete_t.K has unexpected size % instead of 8", size_of(type_of(gsl_ran_discrete_t.K)));
        assert(((cast(*void)(*instance.A)) - cast(*void)(*instance)) == 8, "gsl_ran_discrete_t.A has unexpected offset % instead of 8", ((cast(*void)(*instance.A)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_ran_discrete_t.A)) == 8, "gsl_ran_discrete_t.A has unexpected size % instead of 8", size_of(type_of(gsl_ran_discrete_t.A)));
        assert(((cast(*void)(*instance.F)) - cast(*void)(*instance)) == 16, "gsl_ran_discrete_t.F has unexpected offset % instead of 16", ((cast(*void)(*instance.F)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_ran_discrete_t.F)) == 8, "gsl_ran_discrete_t.F has unexpected size % instead of 8", size_of(type_of(gsl_ran_discrete_t.F)));
        assert(size_of(gsl_ran_discrete_t) == 24, "gsl_ran_discrete_t has size % instead of 24", size_of(gsl_ran_discrete_t));
    }

    {
        instance: gsl_histogram;
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "gsl_histogram.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram.n)) == 8, "gsl_histogram.n has unexpected size % instead of 8", size_of(type_of(gsl_histogram.n)));
        assert(((cast(*void)(*instance.range)) - cast(*void)(*instance)) == 8, "gsl_histogram.range has unexpected offset % instead of 8", ((cast(*void)(*instance.range)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram.range)) == 8, "gsl_histogram.range has unexpected size % instead of 8", size_of(type_of(gsl_histogram.range)));
        assert(((cast(*void)(*instance.bin)) - cast(*void)(*instance)) == 16, "gsl_histogram.bin has unexpected offset % instead of 16", ((cast(*void)(*instance.bin)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram.bin)) == 8, "gsl_histogram.bin has unexpected size % instead of 8", size_of(type_of(gsl_histogram.bin)));
        assert(size_of(gsl_histogram) == 24, "gsl_histogram has size % instead of 24", size_of(gsl_histogram));
    }

    {
        instance: gsl_histogram_pdf;
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "gsl_histogram_pdf.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram_pdf.n)) == 8, "gsl_histogram_pdf.n has unexpected size % instead of 8", size_of(type_of(gsl_histogram_pdf.n)));
        assert(((cast(*void)(*instance.range)) - cast(*void)(*instance)) == 8, "gsl_histogram_pdf.range has unexpected offset % instead of 8", ((cast(*void)(*instance.range)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram_pdf.range)) == 8, "gsl_histogram_pdf.range has unexpected size % instead of 8", size_of(type_of(gsl_histogram_pdf.range)));
        assert(((cast(*void)(*instance.sum)) - cast(*void)(*instance)) == 16, "gsl_histogram_pdf.sum has unexpected offset % instead of 16", ((cast(*void)(*instance.sum)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram_pdf.sum)) == 8, "gsl_histogram_pdf.sum has unexpected size % instead of 8", size_of(type_of(gsl_histogram_pdf.sum)));
        assert(size_of(gsl_histogram_pdf) == 24, "gsl_histogram_pdf has size % instead of 24", size_of(gsl_histogram_pdf));
    }

    {
        instance: gsl_histogram2d;
        assert(((cast(*void)(*instance.nx)) - cast(*void)(*instance)) == 0, "gsl_histogram2d.nx has unexpected offset % instead of 0", ((cast(*void)(*instance.nx)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram2d.nx)) == 8, "gsl_histogram2d.nx has unexpected size % instead of 8", size_of(type_of(gsl_histogram2d.nx)));
        assert(((cast(*void)(*instance.ny)) - cast(*void)(*instance)) == 8, "gsl_histogram2d.ny has unexpected offset % instead of 8", ((cast(*void)(*instance.ny)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram2d.ny)) == 8, "gsl_histogram2d.ny has unexpected size % instead of 8", size_of(type_of(gsl_histogram2d.ny)));
        assert(((cast(*void)(*instance.xrange)) - cast(*void)(*instance)) == 16, "gsl_histogram2d.xrange has unexpected offset % instead of 16", ((cast(*void)(*instance.xrange)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram2d.xrange)) == 8, "gsl_histogram2d.xrange has unexpected size % instead of 8", size_of(type_of(gsl_histogram2d.xrange)));
        assert(((cast(*void)(*instance.yrange)) - cast(*void)(*instance)) == 24, "gsl_histogram2d.yrange has unexpected offset % instead of 24", ((cast(*void)(*instance.yrange)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram2d.yrange)) == 8, "gsl_histogram2d.yrange has unexpected size % instead of 8", size_of(type_of(gsl_histogram2d.yrange)));
        assert(((cast(*void)(*instance.bin)) - cast(*void)(*instance)) == 32, "gsl_histogram2d.bin has unexpected offset % instead of 32", ((cast(*void)(*instance.bin)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram2d.bin)) == 8, "gsl_histogram2d.bin has unexpected size % instead of 8", size_of(type_of(gsl_histogram2d.bin)));
        assert(size_of(gsl_histogram2d) == 40, "gsl_histogram2d has size % instead of 40", size_of(gsl_histogram2d));
    }

    {
        instance: gsl_histogram2d_pdf;
        assert(((cast(*void)(*instance.nx)) - cast(*void)(*instance)) == 0, "gsl_histogram2d_pdf.nx has unexpected offset % instead of 0", ((cast(*void)(*instance.nx)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram2d_pdf.nx)) == 8, "gsl_histogram2d_pdf.nx has unexpected size % instead of 8", size_of(type_of(gsl_histogram2d_pdf.nx)));
        assert(((cast(*void)(*instance.ny)) - cast(*void)(*instance)) == 8, "gsl_histogram2d_pdf.ny has unexpected offset % instead of 8", ((cast(*void)(*instance.ny)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram2d_pdf.ny)) == 8, "gsl_histogram2d_pdf.ny has unexpected size % instead of 8", size_of(type_of(gsl_histogram2d_pdf.ny)));
        assert(((cast(*void)(*instance.xrange)) - cast(*void)(*instance)) == 16, "gsl_histogram2d_pdf.xrange has unexpected offset % instead of 16", ((cast(*void)(*instance.xrange)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram2d_pdf.xrange)) == 8, "gsl_histogram2d_pdf.xrange has unexpected size % instead of 8", size_of(type_of(gsl_histogram2d_pdf.xrange)));
        assert(((cast(*void)(*instance.yrange)) - cast(*void)(*instance)) == 24, "gsl_histogram2d_pdf.yrange has unexpected offset % instead of 24", ((cast(*void)(*instance.yrange)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram2d_pdf.yrange)) == 8, "gsl_histogram2d_pdf.yrange has unexpected size % instead of 8", size_of(type_of(gsl_histogram2d_pdf.yrange)));
        assert(((cast(*void)(*instance.sum)) - cast(*void)(*instance)) == 32, "gsl_histogram2d_pdf.sum has unexpected offset % instead of 32", ((cast(*void)(*instance.sum)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_histogram2d_pdf.sum)) == 8, "gsl_histogram2d_pdf.sum has unexpected size % instead of 8", size_of(type_of(gsl_histogram2d_pdf.sum)));
        assert(size_of(gsl_histogram2d_pdf) == 40, "gsl_histogram2d_pdf has size % instead of 40", size_of(gsl_histogram2d_pdf));
    }

    {
        instance: gsl_fft_real_wavetable;
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "gsl_fft_real_wavetable.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_real_wavetable.n)) == 8, "gsl_fft_real_wavetable.n has unexpected size % instead of 8", size_of(type_of(gsl_fft_real_wavetable.n)));
        assert(((cast(*void)(*instance.nf)) - cast(*void)(*instance)) == 8, "gsl_fft_real_wavetable.nf has unexpected offset % instead of 8", ((cast(*void)(*instance.nf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_real_wavetable.nf)) == 8, "gsl_fft_real_wavetable.nf has unexpected size % instead of 8", size_of(type_of(gsl_fft_real_wavetable.nf)));
        assert(((cast(*void)(*instance.factor)) - cast(*void)(*instance)) == 16, "gsl_fft_real_wavetable.factor has unexpected offset % instead of 16", ((cast(*void)(*instance.factor)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_real_wavetable.factor)) == 512, "gsl_fft_real_wavetable.factor has unexpected size % instead of 512", size_of(type_of(gsl_fft_real_wavetable.factor)));
        assert(((cast(*void)(*instance.twiddle)) - cast(*void)(*instance)) == 528, "gsl_fft_real_wavetable.twiddle has unexpected offset % instead of 528", ((cast(*void)(*instance.twiddle)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_real_wavetable.twiddle)) == 512, "gsl_fft_real_wavetable.twiddle has unexpected size % instead of 512", size_of(type_of(gsl_fft_real_wavetable.twiddle)));
        assert(((cast(*void)(*instance.trig)) - cast(*void)(*instance)) == 1040, "gsl_fft_real_wavetable.trig has unexpected offset % instead of 1040", ((cast(*void)(*instance.trig)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_real_wavetable.trig)) == 8, "gsl_fft_real_wavetable.trig has unexpected size % instead of 8", size_of(type_of(gsl_fft_real_wavetable.trig)));
        assert(size_of(gsl_fft_real_wavetable) == 1048, "gsl_fft_real_wavetable has size % instead of 1048", size_of(gsl_fft_real_wavetable));
    }

    {
        instance: gsl_fft_real_workspace;
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "gsl_fft_real_workspace.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_real_workspace.n)) == 8, "gsl_fft_real_workspace.n has unexpected size % instead of 8", size_of(type_of(gsl_fft_real_workspace.n)));
        assert(((cast(*void)(*instance.scratch)) - cast(*void)(*instance)) == 8, "gsl_fft_real_workspace.scratch has unexpected offset % instead of 8", ((cast(*void)(*instance.scratch)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_real_workspace.scratch)) == 8, "gsl_fft_real_workspace.scratch has unexpected size % instead of 8", size_of(type_of(gsl_fft_real_workspace.scratch)));
        assert(size_of(gsl_fft_real_workspace) == 16, "gsl_fft_real_workspace has size % instead of 16", size_of(gsl_fft_real_workspace));
    }

    {
        instance: gsl_fft_complex_wavetable;
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "gsl_fft_complex_wavetable.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_complex_wavetable.n)) == 8, "gsl_fft_complex_wavetable.n has unexpected size % instead of 8", size_of(type_of(gsl_fft_complex_wavetable.n)));
        assert(((cast(*void)(*instance.nf)) - cast(*void)(*instance)) == 8, "gsl_fft_complex_wavetable.nf has unexpected offset % instead of 8", ((cast(*void)(*instance.nf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_complex_wavetable.nf)) == 8, "gsl_fft_complex_wavetable.nf has unexpected size % instead of 8", size_of(type_of(gsl_fft_complex_wavetable.nf)));
        assert(((cast(*void)(*instance.factor)) - cast(*void)(*instance)) == 16, "gsl_fft_complex_wavetable.factor has unexpected offset % instead of 16", ((cast(*void)(*instance.factor)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_complex_wavetable.factor)) == 512, "gsl_fft_complex_wavetable.factor has unexpected size % instead of 512", size_of(type_of(gsl_fft_complex_wavetable.factor)));
        assert(((cast(*void)(*instance.twiddle)) - cast(*void)(*instance)) == 528, "gsl_fft_complex_wavetable.twiddle has unexpected offset % instead of 528", ((cast(*void)(*instance.twiddle)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_complex_wavetable.twiddle)) == 512, "gsl_fft_complex_wavetable.twiddle has unexpected size % instead of 512", size_of(type_of(gsl_fft_complex_wavetable.twiddle)));
        assert(((cast(*void)(*instance.trig)) - cast(*void)(*instance)) == 1040, "gsl_fft_complex_wavetable.trig has unexpected offset % instead of 1040", ((cast(*void)(*instance.trig)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_complex_wavetable.trig)) == 8, "gsl_fft_complex_wavetable.trig has unexpected size % instead of 8", size_of(type_of(gsl_fft_complex_wavetable.trig)));
        assert(size_of(gsl_fft_complex_wavetable) == 1048, "gsl_fft_complex_wavetable has size % instead of 1048", size_of(gsl_fft_complex_wavetable));
    }

    {
        instance: gsl_fft_complex_workspace;
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "gsl_fft_complex_workspace.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_complex_workspace.n)) == 8, "gsl_fft_complex_workspace.n has unexpected size % instead of 8", size_of(type_of(gsl_fft_complex_workspace.n)));
        assert(((cast(*void)(*instance.scratch)) - cast(*void)(*instance)) == 8, "gsl_fft_complex_workspace.scratch has unexpected offset % instead of 8", ((cast(*void)(*instance.scratch)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_fft_complex_workspace.scratch)) == 8, "gsl_fft_complex_workspace.scratch has unexpected size % instead of 8", size_of(type_of(gsl_fft_complex_workspace.scratch)));
        assert(size_of(gsl_fft_complex_workspace) == 16, "gsl_fft_complex_workspace has size % instead of 16", size_of(gsl_fft_complex_workspace));
    }

    {
        instance: gsl_combination_struct;
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "gsl_combination_struct.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_combination_struct.n)) == 8, "gsl_combination_struct.n has unexpected size % instead of 8", size_of(type_of(gsl_combination_struct.n)));
        assert(((cast(*void)(*instance.k)) - cast(*void)(*instance)) == 8, "gsl_combination_struct.k has unexpected offset % instead of 8", ((cast(*void)(*instance.k)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_combination_struct.k)) == 8, "gsl_combination_struct.k has unexpected size % instead of 8", size_of(type_of(gsl_combination_struct.k)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 16, "gsl_combination_struct.data has unexpected offset % instead of 16", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_combination_struct.data)) == 8, "gsl_combination_struct.data has unexpected size % instead of 8", size_of(type_of(gsl_combination_struct.data)));
        assert(size_of(gsl_combination_struct) == 24, "gsl_combination_struct has size % instead of 24", size_of(gsl_combination_struct));
    }

    {
        instance: gsl_interp_accel;
        assert(((cast(*void)(*instance.cache)) - cast(*void)(*instance)) == 0, "gsl_interp_accel.cache has unexpected offset % instead of 0", ((cast(*void)(*instance.cache)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp_accel.cache)) == 8, "gsl_interp_accel.cache has unexpected size % instead of 8", size_of(type_of(gsl_interp_accel.cache)));
        assert(((cast(*void)(*instance.miss_count)) - cast(*void)(*instance)) == 8, "gsl_interp_accel.miss_count has unexpected offset % instead of 8", ((cast(*void)(*instance.miss_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp_accel.miss_count)) == 8, "gsl_interp_accel.miss_count has unexpected size % instead of 8", size_of(type_of(gsl_interp_accel.miss_count)));
        assert(((cast(*void)(*instance.hit_count)) - cast(*void)(*instance)) == 16, "gsl_interp_accel.hit_count has unexpected offset % instead of 16", ((cast(*void)(*instance.hit_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp_accel.hit_count)) == 8, "gsl_interp_accel.hit_count has unexpected size % instead of 8", size_of(type_of(gsl_interp_accel.hit_count)));
        assert(size_of(gsl_interp_accel) == 24, "gsl_interp_accel has size % instead of 24", size_of(gsl_interp_accel));
    }

    {
        instance: gsl_interp_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_interp_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp_type.name)) == 8, "gsl_interp_type.name has unexpected size % instead of 8", size_of(type_of(gsl_interp_type.name)));
        assert(((cast(*void)(*instance.min_size)) - cast(*void)(*instance)) == 8, "gsl_interp_type.min_size has unexpected offset % instead of 8", ((cast(*void)(*instance.min_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp_type.min_size)) == 4, "gsl_interp_type.min_size has unexpected size % instead of 4", size_of(type_of(gsl_interp_type.min_size)));
        assert(((cast(*void)(*instance.alloc)) - cast(*void)(*instance)) == 16, "gsl_interp_type.alloc has unexpected offset % instead of 16", ((cast(*void)(*instance.alloc)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp_type.alloc)) == 8, "gsl_interp_type.alloc has unexpected size % instead of 8", size_of(type_of(gsl_interp_type.alloc)));
        assert(((cast(*void)(*instance.init)) - cast(*void)(*instance)) == 24, "gsl_interp_type.init has unexpected offset % instead of 24", ((cast(*void)(*instance.init)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp_type.init)) == 8, "gsl_interp_type.init has unexpected size % instead of 8", size_of(type_of(gsl_interp_type.init)));
        assert(((cast(*void)(*instance.eval)) - cast(*void)(*instance)) == 32, "gsl_interp_type.eval has unexpected offset % instead of 32", ((cast(*void)(*instance.eval)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp_type.eval)) == 8, "gsl_interp_type.eval has unexpected size % instead of 8", size_of(type_of(gsl_interp_type.eval)));
        assert(((cast(*void)(*instance.eval_deriv)) - cast(*void)(*instance)) == 40, "gsl_interp_type.eval_deriv has unexpected offset % instead of 40", ((cast(*void)(*instance.eval_deriv)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp_type.eval_deriv)) == 8, "gsl_interp_type.eval_deriv has unexpected size % instead of 8", size_of(type_of(gsl_interp_type.eval_deriv)));
        assert(((cast(*void)(*instance.eval_deriv2)) - cast(*void)(*instance)) == 48, "gsl_interp_type.eval_deriv2 has unexpected offset % instead of 48", ((cast(*void)(*instance.eval_deriv2)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp_type.eval_deriv2)) == 8, "gsl_interp_type.eval_deriv2 has unexpected size % instead of 8", size_of(type_of(gsl_interp_type.eval_deriv2)));
        assert(((cast(*void)(*instance.eval_integ)) - cast(*void)(*instance)) == 56, "gsl_interp_type.eval_integ has unexpected offset % instead of 56", ((cast(*void)(*instance.eval_integ)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp_type.eval_integ)) == 8, "gsl_interp_type.eval_integ has unexpected size % instead of 8", size_of(type_of(gsl_interp_type.eval_integ)));
        assert(((cast(*void)(*instance.free)) - cast(*void)(*instance)) == 64, "gsl_interp_type.free has unexpected offset % instead of 64", ((cast(*void)(*instance.free)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp_type.free)) == 8, "gsl_interp_type.free has unexpected size % instead of 8", size_of(type_of(gsl_interp_type.free)));
        assert(size_of(gsl_interp_type) == 72, "gsl_interp_type has size % instead of 72", size_of(gsl_interp_type));
    }

    {
        instance: gsl_interp;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_interp.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp.type)) == 8, "gsl_interp.type has unexpected size % instead of 8", size_of(type_of(gsl_interp.type)));
        assert(((cast(*void)(*instance.xmin)) - cast(*void)(*instance)) == 8, "gsl_interp.xmin has unexpected offset % instead of 8", ((cast(*void)(*instance.xmin)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp.xmin)) == 8, "gsl_interp.xmin has unexpected size % instead of 8", size_of(type_of(gsl_interp.xmin)));
        assert(((cast(*void)(*instance.xmax)) - cast(*void)(*instance)) == 16, "gsl_interp.xmax has unexpected offset % instead of 16", ((cast(*void)(*instance.xmax)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp.xmax)) == 8, "gsl_interp.xmax has unexpected size % instead of 8", size_of(type_of(gsl_interp.xmax)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 24, "gsl_interp.size has unexpected offset % instead of 24", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp.size)) == 8, "gsl_interp.size has unexpected size % instead of 8", size_of(type_of(gsl_interp.size)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 32, "gsl_interp.state has unexpected offset % instead of 32", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_interp.state)) == 8, "gsl_interp.state has unexpected size % instead of 8", size_of(type_of(gsl_interp.state)));
        assert(size_of(gsl_interp) == 40, "gsl_interp has size % instead of 40", size_of(gsl_interp));
    }

    {
        instance: gsl_spline;
        assert(((cast(*void)(*instance.interp)) - cast(*void)(*instance)) == 0, "gsl_spline.interp has unexpected offset % instead of 0", ((cast(*void)(*instance.interp)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_spline.interp)) == 8, "gsl_spline.interp has unexpected size % instead of 8", size_of(type_of(gsl_spline.interp)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 8, "gsl_spline.x has unexpected offset % instead of 8", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_spline.x)) == 8, "gsl_spline.x has unexpected size % instead of 8", size_of(type_of(gsl_spline.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 16, "gsl_spline.y has unexpected offset % instead of 16", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_spline.y)) == 8, "gsl_spline.y has unexpected size % instead of 8", size_of(type_of(gsl_spline.y)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 24, "gsl_spline.size has unexpected offset % instead of 24", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_spline.size)) == 8, "gsl_spline.size has unexpected size % instead of 8", size_of(type_of(gsl_spline.size)));
        assert(size_of(gsl_spline) == 32, "gsl_spline has size % instead of 32", size_of(gsl_spline));
    }

    {
        instance: gsl_cheb_series_struct;
        assert(((cast(*void)(*instance.c)) - cast(*void)(*instance)) == 0, "gsl_cheb_series_struct.c has unexpected offset % instead of 0", ((cast(*void)(*instance.c)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_cheb_series_struct.c)) == 8, "gsl_cheb_series_struct.c has unexpected size % instead of 8", size_of(type_of(gsl_cheb_series_struct.c)));
        assert(((cast(*void)(*instance.order)) - cast(*void)(*instance)) == 8, "gsl_cheb_series_struct.order has unexpected offset % instead of 8", ((cast(*void)(*instance.order)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_cheb_series_struct.order)) == 8, "gsl_cheb_series_struct.order has unexpected size % instead of 8", size_of(type_of(gsl_cheb_series_struct.order)));
        assert(((cast(*void)(*instance.a)) - cast(*void)(*instance)) == 16, "gsl_cheb_series_struct.a has unexpected offset % instead of 16", ((cast(*void)(*instance.a)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_cheb_series_struct.a)) == 8, "gsl_cheb_series_struct.a has unexpected size % instead of 8", size_of(type_of(gsl_cheb_series_struct.a)));
        assert(((cast(*void)(*instance.b)) - cast(*void)(*instance)) == 24, "gsl_cheb_series_struct.b has unexpected offset % instead of 24", ((cast(*void)(*instance.b)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_cheb_series_struct.b)) == 8, "gsl_cheb_series_struct.b has unexpected size % instead of 8", size_of(type_of(gsl_cheb_series_struct.b)));
        assert(((cast(*void)(*instance.order_sp)) - cast(*void)(*instance)) == 32, "gsl_cheb_series_struct.order_sp has unexpected offset % instead of 32", ((cast(*void)(*instance.order_sp)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_cheb_series_struct.order_sp)) == 8, "gsl_cheb_series_struct.order_sp has unexpected size % instead of 8", size_of(type_of(gsl_cheb_series_struct.order_sp)));
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 40, "gsl_cheb_series_struct.f has unexpected offset % instead of 40", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_cheb_series_struct.f)) == 8, "gsl_cheb_series_struct.f has unexpected size % instead of 8", size_of(type_of(gsl_cheb_series_struct.f)));
        assert(size_of(gsl_cheb_series_struct) == 48, "gsl_cheb_series_struct has size % instead of 48", size_of(gsl_cheb_series_struct));
    }

    {
        instance: gsl_sum_levin_u_workspace;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_sum_levin_u_workspace.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_u_workspace.size)) == 8, "gsl_sum_levin_u_workspace.size has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_u_workspace.size)));
        assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 8, "gsl_sum_levin_u_workspace.i has unexpected offset % instead of 8", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_u_workspace.i)) == 8, "gsl_sum_levin_u_workspace.i has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_u_workspace.i)));
        assert(((cast(*void)(*instance.terms_used)) - cast(*void)(*instance)) == 16, "gsl_sum_levin_u_workspace.terms_used has unexpected offset % instead of 16", ((cast(*void)(*instance.terms_used)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_u_workspace.terms_used)) == 8, "gsl_sum_levin_u_workspace.terms_used has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_u_workspace.terms_used)));
        assert(((cast(*void)(*instance.sum_plain)) - cast(*void)(*instance)) == 24, "gsl_sum_levin_u_workspace.sum_plain has unexpected offset % instead of 24", ((cast(*void)(*instance.sum_plain)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_u_workspace.sum_plain)) == 8, "gsl_sum_levin_u_workspace.sum_plain has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_u_workspace.sum_plain)));
        assert(((cast(*void)(*instance.q_num)) - cast(*void)(*instance)) == 32, "gsl_sum_levin_u_workspace.q_num has unexpected offset % instead of 32", ((cast(*void)(*instance.q_num)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_u_workspace.q_num)) == 8, "gsl_sum_levin_u_workspace.q_num has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_u_workspace.q_num)));
        assert(((cast(*void)(*instance.q_den)) - cast(*void)(*instance)) == 40, "gsl_sum_levin_u_workspace.q_den has unexpected offset % instead of 40", ((cast(*void)(*instance.q_den)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_u_workspace.q_den)) == 8, "gsl_sum_levin_u_workspace.q_den has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_u_workspace.q_den)));
        assert(((cast(*void)(*instance.dq_num)) - cast(*void)(*instance)) == 48, "gsl_sum_levin_u_workspace.dq_num has unexpected offset % instead of 48", ((cast(*void)(*instance.dq_num)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_u_workspace.dq_num)) == 8, "gsl_sum_levin_u_workspace.dq_num has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_u_workspace.dq_num)));
        assert(((cast(*void)(*instance.dq_den)) - cast(*void)(*instance)) == 56, "gsl_sum_levin_u_workspace.dq_den has unexpected offset % instead of 56", ((cast(*void)(*instance.dq_den)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_u_workspace.dq_den)) == 8, "gsl_sum_levin_u_workspace.dq_den has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_u_workspace.dq_den)));
        assert(((cast(*void)(*instance.dsum)) - cast(*void)(*instance)) == 64, "gsl_sum_levin_u_workspace.dsum has unexpected offset % instead of 64", ((cast(*void)(*instance.dsum)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_u_workspace.dsum)) == 8, "gsl_sum_levin_u_workspace.dsum has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_u_workspace.dsum)));
        assert(size_of(gsl_sum_levin_u_workspace) == 72, "gsl_sum_levin_u_workspace has size % instead of 72", size_of(gsl_sum_levin_u_workspace));
    }

    {
        instance: gsl_sum_levin_utrunc_workspace;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_sum_levin_utrunc_workspace.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_utrunc_workspace.size)) == 8, "gsl_sum_levin_utrunc_workspace.size has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_utrunc_workspace.size)));
        assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 8, "gsl_sum_levin_utrunc_workspace.i has unexpected offset % instead of 8", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_utrunc_workspace.i)) == 8, "gsl_sum_levin_utrunc_workspace.i has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_utrunc_workspace.i)));
        assert(((cast(*void)(*instance.terms_used)) - cast(*void)(*instance)) == 16, "gsl_sum_levin_utrunc_workspace.terms_used has unexpected offset % instead of 16", ((cast(*void)(*instance.terms_used)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_utrunc_workspace.terms_used)) == 8, "gsl_sum_levin_utrunc_workspace.terms_used has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_utrunc_workspace.terms_used)));
        assert(((cast(*void)(*instance.sum_plain)) - cast(*void)(*instance)) == 24, "gsl_sum_levin_utrunc_workspace.sum_plain has unexpected offset % instead of 24", ((cast(*void)(*instance.sum_plain)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_utrunc_workspace.sum_plain)) == 8, "gsl_sum_levin_utrunc_workspace.sum_plain has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_utrunc_workspace.sum_plain)));
        assert(((cast(*void)(*instance.q_num)) - cast(*void)(*instance)) == 32, "gsl_sum_levin_utrunc_workspace.q_num has unexpected offset % instead of 32", ((cast(*void)(*instance.q_num)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_utrunc_workspace.q_num)) == 8, "gsl_sum_levin_utrunc_workspace.q_num has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_utrunc_workspace.q_num)));
        assert(((cast(*void)(*instance.q_den)) - cast(*void)(*instance)) == 40, "gsl_sum_levin_utrunc_workspace.q_den has unexpected offset % instead of 40", ((cast(*void)(*instance.q_den)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_utrunc_workspace.q_den)) == 8, "gsl_sum_levin_utrunc_workspace.q_den has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_utrunc_workspace.q_den)));
        assert(((cast(*void)(*instance.dsum)) - cast(*void)(*instance)) == 48, "gsl_sum_levin_utrunc_workspace.dsum has unexpected offset % instead of 48", ((cast(*void)(*instance.dsum)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_sum_levin_utrunc_workspace.dsum)) == 8, "gsl_sum_levin_utrunc_workspace.dsum has unexpected size % instead of 8", size_of(type_of(gsl_sum_levin_utrunc_workspace.dsum)));
        assert(size_of(gsl_sum_levin_utrunc_workspace) == 56, "gsl_sum_levin_utrunc_workspace has size % instead of 56", size_of(gsl_sum_levin_utrunc_workspace));
    }

    {
        instance: gsl_wavelet_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_wavelet_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_wavelet_type.name)) == 8, "gsl_wavelet_type.name has unexpected size % instead of 8", size_of(type_of(gsl_wavelet_type.name)));
        assert(((cast(*void)(*instance.init)) - cast(*void)(*instance)) == 8, "gsl_wavelet_type.init has unexpected offset % instead of 8", ((cast(*void)(*instance.init)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_wavelet_type.init)) == 8, "gsl_wavelet_type.init has unexpected size % instead of 8", size_of(type_of(gsl_wavelet_type.init)));
        assert(size_of(gsl_wavelet_type) == 16, "gsl_wavelet_type has size % instead of 16", size_of(gsl_wavelet_type));
    }

    {
        instance: gsl_wavelet;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_wavelet.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_wavelet.type)) == 8, "gsl_wavelet.type has unexpected size % instead of 8", size_of(type_of(gsl_wavelet.type)));
        assert(((cast(*void)(*instance.h1)) - cast(*void)(*instance)) == 8, "gsl_wavelet.h1 has unexpected offset % instead of 8", ((cast(*void)(*instance.h1)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_wavelet.h1)) == 8, "gsl_wavelet.h1 has unexpected size % instead of 8", size_of(type_of(gsl_wavelet.h1)));
        assert(((cast(*void)(*instance.g1)) - cast(*void)(*instance)) == 16, "gsl_wavelet.g1 has unexpected offset % instead of 16", ((cast(*void)(*instance.g1)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_wavelet.g1)) == 8, "gsl_wavelet.g1 has unexpected size % instead of 8", size_of(type_of(gsl_wavelet.g1)));
        assert(((cast(*void)(*instance.h2)) - cast(*void)(*instance)) == 24, "gsl_wavelet.h2 has unexpected offset % instead of 24", ((cast(*void)(*instance.h2)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_wavelet.h2)) == 8, "gsl_wavelet.h2 has unexpected size % instead of 8", size_of(type_of(gsl_wavelet.h2)));
        assert(((cast(*void)(*instance.g2)) - cast(*void)(*instance)) == 32, "gsl_wavelet.g2 has unexpected offset % instead of 32", ((cast(*void)(*instance.g2)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_wavelet.g2)) == 8, "gsl_wavelet.g2 has unexpected size % instead of 8", size_of(type_of(gsl_wavelet.g2)));
        assert(((cast(*void)(*instance.nc)) - cast(*void)(*instance)) == 40, "gsl_wavelet.nc has unexpected offset % instead of 40", ((cast(*void)(*instance.nc)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_wavelet.nc)) == 8, "gsl_wavelet.nc has unexpected size % instead of 8", size_of(type_of(gsl_wavelet.nc)));
        assert(((cast(*void)(*instance.offset)) - cast(*void)(*instance)) == 48, "gsl_wavelet.offset has unexpected offset % instead of 48", ((cast(*void)(*instance.offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_wavelet.offset)) == 8, "gsl_wavelet.offset has unexpected size % instead of 8", size_of(type_of(gsl_wavelet.offset)));
        assert(size_of(gsl_wavelet) == 56, "gsl_wavelet has size % instead of 56", size_of(gsl_wavelet));
    }

    {
        instance: gsl_wavelet_workspace;
        assert(((cast(*void)(*instance.scratch)) - cast(*void)(*instance)) == 0, "gsl_wavelet_workspace.scratch has unexpected offset % instead of 0", ((cast(*void)(*instance.scratch)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_wavelet_workspace.scratch)) == 8, "gsl_wavelet_workspace.scratch has unexpected size % instead of 8", size_of(type_of(gsl_wavelet_workspace.scratch)));
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 8, "gsl_wavelet_workspace.n has unexpected offset % instead of 8", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_wavelet_workspace.n)) == 8, "gsl_wavelet_workspace.n has unexpected size % instead of 8", size_of(type_of(gsl_wavelet_workspace.n)));
        assert(size_of(gsl_wavelet_workspace) == 16, "gsl_wavelet_workspace has size % instead of 16", size_of(gsl_wavelet_workspace));
    }

    {
        instance: gsl_dht_struct;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_dht_struct.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_dht_struct.size)) == 8, "gsl_dht_struct.size has unexpected size % instead of 8", size_of(type_of(gsl_dht_struct.size)));
        assert(((cast(*void)(*instance.nu)) - cast(*void)(*instance)) == 8, "gsl_dht_struct.nu has unexpected offset % instead of 8", ((cast(*void)(*instance.nu)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_dht_struct.nu)) == 8, "gsl_dht_struct.nu has unexpected size % instead of 8", size_of(type_of(gsl_dht_struct.nu)));
        assert(((cast(*void)(*instance.xmax)) - cast(*void)(*instance)) == 16, "gsl_dht_struct.xmax has unexpected offset % instead of 16", ((cast(*void)(*instance.xmax)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_dht_struct.xmax)) == 8, "gsl_dht_struct.xmax has unexpected size % instead of 8", size_of(type_of(gsl_dht_struct.xmax)));
        assert(((cast(*void)(*instance.kmax)) - cast(*void)(*instance)) == 24, "gsl_dht_struct.kmax has unexpected offset % instead of 24", ((cast(*void)(*instance.kmax)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_dht_struct.kmax)) == 8, "gsl_dht_struct.kmax has unexpected size % instead of 8", size_of(type_of(gsl_dht_struct.kmax)));
        assert(((cast(*void)(*instance.j)) - cast(*void)(*instance)) == 32, "gsl_dht_struct.j has unexpected offset % instead of 32", ((cast(*void)(*instance.j)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_dht_struct.j)) == 8, "gsl_dht_struct.j has unexpected size % instead of 8", size_of(type_of(gsl_dht_struct.j)));
        assert(((cast(*void)(*instance.Jjj)) - cast(*void)(*instance)) == 40, "gsl_dht_struct.Jjj has unexpected offset % instead of 40", ((cast(*void)(*instance.Jjj)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_dht_struct.Jjj)) == 8, "gsl_dht_struct.Jjj has unexpected size % instead of 8", size_of(type_of(gsl_dht_struct.Jjj)));
        assert(((cast(*void)(*instance.J2)) - cast(*void)(*instance)) == 48, "gsl_dht_struct.J2 has unexpected offset % instead of 48", ((cast(*void)(*instance.J2)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_dht_struct.J2)) == 8, "gsl_dht_struct.J2 has unexpected size % instead of 8", size_of(type_of(gsl_dht_struct.J2)));
        assert(size_of(gsl_dht_struct) == 56, "gsl_dht_struct has size % instead of 56", size_of(gsl_dht_struct));
    }

    {
        instance: gsl_poly_complex_workspace;
        assert(((cast(*void)(*instance.nc)) - cast(*void)(*instance)) == 0, "gsl_poly_complex_workspace.nc has unexpected offset % instead of 0", ((cast(*void)(*instance.nc)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_poly_complex_workspace.nc)) == 8, "gsl_poly_complex_workspace.nc has unexpected size % instead of 8", size_of(type_of(gsl_poly_complex_workspace.nc)));
        assert(((cast(*void)(*instance.matrix)) - cast(*void)(*instance)) == 8, "gsl_poly_complex_workspace.matrix has unexpected offset % instead of 8", ((cast(*void)(*instance.matrix)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_poly_complex_workspace.matrix)) == 8, "gsl_poly_complex_workspace.matrix has unexpected size % instead of 8", size_of(type_of(gsl_poly_complex_workspace.matrix)));
        assert(size_of(gsl_poly_complex_workspace) == 16, "gsl_poly_complex_workspace has size % instead of 16", size_of(gsl_poly_complex_workspace));
    }

    {
        instance: gsl_integration_workspace;
        assert(((cast(*void)(*instance.limit)) - cast(*void)(*instance)) == 0, "gsl_integration_workspace.limit has unexpected offset % instead of 0", ((cast(*void)(*instance.limit)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_workspace.limit)) == 8, "gsl_integration_workspace.limit has unexpected size % instead of 8", size_of(type_of(gsl_integration_workspace.limit)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 8, "gsl_integration_workspace.size has unexpected offset % instead of 8", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_workspace.size)) == 8, "gsl_integration_workspace.size has unexpected size % instead of 8", size_of(type_of(gsl_integration_workspace.size)));
        assert(((cast(*void)(*instance.nrmax)) - cast(*void)(*instance)) == 16, "gsl_integration_workspace.nrmax has unexpected offset % instead of 16", ((cast(*void)(*instance.nrmax)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_workspace.nrmax)) == 8, "gsl_integration_workspace.nrmax has unexpected size % instead of 8", size_of(type_of(gsl_integration_workspace.nrmax)));
        assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 24, "gsl_integration_workspace.i has unexpected offset % instead of 24", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_workspace.i)) == 8, "gsl_integration_workspace.i has unexpected size % instead of 8", size_of(type_of(gsl_integration_workspace.i)));
        assert(((cast(*void)(*instance.maximum_level)) - cast(*void)(*instance)) == 32, "gsl_integration_workspace.maximum_level has unexpected offset % instead of 32", ((cast(*void)(*instance.maximum_level)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_workspace.maximum_level)) == 8, "gsl_integration_workspace.maximum_level has unexpected size % instead of 8", size_of(type_of(gsl_integration_workspace.maximum_level)));
        assert(((cast(*void)(*instance.alist)) - cast(*void)(*instance)) == 40, "gsl_integration_workspace.alist has unexpected offset % instead of 40", ((cast(*void)(*instance.alist)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_workspace.alist)) == 8, "gsl_integration_workspace.alist has unexpected size % instead of 8", size_of(type_of(gsl_integration_workspace.alist)));
        assert(((cast(*void)(*instance.blist)) - cast(*void)(*instance)) == 48, "gsl_integration_workspace.blist has unexpected offset % instead of 48", ((cast(*void)(*instance.blist)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_workspace.blist)) == 8, "gsl_integration_workspace.blist has unexpected size % instead of 8", size_of(type_of(gsl_integration_workspace.blist)));
        assert(((cast(*void)(*instance.rlist)) - cast(*void)(*instance)) == 56, "gsl_integration_workspace.rlist has unexpected offset % instead of 56", ((cast(*void)(*instance.rlist)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_workspace.rlist)) == 8, "gsl_integration_workspace.rlist has unexpected size % instead of 8", size_of(type_of(gsl_integration_workspace.rlist)));
        assert(((cast(*void)(*instance.elist)) - cast(*void)(*instance)) == 64, "gsl_integration_workspace.elist has unexpected offset % instead of 64", ((cast(*void)(*instance.elist)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_workspace.elist)) == 8, "gsl_integration_workspace.elist has unexpected size % instead of 8", size_of(type_of(gsl_integration_workspace.elist)));
        assert(((cast(*void)(*instance.order)) - cast(*void)(*instance)) == 72, "gsl_integration_workspace.order has unexpected offset % instead of 72", ((cast(*void)(*instance.order)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_workspace.order)) == 8, "gsl_integration_workspace.order has unexpected size % instead of 8", size_of(type_of(gsl_integration_workspace.order)));
        assert(((cast(*void)(*instance.level)) - cast(*void)(*instance)) == 80, "gsl_integration_workspace.level has unexpected offset % instead of 80", ((cast(*void)(*instance.level)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_workspace.level)) == 8, "gsl_integration_workspace.level has unexpected size % instead of 8", size_of(type_of(gsl_integration_workspace.level)));
        assert(size_of(gsl_integration_workspace) == 88, "gsl_integration_workspace has size % instead of 88", size_of(gsl_integration_workspace));
    }

    {
        instance: gsl_integration_qaws_table;
        assert(((cast(*void)(*instance.alpha)) - cast(*void)(*instance)) == 0, "gsl_integration_qaws_table.alpha has unexpected offset % instead of 0", ((cast(*void)(*instance.alpha)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qaws_table.alpha)) == 8, "gsl_integration_qaws_table.alpha has unexpected size % instead of 8", size_of(type_of(gsl_integration_qaws_table.alpha)));
        assert(((cast(*void)(*instance.beta)) - cast(*void)(*instance)) == 8, "gsl_integration_qaws_table.beta has unexpected offset % instead of 8", ((cast(*void)(*instance.beta)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qaws_table.beta)) == 8, "gsl_integration_qaws_table.beta has unexpected size % instead of 8", size_of(type_of(gsl_integration_qaws_table.beta)));
        assert(((cast(*void)(*instance.mu)) - cast(*void)(*instance)) == 16, "gsl_integration_qaws_table.mu has unexpected offset % instead of 16", ((cast(*void)(*instance.mu)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qaws_table.mu)) == 4, "gsl_integration_qaws_table.mu has unexpected size % instead of 4", size_of(type_of(gsl_integration_qaws_table.mu)));
        assert(((cast(*void)(*instance.nu)) - cast(*void)(*instance)) == 20, "gsl_integration_qaws_table.nu has unexpected offset % instead of 20", ((cast(*void)(*instance.nu)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qaws_table.nu)) == 4, "gsl_integration_qaws_table.nu has unexpected size % instead of 4", size_of(type_of(gsl_integration_qaws_table.nu)));
        assert(((cast(*void)(*instance.ri)) - cast(*void)(*instance)) == 24, "gsl_integration_qaws_table.ri has unexpected offset % instead of 24", ((cast(*void)(*instance.ri)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qaws_table.ri)) == 200, "gsl_integration_qaws_table.ri has unexpected size % instead of 200", size_of(type_of(gsl_integration_qaws_table.ri)));
        assert(((cast(*void)(*instance.rj)) - cast(*void)(*instance)) == 224, "gsl_integration_qaws_table.rj has unexpected offset % instead of 224", ((cast(*void)(*instance.rj)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qaws_table.rj)) == 200, "gsl_integration_qaws_table.rj has unexpected size % instead of 200", size_of(type_of(gsl_integration_qaws_table.rj)));
        assert(((cast(*void)(*instance.rg)) - cast(*void)(*instance)) == 424, "gsl_integration_qaws_table.rg has unexpected offset % instead of 424", ((cast(*void)(*instance.rg)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qaws_table.rg)) == 200, "gsl_integration_qaws_table.rg has unexpected size % instead of 200", size_of(type_of(gsl_integration_qaws_table.rg)));
        assert(((cast(*void)(*instance.rh)) - cast(*void)(*instance)) == 624, "gsl_integration_qaws_table.rh has unexpected offset % instead of 624", ((cast(*void)(*instance.rh)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qaws_table.rh)) == 200, "gsl_integration_qaws_table.rh has unexpected size % instead of 200", size_of(type_of(gsl_integration_qaws_table.rh)));
        assert(size_of(gsl_integration_qaws_table) == 824, "gsl_integration_qaws_table has size % instead of 824", size_of(gsl_integration_qaws_table));
    }

    {
        instance: gsl_integration_qawo_table;
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "gsl_integration_qawo_table.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qawo_table.n)) == 8, "gsl_integration_qawo_table.n has unexpected size % instead of 8", size_of(type_of(gsl_integration_qawo_table.n)));
        assert(((cast(*void)(*instance.omega)) - cast(*void)(*instance)) == 8, "gsl_integration_qawo_table.omega has unexpected offset % instead of 8", ((cast(*void)(*instance.omega)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qawo_table.omega)) == 8, "gsl_integration_qawo_table.omega has unexpected size % instead of 8", size_of(type_of(gsl_integration_qawo_table.omega)));
        assert(((cast(*void)(*instance.L)) - cast(*void)(*instance)) == 16, "gsl_integration_qawo_table.L has unexpected offset % instead of 16", ((cast(*void)(*instance.L)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qawo_table.L)) == 8, "gsl_integration_qawo_table.L has unexpected size % instead of 8", size_of(type_of(gsl_integration_qawo_table.L)));
        assert(((cast(*void)(*instance.par)) - cast(*void)(*instance)) == 24, "gsl_integration_qawo_table.par has unexpected offset % instead of 24", ((cast(*void)(*instance.par)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qawo_table.par)) == 8, "gsl_integration_qawo_table.par has unexpected size % instead of 8", size_of(type_of(gsl_integration_qawo_table.par)));
        assert(((cast(*void)(*instance.sine)) - cast(*void)(*instance)) == 32, "gsl_integration_qawo_table.sine has unexpected offset % instead of 32", ((cast(*void)(*instance.sine)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qawo_table.sine)) == 4, "gsl_integration_qawo_table.sine has unexpected size % instead of 4", size_of(type_of(gsl_integration_qawo_table.sine)));
        assert(((cast(*void)(*instance.chebmo)) - cast(*void)(*instance)) == 40, "gsl_integration_qawo_table.chebmo has unexpected offset % instead of 40", ((cast(*void)(*instance.chebmo)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_qawo_table.chebmo)) == 8, "gsl_integration_qawo_table.chebmo has unexpected size % instead of 8", size_of(type_of(gsl_integration_qawo_table.chebmo)));
        assert(size_of(gsl_integration_qawo_table) == 48, "gsl_integration_qawo_table has size % instead of 48", size_of(gsl_integration_qawo_table));
    }

    {
        instance: gsl_integration_glfixed_table;
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "gsl_integration_glfixed_table.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_glfixed_table.n)) == 8, "gsl_integration_glfixed_table.n has unexpected size % instead of 8", size_of(type_of(gsl_integration_glfixed_table.n)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 8, "gsl_integration_glfixed_table.x has unexpected offset % instead of 8", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_glfixed_table.x)) == 8, "gsl_integration_glfixed_table.x has unexpected size % instead of 8", size_of(type_of(gsl_integration_glfixed_table.x)));
        assert(((cast(*void)(*instance.w)) - cast(*void)(*instance)) == 16, "gsl_integration_glfixed_table.w has unexpected offset % instead of 16", ((cast(*void)(*instance.w)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_glfixed_table.w)) == 8, "gsl_integration_glfixed_table.w has unexpected size % instead of 8", size_of(type_of(gsl_integration_glfixed_table.w)));
        assert(((cast(*void)(*instance.precomputed)) - cast(*void)(*instance)) == 24, "gsl_integration_glfixed_table.precomputed has unexpected offset % instead of 24", ((cast(*void)(*instance.precomputed)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_glfixed_table.precomputed)) == 4, "gsl_integration_glfixed_table.precomputed has unexpected size % instead of 4", size_of(type_of(gsl_integration_glfixed_table.precomputed)));
        assert(size_of(gsl_integration_glfixed_table) == 32, "gsl_integration_glfixed_table has size % instead of 32", size_of(gsl_integration_glfixed_table));
    }

    {
        instance: gsl_integration_cquad_ival;
        assert(((cast(*void)(*instance.a)) - cast(*void)(*instance)) == 0, "gsl_integration_cquad_ival.a has unexpected offset % instead of 0", ((cast(*void)(*instance.a)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_cquad_ival.a)) == 8, "gsl_integration_cquad_ival.a has unexpected size % instead of 8", size_of(type_of(gsl_integration_cquad_ival.a)));
        assert(((cast(*void)(*instance.b)) - cast(*void)(*instance)) == 8, "gsl_integration_cquad_ival.b has unexpected offset % instead of 8", ((cast(*void)(*instance.b)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_cquad_ival.b)) == 8, "gsl_integration_cquad_ival.b has unexpected size % instead of 8", size_of(type_of(gsl_integration_cquad_ival.b)));
        assert(((cast(*void)(*instance.c)) - cast(*void)(*instance)) == 16, "gsl_integration_cquad_ival.c has unexpected offset % instead of 16", ((cast(*void)(*instance.c)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_cquad_ival.c)) == 512, "gsl_integration_cquad_ival.c has unexpected size % instead of 512", size_of(type_of(gsl_integration_cquad_ival.c)));
        assert(((cast(*void)(*instance.fx)) - cast(*void)(*instance)) == 528, "gsl_integration_cquad_ival.fx has unexpected offset % instead of 528", ((cast(*void)(*instance.fx)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_cquad_ival.fx)) == 264, "gsl_integration_cquad_ival.fx has unexpected size % instead of 264", size_of(type_of(gsl_integration_cquad_ival.fx)));
        assert(((cast(*void)(*instance.igral)) - cast(*void)(*instance)) == 792, "gsl_integration_cquad_ival.igral has unexpected offset % instead of 792", ((cast(*void)(*instance.igral)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_cquad_ival.igral)) == 8, "gsl_integration_cquad_ival.igral has unexpected size % instead of 8", size_of(type_of(gsl_integration_cquad_ival.igral)));
        assert(((cast(*void)(*instance.err)) - cast(*void)(*instance)) == 800, "gsl_integration_cquad_ival.err has unexpected offset % instead of 800", ((cast(*void)(*instance.err)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_cquad_ival.err)) == 8, "gsl_integration_cquad_ival.err has unexpected size % instead of 8", size_of(type_of(gsl_integration_cquad_ival.err)));
        assert(((cast(*void)(*instance.depth)) - cast(*void)(*instance)) == 808, "gsl_integration_cquad_ival.depth has unexpected offset % instead of 808", ((cast(*void)(*instance.depth)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_cquad_ival.depth)) == 4, "gsl_integration_cquad_ival.depth has unexpected size % instead of 4", size_of(type_of(gsl_integration_cquad_ival.depth)));
        assert(((cast(*void)(*instance.rdepth)) - cast(*void)(*instance)) == 812, "gsl_integration_cquad_ival.rdepth has unexpected offset % instead of 812", ((cast(*void)(*instance.rdepth)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_cquad_ival.rdepth)) == 4, "gsl_integration_cquad_ival.rdepth has unexpected size % instead of 4", size_of(type_of(gsl_integration_cquad_ival.rdepth)));
        assert(((cast(*void)(*instance.ndiv)) - cast(*void)(*instance)) == 816, "gsl_integration_cquad_ival.ndiv has unexpected offset % instead of 816", ((cast(*void)(*instance.ndiv)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_cquad_ival.ndiv)) == 4, "gsl_integration_cquad_ival.ndiv has unexpected size % instead of 4", size_of(type_of(gsl_integration_cquad_ival.ndiv)));
        assert(size_of(gsl_integration_cquad_ival) == 824, "gsl_integration_cquad_ival has size % instead of 824", size_of(gsl_integration_cquad_ival));
    }

    {
        instance: gsl_integration_cquad_workspace;
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 0, "gsl_integration_cquad_workspace.size has unexpected offset % instead of 0", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_cquad_workspace.size)) == 8, "gsl_integration_cquad_workspace.size has unexpected size % instead of 8", size_of(type_of(gsl_integration_cquad_workspace.size)));
        assert(((cast(*void)(*instance.ivals)) - cast(*void)(*instance)) == 8, "gsl_integration_cquad_workspace.ivals has unexpected offset % instead of 8", ((cast(*void)(*instance.ivals)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_cquad_workspace.ivals)) == 8, "gsl_integration_cquad_workspace.ivals has unexpected size % instead of 8", size_of(type_of(gsl_integration_cquad_workspace.ivals)));
        assert(((cast(*void)(*instance.heap)) - cast(*void)(*instance)) == 16, "gsl_integration_cquad_workspace.heap has unexpected offset % instead of 16", ((cast(*void)(*instance.heap)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_cquad_workspace.heap)) == 8, "gsl_integration_cquad_workspace.heap has unexpected size % instead of 8", size_of(type_of(gsl_integration_cquad_workspace.heap)));
        assert(size_of(gsl_integration_cquad_workspace) == 24, "gsl_integration_cquad_workspace has size % instead of 24", size_of(gsl_integration_cquad_workspace));
    }

    {
        instance: gsl_integration_romberg_workspace;
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "gsl_integration_romberg_workspace.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_romberg_workspace.n)) == 8, "gsl_integration_romberg_workspace.n has unexpected size % instead of 8", size_of(type_of(gsl_integration_romberg_workspace.n)));
        assert(((cast(*void)(*instance.work1)) - cast(*void)(*instance)) == 8, "gsl_integration_romberg_workspace.work1 has unexpected offset % instead of 8", ((cast(*void)(*instance.work1)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_romberg_workspace.work1)) == 8, "gsl_integration_romberg_workspace.work1 has unexpected size % instead of 8", size_of(type_of(gsl_integration_romberg_workspace.work1)));
        assert(((cast(*void)(*instance.work2)) - cast(*void)(*instance)) == 16, "gsl_integration_romberg_workspace.work2 has unexpected offset % instead of 16", ((cast(*void)(*instance.work2)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_romberg_workspace.work2)) == 8, "gsl_integration_romberg_workspace.work2 has unexpected size % instead of 8", size_of(type_of(gsl_integration_romberg_workspace.work2)));
        assert(size_of(gsl_integration_romberg_workspace) == 24, "gsl_integration_romberg_workspace has size % instead of 24", size_of(gsl_integration_romberg_workspace));
    }

    {
        instance: gsl_integration_fixed_params;
        assert(((cast(*void)(*instance.alpha)) - cast(*void)(*instance)) == 0, "gsl_integration_fixed_params.alpha has unexpected offset % instead of 0", ((cast(*void)(*instance.alpha)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_params.alpha)) == 8, "gsl_integration_fixed_params.alpha has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_params.alpha)));
        assert(((cast(*void)(*instance.beta)) - cast(*void)(*instance)) == 8, "gsl_integration_fixed_params.beta has unexpected offset % instead of 8", ((cast(*void)(*instance.beta)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_params.beta)) == 8, "gsl_integration_fixed_params.beta has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_params.beta)));
        assert(((cast(*void)(*instance.a)) - cast(*void)(*instance)) == 16, "gsl_integration_fixed_params.a has unexpected offset % instead of 16", ((cast(*void)(*instance.a)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_params.a)) == 8, "gsl_integration_fixed_params.a has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_params.a)));
        assert(((cast(*void)(*instance.b)) - cast(*void)(*instance)) == 24, "gsl_integration_fixed_params.b has unexpected offset % instead of 24", ((cast(*void)(*instance.b)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_params.b)) == 8, "gsl_integration_fixed_params.b has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_params.b)));
        assert(((cast(*void)(*instance.zemu)) - cast(*void)(*instance)) == 32, "gsl_integration_fixed_params.zemu has unexpected offset % instead of 32", ((cast(*void)(*instance.zemu)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_params.zemu)) == 8, "gsl_integration_fixed_params.zemu has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_params.zemu)));
        assert(((cast(*void)(*instance.shft)) - cast(*void)(*instance)) == 40, "gsl_integration_fixed_params.shft has unexpected offset % instead of 40", ((cast(*void)(*instance.shft)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_params.shft)) == 8, "gsl_integration_fixed_params.shft has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_params.shft)));
        assert(((cast(*void)(*instance.slp)) - cast(*void)(*instance)) == 48, "gsl_integration_fixed_params.slp has unexpected offset % instead of 48", ((cast(*void)(*instance.slp)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_params.slp)) == 8, "gsl_integration_fixed_params.slp has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_params.slp)));
        assert(((cast(*void)(*instance.al)) - cast(*void)(*instance)) == 56, "gsl_integration_fixed_params.al has unexpected offset % instead of 56", ((cast(*void)(*instance.al)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_params.al)) == 8, "gsl_integration_fixed_params.al has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_params.al)));
        assert(((cast(*void)(*instance.be)) - cast(*void)(*instance)) == 64, "gsl_integration_fixed_params.be has unexpected offset % instead of 64", ((cast(*void)(*instance.be)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_params.be)) == 8, "gsl_integration_fixed_params.be has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_params.be)));
        assert(size_of(gsl_integration_fixed_params) == 72, "gsl_integration_fixed_params has size % instead of 72", size_of(gsl_integration_fixed_params));
    }

    {
        instance: gsl_integration_fixed_type;
        assert(((cast(*void)(*instance.check)) - cast(*void)(*instance)) == 0, "gsl_integration_fixed_type.check has unexpected offset % instead of 0", ((cast(*void)(*instance.check)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_type.check)) == 8, "gsl_integration_fixed_type.check has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_type.check)));
        assert(((cast(*void)(*instance.init)) - cast(*void)(*instance)) == 8, "gsl_integration_fixed_type.init has unexpected offset % instead of 8", ((cast(*void)(*instance.init)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_type.init)) == 8, "gsl_integration_fixed_type.init has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_type.init)));
        assert(size_of(gsl_integration_fixed_type) == 16, "gsl_integration_fixed_type has size % instead of 16", size_of(gsl_integration_fixed_type));
    }

    {
        instance: gsl_integration_fixed_workspace;
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "gsl_integration_fixed_workspace.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_workspace.n)) == 8, "gsl_integration_fixed_workspace.n has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_workspace.n)));
        assert(((cast(*void)(*instance.weights)) - cast(*void)(*instance)) == 8, "gsl_integration_fixed_workspace.weights has unexpected offset % instead of 8", ((cast(*void)(*instance.weights)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_workspace.weights)) == 8, "gsl_integration_fixed_workspace.weights has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_workspace.weights)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 16, "gsl_integration_fixed_workspace.x has unexpected offset % instead of 16", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_workspace.x)) == 8, "gsl_integration_fixed_workspace.x has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_workspace.x)));
        assert(((cast(*void)(*instance.diag)) - cast(*void)(*instance)) == 24, "gsl_integration_fixed_workspace.diag has unexpected offset % instead of 24", ((cast(*void)(*instance.diag)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_workspace.diag)) == 8, "gsl_integration_fixed_workspace.diag has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_workspace.diag)));
        assert(((cast(*void)(*instance.subdiag)) - cast(*void)(*instance)) == 32, "gsl_integration_fixed_workspace.subdiag has unexpected offset % instead of 32", ((cast(*void)(*instance.subdiag)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_workspace.subdiag)) == 8, "gsl_integration_fixed_workspace.subdiag has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_workspace.subdiag)));
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 40, "gsl_integration_fixed_workspace.type has unexpected offset % instead of 40", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_integration_fixed_workspace.type)) == 8, "gsl_integration_fixed_workspace.type has unexpected size % instead of 8", size_of(type_of(gsl_integration_fixed_workspace.type)));
        assert(size_of(gsl_integration_fixed_workspace) == 48, "gsl_integration_fixed_workspace has size % instead of 48", size_of(gsl_integration_fixed_workspace));
    }

    {
        instance: gsl_monte_plain_state;
        assert(((cast(*void)(*instance.dim)) - cast(*void)(*instance)) == 0, "gsl_monte_plain_state.dim has unexpected offset % instead of 0", ((cast(*void)(*instance.dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_plain_state.dim)) == 8, "gsl_monte_plain_state.dim has unexpected size % instead of 8", size_of(type_of(gsl_monte_plain_state.dim)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 8, "gsl_monte_plain_state.x has unexpected offset % instead of 8", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_plain_state.x)) == 8, "gsl_monte_plain_state.x has unexpected size % instead of 8", size_of(type_of(gsl_monte_plain_state.x)));
        assert(size_of(gsl_monte_plain_state) == 16, "gsl_monte_plain_state has size % instead of 16", size_of(gsl_monte_plain_state));
    }

    {
        instance: gsl_monte_miser_state;
        assert(((cast(*void)(*instance.min_calls)) - cast(*void)(*instance)) == 0, "gsl_monte_miser_state.min_calls has unexpected offset % instead of 0", ((cast(*void)(*instance.min_calls)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.min_calls)) == 8, "gsl_monte_miser_state.min_calls has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.min_calls)));
        assert(((cast(*void)(*instance.min_calls_per_bisection)) - cast(*void)(*instance)) == 8, "gsl_monte_miser_state.min_calls_per_bisection has unexpected offset % instead of 8", ((cast(*void)(*instance.min_calls_per_bisection)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.min_calls_per_bisection)) == 8, "gsl_monte_miser_state.min_calls_per_bisection has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.min_calls_per_bisection)));
        assert(((cast(*void)(*instance.dither)) - cast(*void)(*instance)) == 16, "gsl_monte_miser_state.dither has unexpected offset % instead of 16", ((cast(*void)(*instance.dither)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.dither)) == 8, "gsl_monte_miser_state.dither has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.dither)));
        assert(((cast(*void)(*instance.estimate_frac)) - cast(*void)(*instance)) == 24, "gsl_monte_miser_state.estimate_frac has unexpected offset % instead of 24", ((cast(*void)(*instance.estimate_frac)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.estimate_frac)) == 8, "gsl_monte_miser_state.estimate_frac has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.estimate_frac)));
        assert(((cast(*void)(*instance.alpha)) - cast(*void)(*instance)) == 32, "gsl_monte_miser_state.alpha has unexpected offset % instead of 32", ((cast(*void)(*instance.alpha)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.alpha)) == 8, "gsl_monte_miser_state.alpha has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.alpha)));
        assert(((cast(*void)(*instance.dim)) - cast(*void)(*instance)) == 40, "gsl_monte_miser_state.dim has unexpected offset % instead of 40", ((cast(*void)(*instance.dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.dim)) == 8, "gsl_monte_miser_state.dim has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.dim)));
        assert(((cast(*void)(*instance.estimate_style)) - cast(*void)(*instance)) == 48, "gsl_monte_miser_state.estimate_style has unexpected offset % instead of 48", ((cast(*void)(*instance.estimate_style)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.estimate_style)) == 4, "gsl_monte_miser_state.estimate_style has unexpected size % instead of 4", size_of(type_of(gsl_monte_miser_state.estimate_style)));
        assert(((cast(*void)(*instance.depth)) - cast(*void)(*instance)) == 52, "gsl_monte_miser_state.depth has unexpected offset % instead of 52", ((cast(*void)(*instance.depth)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.depth)) == 4, "gsl_monte_miser_state.depth has unexpected size % instead of 4", size_of(type_of(gsl_monte_miser_state.depth)));
        assert(((cast(*void)(*instance.verbose)) - cast(*void)(*instance)) == 56, "gsl_monte_miser_state.verbose has unexpected offset % instead of 56", ((cast(*void)(*instance.verbose)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.verbose)) == 4, "gsl_monte_miser_state.verbose has unexpected size % instead of 4", size_of(type_of(gsl_monte_miser_state.verbose)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 64, "gsl_monte_miser_state.x has unexpected offset % instead of 64", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.x)) == 8, "gsl_monte_miser_state.x has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.x)));
        assert(((cast(*void)(*instance.xmid)) - cast(*void)(*instance)) == 72, "gsl_monte_miser_state.xmid has unexpected offset % instead of 72", ((cast(*void)(*instance.xmid)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.xmid)) == 8, "gsl_monte_miser_state.xmid has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.xmid)));
        assert(((cast(*void)(*instance.sigma_l)) - cast(*void)(*instance)) == 80, "gsl_monte_miser_state.sigma_l has unexpected offset % instead of 80", ((cast(*void)(*instance.sigma_l)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.sigma_l)) == 8, "gsl_monte_miser_state.sigma_l has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.sigma_l)));
        assert(((cast(*void)(*instance.sigma_r)) - cast(*void)(*instance)) == 88, "gsl_monte_miser_state.sigma_r has unexpected offset % instead of 88", ((cast(*void)(*instance.sigma_r)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.sigma_r)) == 8, "gsl_monte_miser_state.sigma_r has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.sigma_r)));
        assert(((cast(*void)(*instance.fmax_l)) - cast(*void)(*instance)) == 96, "gsl_monte_miser_state.fmax_l has unexpected offset % instead of 96", ((cast(*void)(*instance.fmax_l)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.fmax_l)) == 8, "gsl_monte_miser_state.fmax_l has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.fmax_l)));
        assert(((cast(*void)(*instance.fmax_r)) - cast(*void)(*instance)) == 104, "gsl_monte_miser_state.fmax_r has unexpected offset % instead of 104", ((cast(*void)(*instance.fmax_r)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.fmax_r)) == 8, "gsl_monte_miser_state.fmax_r has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.fmax_r)));
        assert(((cast(*void)(*instance.fmin_l)) - cast(*void)(*instance)) == 112, "gsl_monte_miser_state.fmin_l has unexpected offset % instead of 112", ((cast(*void)(*instance.fmin_l)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.fmin_l)) == 8, "gsl_monte_miser_state.fmin_l has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.fmin_l)));
        assert(((cast(*void)(*instance.fmin_r)) - cast(*void)(*instance)) == 120, "gsl_monte_miser_state.fmin_r has unexpected offset % instead of 120", ((cast(*void)(*instance.fmin_r)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.fmin_r)) == 8, "gsl_monte_miser_state.fmin_r has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.fmin_r)));
        assert(((cast(*void)(*instance.fsum_l)) - cast(*void)(*instance)) == 128, "gsl_monte_miser_state.fsum_l has unexpected offset % instead of 128", ((cast(*void)(*instance.fsum_l)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.fsum_l)) == 8, "gsl_monte_miser_state.fsum_l has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.fsum_l)));
        assert(((cast(*void)(*instance.fsum_r)) - cast(*void)(*instance)) == 136, "gsl_monte_miser_state.fsum_r has unexpected offset % instead of 136", ((cast(*void)(*instance.fsum_r)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.fsum_r)) == 8, "gsl_monte_miser_state.fsum_r has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.fsum_r)));
        assert(((cast(*void)(*instance.fsum2_l)) - cast(*void)(*instance)) == 144, "gsl_monte_miser_state.fsum2_l has unexpected offset % instead of 144", ((cast(*void)(*instance.fsum2_l)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.fsum2_l)) == 8, "gsl_monte_miser_state.fsum2_l has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.fsum2_l)));
        assert(((cast(*void)(*instance.fsum2_r)) - cast(*void)(*instance)) == 152, "gsl_monte_miser_state.fsum2_r has unexpected offset % instead of 152", ((cast(*void)(*instance.fsum2_r)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.fsum2_r)) == 8, "gsl_monte_miser_state.fsum2_r has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.fsum2_r)));
        assert(((cast(*void)(*instance.hits_l)) - cast(*void)(*instance)) == 160, "gsl_monte_miser_state.hits_l has unexpected offset % instead of 160", ((cast(*void)(*instance.hits_l)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.hits_l)) == 8, "gsl_monte_miser_state.hits_l has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.hits_l)));
        assert(((cast(*void)(*instance.hits_r)) - cast(*void)(*instance)) == 168, "gsl_monte_miser_state.hits_r has unexpected offset % instead of 168", ((cast(*void)(*instance.hits_r)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_state.hits_r)) == 8, "gsl_monte_miser_state.hits_r has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_state.hits_r)));
        assert(size_of(gsl_monte_miser_state) == 176, "gsl_monte_miser_state has size % instead of 176", size_of(gsl_monte_miser_state));
    }

    {
        instance: gsl_monte_miser_params;
        assert(((cast(*void)(*instance.estimate_frac)) - cast(*void)(*instance)) == 0, "gsl_monte_miser_params.estimate_frac has unexpected offset % instead of 0", ((cast(*void)(*instance.estimate_frac)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_params.estimate_frac)) == 8, "gsl_monte_miser_params.estimate_frac has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_params.estimate_frac)));
        assert(((cast(*void)(*instance.min_calls)) - cast(*void)(*instance)) == 8, "gsl_monte_miser_params.min_calls has unexpected offset % instead of 8", ((cast(*void)(*instance.min_calls)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_params.min_calls)) == 8, "gsl_monte_miser_params.min_calls has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_params.min_calls)));
        assert(((cast(*void)(*instance.min_calls_per_bisection)) - cast(*void)(*instance)) == 16, "gsl_monte_miser_params.min_calls_per_bisection has unexpected offset % instead of 16", ((cast(*void)(*instance.min_calls_per_bisection)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_params.min_calls_per_bisection)) == 8, "gsl_monte_miser_params.min_calls_per_bisection has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_params.min_calls_per_bisection)));
        assert(((cast(*void)(*instance.alpha)) - cast(*void)(*instance)) == 24, "gsl_monte_miser_params.alpha has unexpected offset % instead of 24", ((cast(*void)(*instance.alpha)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_params.alpha)) == 8, "gsl_monte_miser_params.alpha has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_params.alpha)));
        assert(((cast(*void)(*instance.dither)) - cast(*void)(*instance)) == 32, "gsl_monte_miser_params.dither has unexpected offset % instead of 32", ((cast(*void)(*instance.dither)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_miser_params.dither)) == 8, "gsl_monte_miser_params.dither has unexpected size % instead of 8", size_of(type_of(gsl_monte_miser_params.dither)));
        assert(size_of(gsl_monte_miser_params) == 40, "gsl_monte_miser_params has size % instead of 40", size_of(gsl_monte_miser_params));
    }

    {
        instance: gsl_monte_vegas_state;
        assert(((cast(*void)(*instance.dim)) - cast(*void)(*instance)) == 0, "gsl_monte_vegas_state.dim has unexpected offset % instead of 0", ((cast(*void)(*instance.dim)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.dim)) == 8, "gsl_monte_vegas_state.dim has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.dim)));
        assert(((cast(*void)(*instance.bins_max)) - cast(*void)(*instance)) == 8, "gsl_monte_vegas_state.bins_max has unexpected offset % instead of 8", ((cast(*void)(*instance.bins_max)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.bins_max)) == 8, "gsl_monte_vegas_state.bins_max has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.bins_max)));
        assert(((cast(*void)(*instance.bins)) - cast(*void)(*instance)) == 16, "gsl_monte_vegas_state.bins has unexpected offset % instead of 16", ((cast(*void)(*instance.bins)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.bins)) == 4, "gsl_monte_vegas_state.bins has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_state.bins)));
        assert(((cast(*void)(*instance.boxes)) - cast(*void)(*instance)) == 20, "gsl_monte_vegas_state.boxes has unexpected offset % instead of 20", ((cast(*void)(*instance.boxes)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.boxes)) == 4, "gsl_monte_vegas_state.boxes has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_state.boxes)));
        assert(((cast(*void)(*instance.xi)) - cast(*void)(*instance)) == 24, "gsl_monte_vegas_state.xi has unexpected offset % instead of 24", ((cast(*void)(*instance.xi)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.xi)) == 8, "gsl_monte_vegas_state.xi has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.xi)));
        assert(((cast(*void)(*instance.xin)) - cast(*void)(*instance)) == 32, "gsl_monte_vegas_state.xin has unexpected offset % instead of 32", ((cast(*void)(*instance.xin)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.xin)) == 8, "gsl_monte_vegas_state.xin has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.xin)));
        assert(((cast(*void)(*instance.delx)) - cast(*void)(*instance)) == 40, "gsl_monte_vegas_state.delx has unexpected offset % instead of 40", ((cast(*void)(*instance.delx)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.delx)) == 8, "gsl_monte_vegas_state.delx has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.delx)));
        assert(((cast(*void)(*instance.weight)) - cast(*void)(*instance)) == 48, "gsl_monte_vegas_state.weight has unexpected offset % instead of 48", ((cast(*void)(*instance.weight)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.weight)) == 8, "gsl_monte_vegas_state.weight has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.weight)));
        assert(((cast(*void)(*instance.vol)) - cast(*void)(*instance)) == 56, "gsl_monte_vegas_state.vol has unexpected offset % instead of 56", ((cast(*void)(*instance.vol)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.vol)) == 8, "gsl_monte_vegas_state.vol has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.vol)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 64, "gsl_monte_vegas_state.x has unexpected offset % instead of 64", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.x)) == 8, "gsl_monte_vegas_state.x has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.x)));
        assert(((cast(*void)(*instance.bin)) - cast(*void)(*instance)) == 72, "gsl_monte_vegas_state.bin has unexpected offset % instead of 72", ((cast(*void)(*instance.bin)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.bin)) == 8, "gsl_monte_vegas_state.bin has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.bin)));
        assert(((cast(*void)(*instance.box)) - cast(*void)(*instance)) == 80, "gsl_monte_vegas_state.box has unexpected offset % instead of 80", ((cast(*void)(*instance.box)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.box)) == 8, "gsl_monte_vegas_state.box has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.box)));
        assert(((cast(*void)(*instance.d)) - cast(*void)(*instance)) == 88, "gsl_monte_vegas_state.d has unexpected offset % instead of 88", ((cast(*void)(*instance.d)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.d)) == 8, "gsl_monte_vegas_state.d has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.d)));
        assert(((cast(*void)(*instance.alpha)) - cast(*void)(*instance)) == 96, "gsl_monte_vegas_state.alpha has unexpected offset % instead of 96", ((cast(*void)(*instance.alpha)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.alpha)) == 8, "gsl_monte_vegas_state.alpha has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.alpha)));
        assert(((cast(*void)(*instance.mode)) - cast(*void)(*instance)) == 104, "gsl_monte_vegas_state.mode has unexpected offset % instead of 104", ((cast(*void)(*instance.mode)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.mode)) == 4, "gsl_monte_vegas_state.mode has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_state.mode)));
        assert(((cast(*void)(*instance.verbose)) - cast(*void)(*instance)) == 108, "gsl_monte_vegas_state.verbose has unexpected offset % instead of 108", ((cast(*void)(*instance.verbose)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.verbose)) == 4, "gsl_monte_vegas_state.verbose has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_state.verbose)));
        assert(((cast(*void)(*instance.iterations)) - cast(*void)(*instance)) == 112, "gsl_monte_vegas_state.iterations has unexpected offset % instead of 112", ((cast(*void)(*instance.iterations)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.iterations)) == 4, "gsl_monte_vegas_state.iterations has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_state.iterations)));
        assert(((cast(*void)(*instance.stage)) - cast(*void)(*instance)) == 116, "gsl_monte_vegas_state.stage has unexpected offset % instead of 116", ((cast(*void)(*instance.stage)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.stage)) == 4, "gsl_monte_vegas_state.stage has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_state.stage)));
        assert(((cast(*void)(*instance.jac)) - cast(*void)(*instance)) == 120, "gsl_monte_vegas_state.jac has unexpected offset % instead of 120", ((cast(*void)(*instance.jac)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.jac)) == 8, "gsl_monte_vegas_state.jac has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.jac)));
        assert(((cast(*void)(*instance.wtd_int_sum)) - cast(*void)(*instance)) == 128, "gsl_monte_vegas_state.wtd_int_sum has unexpected offset % instead of 128", ((cast(*void)(*instance.wtd_int_sum)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.wtd_int_sum)) == 8, "gsl_monte_vegas_state.wtd_int_sum has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.wtd_int_sum)));
        assert(((cast(*void)(*instance.sum_wgts)) - cast(*void)(*instance)) == 136, "gsl_monte_vegas_state.sum_wgts has unexpected offset % instead of 136", ((cast(*void)(*instance.sum_wgts)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.sum_wgts)) == 8, "gsl_monte_vegas_state.sum_wgts has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.sum_wgts)));
        assert(((cast(*void)(*instance.chi_sum)) - cast(*void)(*instance)) == 144, "gsl_monte_vegas_state.chi_sum has unexpected offset % instead of 144", ((cast(*void)(*instance.chi_sum)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.chi_sum)) == 8, "gsl_monte_vegas_state.chi_sum has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.chi_sum)));
        assert(((cast(*void)(*instance.chisq)) - cast(*void)(*instance)) == 152, "gsl_monte_vegas_state.chisq has unexpected offset % instead of 152", ((cast(*void)(*instance.chisq)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.chisq)) == 8, "gsl_monte_vegas_state.chisq has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.chisq)));
        assert(((cast(*void)(*instance.result)) - cast(*void)(*instance)) == 160, "gsl_monte_vegas_state.result has unexpected offset % instead of 160", ((cast(*void)(*instance.result)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.result)) == 8, "gsl_monte_vegas_state.result has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.result)));
        assert(((cast(*void)(*instance.sigma)) - cast(*void)(*instance)) == 168, "gsl_monte_vegas_state.sigma has unexpected offset % instead of 168", ((cast(*void)(*instance.sigma)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.sigma)) == 8, "gsl_monte_vegas_state.sigma has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.sigma)));
        assert(((cast(*void)(*instance.it_start)) - cast(*void)(*instance)) == 176, "gsl_monte_vegas_state.it_start has unexpected offset % instead of 176", ((cast(*void)(*instance.it_start)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.it_start)) == 4, "gsl_monte_vegas_state.it_start has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_state.it_start)));
        assert(((cast(*void)(*instance.it_num)) - cast(*void)(*instance)) == 180, "gsl_monte_vegas_state.it_num has unexpected offset % instead of 180", ((cast(*void)(*instance.it_num)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.it_num)) == 4, "gsl_monte_vegas_state.it_num has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_state.it_num)));
        assert(((cast(*void)(*instance.samples)) - cast(*void)(*instance)) == 184, "gsl_monte_vegas_state.samples has unexpected offset % instead of 184", ((cast(*void)(*instance.samples)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.samples)) == 4, "gsl_monte_vegas_state.samples has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_state.samples)));
        assert(((cast(*void)(*instance.calls_per_box)) - cast(*void)(*instance)) == 188, "gsl_monte_vegas_state.calls_per_box has unexpected offset % instead of 188", ((cast(*void)(*instance.calls_per_box)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.calls_per_box)) == 4, "gsl_monte_vegas_state.calls_per_box has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_state.calls_per_box)));
        assert(((cast(*void)(*instance.ostream)) - cast(*void)(*instance)) == 192, "gsl_monte_vegas_state.ostream has unexpected offset % instead of 192", ((cast(*void)(*instance.ostream)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_state.ostream)) == 8, "gsl_monte_vegas_state.ostream has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_state.ostream)));
        assert(size_of(gsl_monte_vegas_state) == 200, "gsl_monte_vegas_state has size % instead of 200", size_of(gsl_monte_vegas_state));
    }

    {
        instance: gsl_monte_vegas_params;
        assert(((cast(*void)(*instance.alpha)) - cast(*void)(*instance)) == 0, "gsl_monte_vegas_params.alpha has unexpected offset % instead of 0", ((cast(*void)(*instance.alpha)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_params.alpha)) == 8, "gsl_monte_vegas_params.alpha has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_params.alpha)));
        assert(((cast(*void)(*instance.iterations)) - cast(*void)(*instance)) == 8, "gsl_monte_vegas_params.iterations has unexpected offset % instead of 8", ((cast(*void)(*instance.iterations)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_params.iterations)) == 8, "gsl_monte_vegas_params.iterations has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_params.iterations)));
        assert(((cast(*void)(*instance.stage)) - cast(*void)(*instance)) == 16, "gsl_monte_vegas_params.stage has unexpected offset % instead of 16", ((cast(*void)(*instance.stage)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_params.stage)) == 4, "gsl_monte_vegas_params.stage has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_params.stage)));
        assert(((cast(*void)(*instance.mode)) - cast(*void)(*instance)) == 20, "gsl_monte_vegas_params.mode has unexpected offset % instead of 20", ((cast(*void)(*instance.mode)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_params.mode)) == 4, "gsl_monte_vegas_params.mode has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_params.mode)));
        assert(((cast(*void)(*instance.verbose)) - cast(*void)(*instance)) == 24, "gsl_monte_vegas_params.verbose has unexpected offset % instead of 24", ((cast(*void)(*instance.verbose)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_params.verbose)) == 4, "gsl_monte_vegas_params.verbose has unexpected size % instead of 4", size_of(type_of(gsl_monte_vegas_params.verbose)));
        assert(((cast(*void)(*instance.ostream)) - cast(*void)(*instance)) == 32, "gsl_monte_vegas_params.ostream has unexpected offset % instead of 32", ((cast(*void)(*instance.ostream)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_monte_vegas_params.ostream)) == 8, "gsl_monte_vegas_params.ostream has unexpected size % instead of 8", size_of(type_of(gsl_monte_vegas_params.ostream)));
        assert(size_of(gsl_monte_vegas_params) == 40, "gsl_monte_vegas_params has size % instead of 40", size_of(gsl_monte_vegas_params));
    }

    {
        instance: gsl_siman_params_t;
        assert(((cast(*void)(*instance.n_tries)) - cast(*void)(*instance)) == 0, "gsl_siman_params_t.n_tries has unexpected offset % instead of 0", ((cast(*void)(*instance.n_tries)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_siman_params_t.n_tries)) == 4, "gsl_siman_params_t.n_tries has unexpected size % instead of 4", size_of(type_of(gsl_siman_params_t.n_tries)));
        assert(((cast(*void)(*instance.iters_fixed_T)) - cast(*void)(*instance)) == 4, "gsl_siman_params_t.iters_fixed_T has unexpected offset % instead of 4", ((cast(*void)(*instance.iters_fixed_T)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_siman_params_t.iters_fixed_T)) == 4, "gsl_siman_params_t.iters_fixed_T has unexpected size % instead of 4", size_of(type_of(gsl_siman_params_t.iters_fixed_T)));
        assert(((cast(*void)(*instance.step_size)) - cast(*void)(*instance)) == 8, "gsl_siman_params_t.step_size has unexpected offset % instead of 8", ((cast(*void)(*instance.step_size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_siman_params_t.step_size)) == 8, "gsl_siman_params_t.step_size has unexpected size % instead of 8", size_of(type_of(gsl_siman_params_t.step_size)));
        assert(((cast(*void)(*instance.k)) - cast(*void)(*instance)) == 16, "gsl_siman_params_t.k has unexpected offset % instead of 16", ((cast(*void)(*instance.k)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_siman_params_t.k)) == 8, "gsl_siman_params_t.k has unexpected size % instead of 8", size_of(type_of(gsl_siman_params_t.k)));
        assert(((cast(*void)(*instance.t_initial)) - cast(*void)(*instance)) == 24, "gsl_siman_params_t.t_initial has unexpected offset % instead of 24", ((cast(*void)(*instance.t_initial)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_siman_params_t.t_initial)) == 8, "gsl_siman_params_t.t_initial has unexpected size % instead of 8", size_of(type_of(gsl_siman_params_t.t_initial)));
        assert(((cast(*void)(*instance.mu_t)) - cast(*void)(*instance)) == 32, "gsl_siman_params_t.mu_t has unexpected offset % instead of 32", ((cast(*void)(*instance.mu_t)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_siman_params_t.mu_t)) == 8, "gsl_siman_params_t.mu_t has unexpected size % instead of 8", size_of(type_of(gsl_siman_params_t.mu_t)));
        assert(((cast(*void)(*instance.t_min)) - cast(*void)(*instance)) == 40, "gsl_siman_params_t.t_min has unexpected offset % instead of 40", ((cast(*void)(*instance.t_min)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_siman_params_t.t_min)) == 8, "gsl_siman_params_t.t_min has unexpected size % instead of 8", size_of(type_of(gsl_siman_params_t.t_min)));
        assert(size_of(gsl_siman_params_t) == 48, "gsl_siman_params_t has size % instead of 48", size_of(gsl_siman_params_t));
    }

    {
        instance: gsl_odeiv_system;
        assert(((cast(*void)(*instance.function)) - cast(*void)(*instance)) == 0, "gsl_odeiv_system.function has unexpected offset % instead of 0", ((cast(*void)(*instance.function)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_system.function)) == 8, "gsl_odeiv_system.function has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_system.function)));
        assert(((cast(*void)(*instance.jacobian)) - cast(*void)(*instance)) == 8, "gsl_odeiv_system.jacobian has unexpected offset % instead of 8", ((cast(*void)(*instance.jacobian)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_system.jacobian)) == 8, "gsl_odeiv_system.jacobian has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_system.jacobian)));
        assert(((cast(*void)(*instance.dimension)) - cast(*void)(*instance)) == 16, "gsl_odeiv_system.dimension has unexpected offset % instead of 16", ((cast(*void)(*instance.dimension)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_system.dimension)) == 8, "gsl_odeiv_system.dimension has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_system.dimension)));
        assert(((cast(*void)(*instance.params)) - cast(*void)(*instance)) == 24, "gsl_odeiv_system.params has unexpected offset % instead of 24", ((cast(*void)(*instance.params)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_system.params)) == 8, "gsl_odeiv_system.params has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_system.params)));
        assert(size_of(gsl_odeiv_system) == 32, "gsl_odeiv_system has size % instead of 32", size_of(gsl_odeiv_system));
    }

    {
        instance: gsl_odeiv_step_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_odeiv_step_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_step_type.name)) == 8, "gsl_odeiv_step_type.name has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_step_type.name)));
        assert(((cast(*void)(*instance.can_use_dydt_in)) - cast(*void)(*instance)) == 8, "gsl_odeiv_step_type.can_use_dydt_in has unexpected offset % instead of 8", ((cast(*void)(*instance.can_use_dydt_in)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_step_type.can_use_dydt_in)) == 4, "gsl_odeiv_step_type.can_use_dydt_in has unexpected size % instead of 4", size_of(type_of(gsl_odeiv_step_type.can_use_dydt_in)));
        assert(((cast(*void)(*instance.gives_exact_dydt_out)) - cast(*void)(*instance)) == 12, "gsl_odeiv_step_type.gives_exact_dydt_out has unexpected offset % instead of 12", ((cast(*void)(*instance.gives_exact_dydt_out)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_step_type.gives_exact_dydt_out)) == 4, "gsl_odeiv_step_type.gives_exact_dydt_out has unexpected size % instead of 4", size_of(type_of(gsl_odeiv_step_type.gives_exact_dydt_out)));
        assert(((cast(*void)(*instance.alloc)) - cast(*void)(*instance)) == 16, "gsl_odeiv_step_type.alloc has unexpected offset % instead of 16", ((cast(*void)(*instance.alloc)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_step_type.alloc)) == 8, "gsl_odeiv_step_type.alloc has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_step_type.alloc)));
        assert(((cast(*void)(*instance.apply)) - cast(*void)(*instance)) == 24, "gsl_odeiv_step_type.apply has unexpected offset % instead of 24", ((cast(*void)(*instance.apply)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_step_type.apply)) == 8, "gsl_odeiv_step_type.apply has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_step_type.apply)));
        assert(((cast(*void)(*instance.reset)) - cast(*void)(*instance)) == 32, "gsl_odeiv_step_type.reset has unexpected offset % instead of 32", ((cast(*void)(*instance.reset)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_step_type.reset)) == 8, "gsl_odeiv_step_type.reset has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_step_type.reset)));
        assert(((cast(*void)(*instance.order)) - cast(*void)(*instance)) == 40, "gsl_odeiv_step_type.order has unexpected offset % instead of 40", ((cast(*void)(*instance.order)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_step_type.order)) == 8, "gsl_odeiv_step_type.order has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_step_type.order)));
        assert(((cast(*void)(*instance.free)) - cast(*void)(*instance)) == 48, "gsl_odeiv_step_type.free has unexpected offset % instead of 48", ((cast(*void)(*instance.free)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_step_type.free)) == 8, "gsl_odeiv_step_type.free has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_step_type.free)));
        assert(size_of(gsl_odeiv_step_type) == 56, "gsl_odeiv_step_type has size % instead of 56", size_of(gsl_odeiv_step_type));
    }

    {
        instance: gsl_odeiv_step;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_odeiv_step.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_step.type)) == 8, "gsl_odeiv_step.type has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_step.type)));
        assert(((cast(*void)(*instance.dimension)) - cast(*void)(*instance)) == 8, "gsl_odeiv_step.dimension has unexpected offset % instead of 8", ((cast(*void)(*instance.dimension)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_step.dimension)) == 8, "gsl_odeiv_step.dimension has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_step.dimension)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 16, "gsl_odeiv_step.state has unexpected offset % instead of 16", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_step.state)) == 8, "gsl_odeiv_step.state has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_step.state)));
        assert(size_of(gsl_odeiv_step) == 24, "gsl_odeiv_step has size % instead of 24", size_of(gsl_odeiv_step));
    }

    {
        instance: gsl_odeiv_control_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_odeiv_control_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_control_type.name)) == 8, "gsl_odeiv_control_type.name has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_control_type.name)));
        assert(((cast(*void)(*instance.alloc)) - cast(*void)(*instance)) == 8, "gsl_odeiv_control_type.alloc has unexpected offset % instead of 8", ((cast(*void)(*instance.alloc)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_control_type.alloc)) == 8, "gsl_odeiv_control_type.alloc has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_control_type.alloc)));
        assert(((cast(*void)(*instance.init)) - cast(*void)(*instance)) == 16, "gsl_odeiv_control_type.init has unexpected offset % instead of 16", ((cast(*void)(*instance.init)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_control_type.init)) == 8, "gsl_odeiv_control_type.init has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_control_type.init)));
        assert(((cast(*void)(*instance.hadjust)) - cast(*void)(*instance)) == 24, "gsl_odeiv_control_type.hadjust has unexpected offset % instead of 24", ((cast(*void)(*instance.hadjust)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_control_type.hadjust)) == 8, "gsl_odeiv_control_type.hadjust has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_control_type.hadjust)));
        assert(((cast(*void)(*instance.free)) - cast(*void)(*instance)) == 32, "gsl_odeiv_control_type.free has unexpected offset % instead of 32", ((cast(*void)(*instance.free)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_control_type.free)) == 8, "gsl_odeiv_control_type.free has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_control_type.free)));
        assert(size_of(gsl_odeiv_control_type) == 40, "gsl_odeiv_control_type has size % instead of 40", size_of(gsl_odeiv_control_type));
    }

    {
        instance: gsl_odeiv_control;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_odeiv_control.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_control.type)) == 8, "gsl_odeiv_control.type has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_control.type)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 8, "gsl_odeiv_control.state has unexpected offset % instead of 8", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_control.state)) == 8, "gsl_odeiv_control.state has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_control.state)));
        assert(size_of(gsl_odeiv_control) == 16, "gsl_odeiv_control has size % instead of 16", size_of(gsl_odeiv_control));
    }

    {
        instance: gsl_odeiv_evolve;
        assert(((cast(*void)(*instance.dimension)) - cast(*void)(*instance)) == 0, "gsl_odeiv_evolve.dimension has unexpected offset % instead of 0", ((cast(*void)(*instance.dimension)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_evolve.dimension)) == 8, "gsl_odeiv_evolve.dimension has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_evolve.dimension)));
        assert(((cast(*void)(*instance.y0)) - cast(*void)(*instance)) == 8, "gsl_odeiv_evolve.y0 has unexpected offset % instead of 8", ((cast(*void)(*instance.y0)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_evolve.y0)) == 8, "gsl_odeiv_evolve.y0 has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_evolve.y0)));
        assert(((cast(*void)(*instance.yerr)) - cast(*void)(*instance)) == 16, "gsl_odeiv_evolve.yerr has unexpected offset % instead of 16", ((cast(*void)(*instance.yerr)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_evolve.yerr)) == 8, "gsl_odeiv_evolve.yerr has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_evolve.yerr)));
        assert(((cast(*void)(*instance.dydt_in)) - cast(*void)(*instance)) == 24, "gsl_odeiv_evolve.dydt_in has unexpected offset % instead of 24", ((cast(*void)(*instance.dydt_in)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_evolve.dydt_in)) == 8, "gsl_odeiv_evolve.dydt_in has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_evolve.dydt_in)));
        assert(((cast(*void)(*instance.dydt_out)) - cast(*void)(*instance)) == 32, "gsl_odeiv_evolve.dydt_out has unexpected offset % instead of 32", ((cast(*void)(*instance.dydt_out)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_evolve.dydt_out)) == 8, "gsl_odeiv_evolve.dydt_out has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_evolve.dydt_out)));
        assert(((cast(*void)(*instance.last_step)) - cast(*void)(*instance)) == 40, "gsl_odeiv_evolve.last_step has unexpected offset % instead of 40", ((cast(*void)(*instance.last_step)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_evolve.last_step)) == 8, "gsl_odeiv_evolve.last_step has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_evolve.last_step)));
        assert(((cast(*void)(*instance.count)) - cast(*void)(*instance)) == 48, "gsl_odeiv_evolve.count has unexpected offset % instead of 48", ((cast(*void)(*instance.count)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_evolve.count)) == 8, "gsl_odeiv_evolve.count has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_evolve.count)));
        assert(((cast(*void)(*instance.failed_steps)) - cast(*void)(*instance)) == 56, "gsl_odeiv_evolve.failed_steps has unexpected offset % instead of 56", ((cast(*void)(*instance.failed_steps)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_odeiv_evolve.failed_steps)) == 8, "gsl_odeiv_evolve.failed_steps has unexpected size % instead of 8", size_of(type_of(gsl_odeiv_evolve.failed_steps)));
        assert(size_of(gsl_odeiv_evolve) == 64, "gsl_odeiv_evolve has size % instead of 64", size_of(gsl_odeiv_evolve));
    }

    {
        instance: gsl_root_fsolver_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_root_fsolver_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fsolver_type.name)) == 8, "gsl_root_fsolver_type.name has unexpected size % instead of 8", size_of(type_of(gsl_root_fsolver_type.name)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 8, "gsl_root_fsolver_type.size has unexpected offset % instead of 8", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fsolver_type.size)) == 8, "gsl_root_fsolver_type.size has unexpected size % instead of 8", size_of(type_of(gsl_root_fsolver_type.size)));
        assert(((cast(*void)(*instance.set)) - cast(*void)(*instance)) == 16, "gsl_root_fsolver_type.set has unexpected offset % instead of 16", ((cast(*void)(*instance.set)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fsolver_type.set)) == 8, "gsl_root_fsolver_type.set has unexpected size % instead of 8", size_of(type_of(gsl_root_fsolver_type.set)));
        assert(((cast(*void)(*instance.iterate)) - cast(*void)(*instance)) == 24, "gsl_root_fsolver_type.iterate has unexpected offset % instead of 24", ((cast(*void)(*instance.iterate)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fsolver_type.iterate)) == 8, "gsl_root_fsolver_type.iterate has unexpected size % instead of 8", size_of(type_of(gsl_root_fsolver_type.iterate)));
        assert(size_of(gsl_root_fsolver_type) == 32, "gsl_root_fsolver_type has size % instead of 32", size_of(gsl_root_fsolver_type));
    }

    {
        instance: gsl_root_fsolver;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_root_fsolver.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fsolver.type)) == 8, "gsl_root_fsolver.type has unexpected size % instead of 8", size_of(type_of(gsl_root_fsolver.type)));
        assert(((cast(*void)(*instance.function)) - cast(*void)(*instance)) == 8, "gsl_root_fsolver.function has unexpected offset % instead of 8", ((cast(*void)(*instance.function)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fsolver.function)) == 8, "gsl_root_fsolver.function has unexpected size % instead of 8", size_of(type_of(gsl_root_fsolver.function)));
        assert(((cast(*void)(*instance.root)) - cast(*void)(*instance)) == 16, "gsl_root_fsolver.root has unexpected offset % instead of 16", ((cast(*void)(*instance.root)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fsolver.root)) == 8, "gsl_root_fsolver.root has unexpected size % instead of 8", size_of(type_of(gsl_root_fsolver.root)));
        assert(((cast(*void)(*instance.x_lower)) - cast(*void)(*instance)) == 24, "gsl_root_fsolver.x_lower has unexpected offset % instead of 24", ((cast(*void)(*instance.x_lower)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fsolver.x_lower)) == 8, "gsl_root_fsolver.x_lower has unexpected size % instead of 8", size_of(type_of(gsl_root_fsolver.x_lower)));
        assert(((cast(*void)(*instance.x_upper)) - cast(*void)(*instance)) == 32, "gsl_root_fsolver.x_upper has unexpected offset % instead of 32", ((cast(*void)(*instance.x_upper)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fsolver.x_upper)) == 8, "gsl_root_fsolver.x_upper has unexpected size % instead of 8", size_of(type_of(gsl_root_fsolver.x_upper)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 40, "gsl_root_fsolver.state has unexpected offset % instead of 40", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fsolver.state)) == 8, "gsl_root_fsolver.state has unexpected size % instead of 8", size_of(type_of(gsl_root_fsolver.state)));
        assert(size_of(gsl_root_fsolver) == 48, "gsl_root_fsolver has size % instead of 48", size_of(gsl_root_fsolver));
    }

    {
        instance: gsl_root_fdfsolver_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_root_fdfsolver_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fdfsolver_type.name)) == 8, "gsl_root_fdfsolver_type.name has unexpected size % instead of 8", size_of(type_of(gsl_root_fdfsolver_type.name)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 8, "gsl_root_fdfsolver_type.size has unexpected offset % instead of 8", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fdfsolver_type.size)) == 8, "gsl_root_fdfsolver_type.size has unexpected size % instead of 8", size_of(type_of(gsl_root_fdfsolver_type.size)));
        assert(((cast(*void)(*instance.set)) - cast(*void)(*instance)) == 16, "gsl_root_fdfsolver_type.set has unexpected offset % instead of 16", ((cast(*void)(*instance.set)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fdfsolver_type.set)) == 8, "gsl_root_fdfsolver_type.set has unexpected size % instead of 8", size_of(type_of(gsl_root_fdfsolver_type.set)));
        assert(((cast(*void)(*instance.iterate)) - cast(*void)(*instance)) == 24, "gsl_root_fdfsolver_type.iterate has unexpected offset % instead of 24", ((cast(*void)(*instance.iterate)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fdfsolver_type.iterate)) == 8, "gsl_root_fdfsolver_type.iterate has unexpected size % instead of 8", size_of(type_of(gsl_root_fdfsolver_type.iterate)));
        assert(size_of(gsl_root_fdfsolver_type) == 32, "gsl_root_fdfsolver_type has size % instead of 32", size_of(gsl_root_fdfsolver_type));
    }

    {
        instance: gsl_root_fdfsolver;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_root_fdfsolver.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fdfsolver.type)) == 8, "gsl_root_fdfsolver.type has unexpected size % instead of 8", size_of(type_of(gsl_root_fdfsolver.type)));
        assert(((cast(*void)(*instance.fdf)) - cast(*void)(*instance)) == 8, "gsl_root_fdfsolver.fdf has unexpected offset % instead of 8", ((cast(*void)(*instance.fdf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fdfsolver.fdf)) == 8, "gsl_root_fdfsolver.fdf has unexpected size % instead of 8", size_of(type_of(gsl_root_fdfsolver.fdf)));
        assert(((cast(*void)(*instance.root)) - cast(*void)(*instance)) == 16, "gsl_root_fdfsolver.root has unexpected offset % instead of 16", ((cast(*void)(*instance.root)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fdfsolver.root)) == 8, "gsl_root_fdfsolver.root has unexpected size % instead of 8", size_of(type_of(gsl_root_fdfsolver.root)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 24, "gsl_root_fdfsolver.state has unexpected offset % instead of 24", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_root_fdfsolver.state)) == 8, "gsl_root_fdfsolver.state has unexpected size % instead of 8", size_of(type_of(gsl_root_fdfsolver.state)));
        assert(size_of(gsl_root_fdfsolver) == 32, "gsl_root_fdfsolver has size % instead of 32", size_of(gsl_root_fdfsolver));
    }

    {
        instance: gsl_min_fminimizer_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_min_fminimizer_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer_type.name)) == 8, "gsl_min_fminimizer_type.name has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer_type.name)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 8, "gsl_min_fminimizer_type.size has unexpected offset % instead of 8", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer_type.size)) == 8, "gsl_min_fminimizer_type.size has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer_type.size)));
        assert(((cast(*void)(*instance.set)) - cast(*void)(*instance)) == 16, "gsl_min_fminimizer_type.set has unexpected offset % instead of 16", ((cast(*void)(*instance.set)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer_type.set)) == 8, "gsl_min_fminimizer_type.set has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer_type.set)));
        assert(((cast(*void)(*instance.iterate)) - cast(*void)(*instance)) == 24, "gsl_min_fminimizer_type.iterate has unexpected offset % instead of 24", ((cast(*void)(*instance.iterate)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer_type.iterate)) == 8, "gsl_min_fminimizer_type.iterate has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer_type.iterate)));
        assert(size_of(gsl_min_fminimizer_type) == 32, "gsl_min_fminimizer_type has size % instead of 32", size_of(gsl_min_fminimizer_type));
    }

    {
        instance: gsl_min_fminimizer;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_min_fminimizer.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer.type)) == 8, "gsl_min_fminimizer.type has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer.type)));
        assert(((cast(*void)(*instance.function)) - cast(*void)(*instance)) == 8, "gsl_min_fminimizer.function has unexpected offset % instead of 8", ((cast(*void)(*instance.function)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer.function)) == 8, "gsl_min_fminimizer.function has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer.function)));
        assert(((cast(*void)(*instance.x_minimum)) - cast(*void)(*instance)) == 16, "gsl_min_fminimizer.x_minimum has unexpected offset % instead of 16", ((cast(*void)(*instance.x_minimum)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer.x_minimum)) == 8, "gsl_min_fminimizer.x_minimum has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer.x_minimum)));
        assert(((cast(*void)(*instance.x_lower)) - cast(*void)(*instance)) == 24, "gsl_min_fminimizer.x_lower has unexpected offset % instead of 24", ((cast(*void)(*instance.x_lower)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer.x_lower)) == 8, "gsl_min_fminimizer.x_lower has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer.x_lower)));
        assert(((cast(*void)(*instance.x_upper)) - cast(*void)(*instance)) == 32, "gsl_min_fminimizer.x_upper has unexpected offset % instead of 32", ((cast(*void)(*instance.x_upper)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer.x_upper)) == 8, "gsl_min_fminimizer.x_upper has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer.x_upper)));
        assert(((cast(*void)(*instance.f_minimum)) - cast(*void)(*instance)) == 40, "gsl_min_fminimizer.f_minimum has unexpected offset % instead of 40", ((cast(*void)(*instance.f_minimum)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer.f_minimum)) == 8, "gsl_min_fminimizer.f_minimum has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer.f_minimum)));
        assert(((cast(*void)(*instance.f_lower)) - cast(*void)(*instance)) == 48, "gsl_min_fminimizer.f_lower has unexpected offset % instead of 48", ((cast(*void)(*instance.f_lower)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer.f_lower)) == 8, "gsl_min_fminimizer.f_lower has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer.f_lower)));
        assert(((cast(*void)(*instance.f_upper)) - cast(*void)(*instance)) == 56, "gsl_min_fminimizer.f_upper has unexpected offset % instead of 56", ((cast(*void)(*instance.f_upper)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer.f_upper)) == 8, "gsl_min_fminimizer.f_upper has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer.f_upper)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 64, "gsl_min_fminimizer.state has unexpected offset % instead of 64", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_min_fminimizer.state)) == 8, "gsl_min_fminimizer.state has unexpected size % instead of 8", size_of(type_of(gsl_min_fminimizer.state)));
        assert(size_of(gsl_min_fminimizer) == 72, "gsl_min_fminimizer has size % instead of 72", size_of(gsl_min_fminimizer));
    }

    {
        instance: gsl_multiroot_function_struct;
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 0, "gsl_multiroot_function_struct.f has unexpected offset % instead of 0", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_function_struct.f)) == 8, "gsl_multiroot_function_struct.f has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_function_struct.f)));
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 8, "gsl_multiroot_function_struct.n has unexpected offset % instead of 8", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_function_struct.n)) == 8, "gsl_multiroot_function_struct.n has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_function_struct.n)));
        assert(((cast(*void)(*instance.params)) - cast(*void)(*instance)) == 16, "gsl_multiroot_function_struct.params has unexpected offset % instead of 16", ((cast(*void)(*instance.params)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_function_struct.params)) == 8, "gsl_multiroot_function_struct.params has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_function_struct.params)));
        assert(size_of(gsl_multiroot_function_struct) == 24, "gsl_multiroot_function_struct has size % instead of 24", size_of(gsl_multiroot_function_struct));
    }

    {
        instance: gsl_multiroot_fsolver_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_multiroot_fsolver_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fsolver_type.name)) == 8, "gsl_multiroot_fsolver_type.name has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fsolver_type.name)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 8, "gsl_multiroot_fsolver_type.size has unexpected offset % instead of 8", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fsolver_type.size)) == 8, "gsl_multiroot_fsolver_type.size has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fsolver_type.size)));
        assert(((cast(*void)(*instance.alloc)) - cast(*void)(*instance)) == 16, "gsl_multiroot_fsolver_type.alloc has unexpected offset % instead of 16", ((cast(*void)(*instance.alloc)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fsolver_type.alloc)) == 8, "gsl_multiroot_fsolver_type.alloc has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fsolver_type.alloc)));
        assert(((cast(*void)(*instance.set)) - cast(*void)(*instance)) == 24, "gsl_multiroot_fsolver_type.set has unexpected offset % instead of 24", ((cast(*void)(*instance.set)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fsolver_type.set)) == 8, "gsl_multiroot_fsolver_type.set has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fsolver_type.set)));
        assert(((cast(*void)(*instance.iterate)) - cast(*void)(*instance)) == 32, "gsl_multiroot_fsolver_type.iterate has unexpected offset % instead of 32", ((cast(*void)(*instance.iterate)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fsolver_type.iterate)) == 8, "gsl_multiroot_fsolver_type.iterate has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fsolver_type.iterate)));
        assert(((cast(*void)(*instance.free)) - cast(*void)(*instance)) == 40, "gsl_multiroot_fsolver_type.free has unexpected offset % instead of 40", ((cast(*void)(*instance.free)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fsolver_type.free)) == 8, "gsl_multiroot_fsolver_type.free has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fsolver_type.free)));
        assert(size_of(gsl_multiroot_fsolver_type) == 48, "gsl_multiroot_fsolver_type has size % instead of 48", size_of(gsl_multiroot_fsolver_type));
    }

    {
        instance: gsl_multiroot_fsolver;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_multiroot_fsolver.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fsolver.type)) == 8, "gsl_multiroot_fsolver.type has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fsolver.type)));
        assert(((cast(*void)(*instance.function)) - cast(*void)(*instance)) == 8, "gsl_multiroot_fsolver.function has unexpected offset % instead of 8", ((cast(*void)(*instance.function)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fsolver.function)) == 8, "gsl_multiroot_fsolver.function has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fsolver.function)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 16, "gsl_multiroot_fsolver.x has unexpected offset % instead of 16", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fsolver.x)) == 8, "gsl_multiroot_fsolver.x has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fsolver.x)));
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 24, "gsl_multiroot_fsolver.f has unexpected offset % instead of 24", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fsolver.f)) == 8, "gsl_multiroot_fsolver.f has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fsolver.f)));
        assert(((cast(*void)(*instance.dx)) - cast(*void)(*instance)) == 32, "gsl_multiroot_fsolver.dx has unexpected offset % instead of 32", ((cast(*void)(*instance.dx)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fsolver.dx)) == 8, "gsl_multiroot_fsolver.dx has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fsolver.dx)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 40, "gsl_multiroot_fsolver.state has unexpected offset % instead of 40", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fsolver.state)) == 8, "gsl_multiroot_fsolver.state has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fsolver.state)));
        assert(size_of(gsl_multiroot_fsolver) == 48, "gsl_multiroot_fsolver has size % instead of 48", size_of(gsl_multiroot_fsolver));
    }

    {
        instance: gsl_multiroot_function_fdf_struct;
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 0, "gsl_multiroot_function_fdf_struct.f has unexpected offset % instead of 0", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_function_fdf_struct.f)) == 8, "gsl_multiroot_function_fdf_struct.f has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_function_fdf_struct.f)));
        assert(((cast(*void)(*instance.df)) - cast(*void)(*instance)) == 8, "gsl_multiroot_function_fdf_struct.df has unexpected offset % instead of 8", ((cast(*void)(*instance.df)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_function_fdf_struct.df)) == 8, "gsl_multiroot_function_fdf_struct.df has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_function_fdf_struct.df)));
        assert(((cast(*void)(*instance.fdf)) - cast(*void)(*instance)) == 16, "gsl_multiroot_function_fdf_struct.fdf has unexpected offset % instead of 16", ((cast(*void)(*instance.fdf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_function_fdf_struct.fdf)) == 8, "gsl_multiroot_function_fdf_struct.fdf has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_function_fdf_struct.fdf)));
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 24, "gsl_multiroot_function_fdf_struct.n has unexpected offset % instead of 24", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_function_fdf_struct.n)) == 8, "gsl_multiroot_function_fdf_struct.n has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_function_fdf_struct.n)));
        assert(((cast(*void)(*instance.params)) - cast(*void)(*instance)) == 32, "gsl_multiroot_function_fdf_struct.params has unexpected offset % instead of 32", ((cast(*void)(*instance.params)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_function_fdf_struct.params)) == 8, "gsl_multiroot_function_fdf_struct.params has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_function_fdf_struct.params)));
        assert(size_of(gsl_multiroot_function_fdf_struct) == 40, "gsl_multiroot_function_fdf_struct has size % instead of 40", size_of(gsl_multiroot_function_fdf_struct));
    }

    {
        instance: gsl_multiroot_fdfsolver_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_multiroot_fdfsolver_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver_type.name)) == 8, "gsl_multiroot_fdfsolver_type.name has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver_type.name)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 8, "gsl_multiroot_fdfsolver_type.size has unexpected offset % instead of 8", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver_type.size)) == 8, "gsl_multiroot_fdfsolver_type.size has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver_type.size)));
        assert(((cast(*void)(*instance.alloc)) - cast(*void)(*instance)) == 16, "gsl_multiroot_fdfsolver_type.alloc has unexpected offset % instead of 16", ((cast(*void)(*instance.alloc)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver_type.alloc)) == 8, "gsl_multiroot_fdfsolver_type.alloc has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver_type.alloc)));
        assert(((cast(*void)(*instance.set)) - cast(*void)(*instance)) == 24, "gsl_multiroot_fdfsolver_type.set has unexpected offset % instead of 24", ((cast(*void)(*instance.set)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver_type.set)) == 8, "gsl_multiroot_fdfsolver_type.set has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver_type.set)));
        assert(((cast(*void)(*instance.iterate)) - cast(*void)(*instance)) == 32, "gsl_multiroot_fdfsolver_type.iterate has unexpected offset % instead of 32", ((cast(*void)(*instance.iterate)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver_type.iterate)) == 8, "gsl_multiroot_fdfsolver_type.iterate has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver_type.iterate)));
        assert(((cast(*void)(*instance.free)) - cast(*void)(*instance)) == 40, "gsl_multiroot_fdfsolver_type.free has unexpected offset % instead of 40", ((cast(*void)(*instance.free)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver_type.free)) == 8, "gsl_multiroot_fdfsolver_type.free has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver_type.free)));
        assert(size_of(gsl_multiroot_fdfsolver_type) == 48, "gsl_multiroot_fdfsolver_type has size % instead of 48", size_of(gsl_multiroot_fdfsolver_type));
    }

    {
        instance: gsl_multiroot_fdfsolver;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_multiroot_fdfsolver.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver.type)) == 8, "gsl_multiroot_fdfsolver.type has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver.type)));
        assert(((cast(*void)(*instance.fdf)) - cast(*void)(*instance)) == 8, "gsl_multiroot_fdfsolver.fdf has unexpected offset % instead of 8", ((cast(*void)(*instance.fdf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver.fdf)) == 8, "gsl_multiroot_fdfsolver.fdf has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver.fdf)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 16, "gsl_multiroot_fdfsolver.x has unexpected offset % instead of 16", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver.x)) == 8, "gsl_multiroot_fdfsolver.x has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver.x)));
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 24, "gsl_multiroot_fdfsolver.f has unexpected offset % instead of 24", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver.f)) == 8, "gsl_multiroot_fdfsolver.f has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver.f)));
        assert(((cast(*void)(*instance.J)) - cast(*void)(*instance)) == 32, "gsl_multiroot_fdfsolver.J has unexpected offset % instead of 32", ((cast(*void)(*instance.J)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver.J)) == 8, "gsl_multiroot_fdfsolver.J has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver.J)));
        assert(((cast(*void)(*instance.dx)) - cast(*void)(*instance)) == 40, "gsl_multiroot_fdfsolver.dx has unexpected offset % instead of 40", ((cast(*void)(*instance.dx)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver.dx)) == 8, "gsl_multiroot_fdfsolver.dx has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver.dx)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 48, "gsl_multiroot_fdfsolver.state has unexpected offset % instead of 48", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multiroot_fdfsolver.state)) == 8, "gsl_multiroot_fdfsolver.state has unexpected size % instead of 8", size_of(type_of(gsl_multiroot_fdfsolver.state)));
        assert(size_of(gsl_multiroot_fdfsolver) == 56, "gsl_multiroot_fdfsolver has size % instead of 56", size_of(gsl_multiroot_fdfsolver));
    }

    {
        instance: gsl_multimin_function_struct;
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 0, "gsl_multimin_function_struct.f has unexpected offset % instead of 0", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_function_struct.f)) == 8, "gsl_multimin_function_struct.f has unexpected size % instead of 8", size_of(type_of(gsl_multimin_function_struct.f)));
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 8, "gsl_multimin_function_struct.n has unexpected offset % instead of 8", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_function_struct.n)) == 8, "gsl_multimin_function_struct.n has unexpected size % instead of 8", size_of(type_of(gsl_multimin_function_struct.n)));
        assert(((cast(*void)(*instance.params)) - cast(*void)(*instance)) == 16, "gsl_multimin_function_struct.params has unexpected offset % instead of 16", ((cast(*void)(*instance.params)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_function_struct.params)) == 8, "gsl_multimin_function_struct.params has unexpected size % instead of 8", size_of(type_of(gsl_multimin_function_struct.params)));
        assert(size_of(gsl_multimin_function_struct) == 24, "gsl_multimin_function_struct has size % instead of 24", size_of(gsl_multimin_function_struct));
    }

    {
        instance: gsl_multimin_function_fdf_struct;
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 0, "gsl_multimin_function_fdf_struct.f has unexpected offset % instead of 0", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_function_fdf_struct.f)) == 8, "gsl_multimin_function_fdf_struct.f has unexpected size % instead of 8", size_of(type_of(gsl_multimin_function_fdf_struct.f)));
        assert(((cast(*void)(*instance.df)) - cast(*void)(*instance)) == 8, "gsl_multimin_function_fdf_struct.df has unexpected offset % instead of 8", ((cast(*void)(*instance.df)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_function_fdf_struct.df)) == 8, "gsl_multimin_function_fdf_struct.df has unexpected size % instead of 8", size_of(type_of(gsl_multimin_function_fdf_struct.df)));
        assert(((cast(*void)(*instance.fdf)) - cast(*void)(*instance)) == 16, "gsl_multimin_function_fdf_struct.fdf has unexpected offset % instead of 16", ((cast(*void)(*instance.fdf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_function_fdf_struct.fdf)) == 8, "gsl_multimin_function_fdf_struct.fdf has unexpected size % instead of 8", size_of(type_of(gsl_multimin_function_fdf_struct.fdf)));
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 24, "gsl_multimin_function_fdf_struct.n has unexpected offset % instead of 24", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_function_fdf_struct.n)) == 8, "gsl_multimin_function_fdf_struct.n has unexpected size % instead of 8", size_of(type_of(gsl_multimin_function_fdf_struct.n)));
        assert(((cast(*void)(*instance.params)) - cast(*void)(*instance)) == 32, "gsl_multimin_function_fdf_struct.params has unexpected offset % instead of 32", ((cast(*void)(*instance.params)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_function_fdf_struct.params)) == 8, "gsl_multimin_function_fdf_struct.params has unexpected size % instead of 8", size_of(type_of(gsl_multimin_function_fdf_struct.params)));
        assert(size_of(gsl_multimin_function_fdf_struct) == 40, "gsl_multimin_function_fdf_struct has size % instead of 40", size_of(gsl_multimin_function_fdf_struct));
    }

    {
        instance: gsl_multimin_fminimizer_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_multimin_fminimizer_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fminimizer_type.name)) == 8, "gsl_multimin_fminimizer_type.name has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fminimizer_type.name)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 8, "gsl_multimin_fminimizer_type.size has unexpected offset % instead of 8", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fminimizer_type.size)) == 8, "gsl_multimin_fminimizer_type.size has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fminimizer_type.size)));
        assert(((cast(*void)(*instance.alloc)) - cast(*void)(*instance)) == 16, "gsl_multimin_fminimizer_type.alloc has unexpected offset % instead of 16", ((cast(*void)(*instance.alloc)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fminimizer_type.alloc)) == 8, "gsl_multimin_fminimizer_type.alloc has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fminimizer_type.alloc)));
        assert(((cast(*void)(*instance.set)) - cast(*void)(*instance)) == 24, "gsl_multimin_fminimizer_type.set has unexpected offset % instead of 24", ((cast(*void)(*instance.set)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fminimizer_type.set)) == 8, "gsl_multimin_fminimizer_type.set has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fminimizer_type.set)));
        assert(((cast(*void)(*instance.iterate)) - cast(*void)(*instance)) == 32, "gsl_multimin_fminimizer_type.iterate has unexpected offset % instead of 32", ((cast(*void)(*instance.iterate)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fminimizer_type.iterate)) == 8, "gsl_multimin_fminimizer_type.iterate has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fminimizer_type.iterate)));
        assert(((cast(*void)(*instance.free)) - cast(*void)(*instance)) == 40, "gsl_multimin_fminimizer_type.free has unexpected offset % instead of 40", ((cast(*void)(*instance.free)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fminimizer_type.free)) == 8, "gsl_multimin_fminimizer_type.free has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fminimizer_type.free)));
        assert(size_of(gsl_multimin_fminimizer_type) == 48, "gsl_multimin_fminimizer_type has size % instead of 48", size_of(gsl_multimin_fminimizer_type));
    }

    {
        instance: gsl_multimin_fminimizer;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_multimin_fminimizer.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fminimizer.type)) == 8, "gsl_multimin_fminimizer.type has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fminimizer.type)));
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 8, "gsl_multimin_fminimizer.f has unexpected offset % instead of 8", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fminimizer.f)) == 8, "gsl_multimin_fminimizer.f has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fminimizer.f)));
        assert(((cast(*void)(*instance.fval)) - cast(*void)(*instance)) == 16, "gsl_multimin_fminimizer.fval has unexpected offset % instead of 16", ((cast(*void)(*instance.fval)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fminimizer.fval)) == 8, "gsl_multimin_fminimizer.fval has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fminimizer.fval)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 24, "gsl_multimin_fminimizer.x has unexpected offset % instead of 24", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fminimizer.x)) == 8, "gsl_multimin_fminimizer.x has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fminimizer.x)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 32, "gsl_multimin_fminimizer.size has unexpected offset % instead of 32", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fminimizer.size)) == 8, "gsl_multimin_fminimizer.size has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fminimizer.size)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 40, "gsl_multimin_fminimizer.state has unexpected offset % instead of 40", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fminimizer.state)) == 8, "gsl_multimin_fminimizer.state has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fminimizer.state)));
        assert(size_of(gsl_multimin_fminimizer) == 48, "gsl_multimin_fminimizer has size % instead of 48", size_of(gsl_multimin_fminimizer));
    }

    {
        instance: gsl_multimin_fdfminimizer_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_multimin_fdfminimizer_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer_type.name)) == 8, "gsl_multimin_fdfminimizer_type.name has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer_type.name)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 8, "gsl_multimin_fdfminimizer_type.size has unexpected offset % instead of 8", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer_type.size)) == 8, "gsl_multimin_fdfminimizer_type.size has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer_type.size)));
        assert(((cast(*void)(*instance.alloc)) - cast(*void)(*instance)) == 16, "gsl_multimin_fdfminimizer_type.alloc has unexpected offset % instead of 16", ((cast(*void)(*instance.alloc)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer_type.alloc)) == 8, "gsl_multimin_fdfminimizer_type.alloc has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer_type.alloc)));
        assert(((cast(*void)(*instance.set)) - cast(*void)(*instance)) == 24, "gsl_multimin_fdfminimizer_type.set has unexpected offset % instead of 24", ((cast(*void)(*instance.set)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer_type.set)) == 8, "gsl_multimin_fdfminimizer_type.set has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer_type.set)));
        assert(((cast(*void)(*instance.iterate)) - cast(*void)(*instance)) == 32, "gsl_multimin_fdfminimizer_type.iterate has unexpected offset % instead of 32", ((cast(*void)(*instance.iterate)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer_type.iterate)) == 8, "gsl_multimin_fdfminimizer_type.iterate has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer_type.iterate)));
        assert(((cast(*void)(*instance.restart)) - cast(*void)(*instance)) == 40, "gsl_multimin_fdfminimizer_type.restart has unexpected offset % instead of 40", ((cast(*void)(*instance.restart)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer_type.restart)) == 8, "gsl_multimin_fdfminimizer_type.restart has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer_type.restart)));
        assert(((cast(*void)(*instance.free)) - cast(*void)(*instance)) == 48, "gsl_multimin_fdfminimizer_type.free has unexpected offset % instead of 48", ((cast(*void)(*instance.free)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer_type.free)) == 8, "gsl_multimin_fdfminimizer_type.free has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer_type.free)));
        assert(size_of(gsl_multimin_fdfminimizer_type) == 56, "gsl_multimin_fdfminimizer_type has size % instead of 56", size_of(gsl_multimin_fdfminimizer_type));
    }

    {
        instance: gsl_multimin_fdfminimizer;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_multimin_fdfminimizer.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer.type)) == 8, "gsl_multimin_fdfminimizer.type has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer.type)));
        assert(((cast(*void)(*instance.fdf)) - cast(*void)(*instance)) == 8, "gsl_multimin_fdfminimizer.fdf has unexpected offset % instead of 8", ((cast(*void)(*instance.fdf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer.fdf)) == 8, "gsl_multimin_fdfminimizer.fdf has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer.fdf)));
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 16, "gsl_multimin_fdfminimizer.f has unexpected offset % instead of 16", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer.f)) == 8, "gsl_multimin_fdfminimizer.f has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer.f)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 24, "gsl_multimin_fdfminimizer.x has unexpected offset % instead of 24", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer.x)) == 8, "gsl_multimin_fdfminimizer.x has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer.x)));
        assert(((cast(*void)(*instance.gradient)) - cast(*void)(*instance)) == 32, "gsl_multimin_fdfminimizer.gradient has unexpected offset % instead of 32", ((cast(*void)(*instance.gradient)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer.gradient)) == 8, "gsl_multimin_fdfminimizer.gradient has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer.gradient)));
        assert(((cast(*void)(*instance.dx)) - cast(*void)(*instance)) == 40, "gsl_multimin_fdfminimizer.dx has unexpected offset % instead of 40", ((cast(*void)(*instance.dx)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer.dx)) == 8, "gsl_multimin_fdfminimizer.dx has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer.dx)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 48, "gsl_multimin_fdfminimizer.state has unexpected offset % instead of 48", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multimin_fdfminimizer.state)) == 8, "gsl_multimin_fdfminimizer.state has unexpected size % instead of 8", size_of(type_of(gsl_multimin_fdfminimizer.state)));
        assert(size_of(gsl_multimin_fdfminimizer) == 56, "gsl_multimin_fdfminimizer has size % instead of 56", size_of(gsl_multimin_fdfminimizer));
    }

    {
        instance: gsl_multifit_function_struct;
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 0, "gsl_multifit_function_struct.f has unexpected offset % instead of 0", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_function_struct.f)) == 8, "gsl_multifit_function_struct.f has unexpected size % instead of 8", size_of(type_of(gsl_multifit_function_struct.f)));
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 8, "gsl_multifit_function_struct.n has unexpected offset % instead of 8", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_function_struct.n)) == 8, "gsl_multifit_function_struct.n has unexpected size % instead of 8", size_of(type_of(gsl_multifit_function_struct.n)));
        assert(((cast(*void)(*instance.p)) - cast(*void)(*instance)) == 16, "gsl_multifit_function_struct.p has unexpected offset % instead of 16", ((cast(*void)(*instance.p)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_function_struct.p)) == 8, "gsl_multifit_function_struct.p has unexpected size % instead of 8", size_of(type_of(gsl_multifit_function_struct.p)));
        assert(((cast(*void)(*instance.params)) - cast(*void)(*instance)) == 24, "gsl_multifit_function_struct.params has unexpected offset % instead of 24", ((cast(*void)(*instance.params)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_function_struct.params)) == 8, "gsl_multifit_function_struct.params has unexpected size % instead of 8", size_of(type_of(gsl_multifit_function_struct.params)));
        assert(size_of(gsl_multifit_function_struct) == 32, "gsl_multifit_function_struct has size % instead of 32", size_of(gsl_multifit_function_struct));
    }

    {
        instance: gsl_multifit_fsolver_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_multifit_fsolver_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fsolver_type.name)) == 8, "gsl_multifit_fsolver_type.name has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fsolver_type.name)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 8, "gsl_multifit_fsolver_type.size has unexpected offset % instead of 8", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fsolver_type.size)) == 8, "gsl_multifit_fsolver_type.size has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fsolver_type.size)));
        assert(((cast(*void)(*instance.alloc)) - cast(*void)(*instance)) == 16, "gsl_multifit_fsolver_type.alloc has unexpected offset % instead of 16", ((cast(*void)(*instance.alloc)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fsolver_type.alloc)) == 8, "gsl_multifit_fsolver_type.alloc has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fsolver_type.alloc)));
        assert(((cast(*void)(*instance.set)) - cast(*void)(*instance)) == 24, "gsl_multifit_fsolver_type.set has unexpected offset % instead of 24", ((cast(*void)(*instance.set)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fsolver_type.set)) == 8, "gsl_multifit_fsolver_type.set has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fsolver_type.set)));
        assert(((cast(*void)(*instance.iterate)) - cast(*void)(*instance)) == 32, "gsl_multifit_fsolver_type.iterate has unexpected offset % instead of 32", ((cast(*void)(*instance.iterate)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fsolver_type.iterate)) == 8, "gsl_multifit_fsolver_type.iterate has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fsolver_type.iterate)));
        assert(((cast(*void)(*instance.free)) - cast(*void)(*instance)) == 40, "gsl_multifit_fsolver_type.free has unexpected offset % instead of 40", ((cast(*void)(*instance.free)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fsolver_type.free)) == 8, "gsl_multifit_fsolver_type.free has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fsolver_type.free)));
        assert(size_of(gsl_multifit_fsolver_type) == 48, "gsl_multifit_fsolver_type has size % instead of 48", size_of(gsl_multifit_fsolver_type));
    }

    {
        instance: gsl_multifit_fsolver;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_multifit_fsolver.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fsolver.type)) == 8, "gsl_multifit_fsolver.type has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fsolver.type)));
        assert(((cast(*void)(*instance.function)) - cast(*void)(*instance)) == 8, "gsl_multifit_fsolver.function has unexpected offset % instead of 8", ((cast(*void)(*instance.function)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fsolver.function)) == 8, "gsl_multifit_fsolver.function has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fsolver.function)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 16, "gsl_multifit_fsolver.x has unexpected offset % instead of 16", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fsolver.x)) == 8, "gsl_multifit_fsolver.x has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fsolver.x)));
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 24, "gsl_multifit_fsolver.f has unexpected offset % instead of 24", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fsolver.f)) == 8, "gsl_multifit_fsolver.f has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fsolver.f)));
        assert(((cast(*void)(*instance.dx)) - cast(*void)(*instance)) == 32, "gsl_multifit_fsolver.dx has unexpected offset % instead of 32", ((cast(*void)(*instance.dx)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fsolver.dx)) == 8, "gsl_multifit_fsolver.dx has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fsolver.dx)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 40, "gsl_multifit_fsolver.state has unexpected offset % instead of 40", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fsolver.state)) == 8, "gsl_multifit_fsolver.state has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fsolver.state)));
        assert(size_of(gsl_multifit_fsolver) == 48, "gsl_multifit_fsolver has size % instead of 48", size_of(gsl_multifit_fsolver));
    }

    {
        instance: gsl_multifit_function_fdf_struct;
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 0, "gsl_multifit_function_fdf_struct.f has unexpected offset % instead of 0", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_function_fdf_struct.f)) == 8, "gsl_multifit_function_fdf_struct.f has unexpected size % instead of 8", size_of(type_of(gsl_multifit_function_fdf_struct.f)));
        assert(((cast(*void)(*instance.df)) - cast(*void)(*instance)) == 8, "gsl_multifit_function_fdf_struct.df has unexpected offset % instead of 8", ((cast(*void)(*instance.df)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_function_fdf_struct.df)) == 8, "gsl_multifit_function_fdf_struct.df has unexpected size % instead of 8", size_of(type_of(gsl_multifit_function_fdf_struct.df)));
        assert(((cast(*void)(*instance.fdf)) - cast(*void)(*instance)) == 16, "gsl_multifit_function_fdf_struct.fdf has unexpected offset % instead of 16", ((cast(*void)(*instance.fdf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_function_fdf_struct.fdf)) == 8, "gsl_multifit_function_fdf_struct.fdf has unexpected size % instead of 8", size_of(type_of(gsl_multifit_function_fdf_struct.fdf)));
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 24, "gsl_multifit_function_fdf_struct.n has unexpected offset % instead of 24", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_function_fdf_struct.n)) == 8, "gsl_multifit_function_fdf_struct.n has unexpected size % instead of 8", size_of(type_of(gsl_multifit_function_fdf_struct.n)));
        assert(((cast(*void)(*instance.p)) - cast(*void)(*instance)) == 32, "gsl_multifit_function_fdf_struct.p has unexpected offset % instead of 32", ((cast(*void)(*instance.p)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_function_fdf_struct.p)) == 8, "gsl_multifit_function_fdf_struct.p has unexpected size % instead of 8", size_of(type_of(gsl_multifit_function_fdf_struct.p)));
        assert(((cast(*void)(*instance.params)) - cast(*void)(*instance)) == 40, "gsl_multifit_function_fdf_struct.params has unexpected offset % instead of 40", ((cast(*void)(*instance.params)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_function_fdf_struct.params)) == 8, "gsl_multifit_function_fdf_struct.params has unexpected size % instead of 8", size_of(type_of(gsl_multifit_function_fdf_struct.params)));
        assert(((cast(*void)(*instance.nevalf)) - cast(*void)(*instance)) == 48, "gsl_multifit_function_fdf_struct.nevalf has unexpected offset % instead of 48", ((cast(*void)(*instance.nevalf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_function_fdf_struct.nevalf)) == 8, "gsl_multifit_function_fdf_struct.nevalf has unexpected size % instead of 8", size_of(type_of(gsl_multifit_function_fdf_struct.nevalf)));
        assert(((cast(*void)(*instance.nevaldf)) - cast(*void)(*instance)) == 56, "gsl_multifit_function_fdf_struct.nevaldf has unexpected offset % instead of 56", ((cast(*void)(*instance.nevaldf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_function_fdf_struct.nevaldf)) == 8, "gsl_multifit_function_fdf_struct.nevaldf has unexpected size % instead of 8", size_of(type_of(gsl_multifit_function_fdf_struct.nevaldf)));
        assert(size_of(gsl_multifit_function_fdf_struct) == 64, "gsl_multifit_function_fdf_struct has size % instead of 64", size_of(gsl_multifit_function_fdf_struct));
    }

    {
        instance: gsl_multifit_fdfsolver_type;
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 0, "gsl_multifit_fdfsolver_type.name has unexpected offset % instead of 0", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver_type.name)) == 8, "gsl_multifit_fdfsolver_type.name has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver_type.name)));
        assert(((cast(*void)(*instance.size)) - cast(*void)(*instance)) == 8, "gsl_multifit_fdfsolver_type.size has unexpected offset % instead of 8", ((cast(*void)(*instance.size)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver_type.size)) == 8, "gsl_multifit_fdfsolver_type.size has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver_type.size)));
        assert(((cast(*void)(*instance.alloc)) - cast(*void)(*instance)) == 16, "gsl_multifit_fdfsolver_type.alloc has unexpected offset % instead of 16", ((cast(*void)(*instance.alloc)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver_type.alloc)) == 8, "gsl_multifit_fdfsolver_type.alloc has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver_type.alloc)));
        assert(((cast(*void)(*instance.set)) - cast(*void)(*instance)) == 24, "gsl_multifit_fdfsolver_type.set has unexpected offset % instead of 24", ((cast(*void)(*instance.set)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver_type.set)) == 8, "gsl_multifit_fdfsolver_type.set has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver_type.set)));
        assert(((cast(*void)(*instance.iterate)) - cast(*void)(*instance)) == 32, "gsl_multifit_fdfsolver_type.iterate has unexpected offset % instead of 32", ((cast(*void)(*instance.iterate)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver_type.iterate)) == 8, "gsl_multifit_fdfsolver_type.iterate has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver_type.iterate)));
        assert(((cast(*void)(*instance.gradient)) - cast(*void)(*instance)) == 40, "gsl_multifit_fdfsolver_type.gradient has unexpected offset % instead of 40", ((cast(*void)(*instance.gradient)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver_type.gradient)) == 8, "gsl_multifit_fdfsolver_type.gradient has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver_type.gradient)));
        assert(((cast(*void)(*instance.jac)) - cast(*void)(*instance)) == 48, "gsl_multifit_fdfsolver_type.jac has unexpected offset % instead of 48", ((cast(*void)(*instance.jac)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver_type.jac)) == 8, "gsl_multifit_fdfsolver_type.jac has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver_type.jac)));
        assert(((cast(*void)(*instance.free)) - cast(*void)(*instance)) == 56, "gsl_multifit_fdfsolver_type.free has unexpected offset % instead of 56", ((cast(*void)(*instance.free)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver_type.free)) == 8, "gsl_multifit_fdfsolver_type.free has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver_type.free)));
        assert(size_of(gsl_multifit_fdfsolver_type) == 64, "gsl_multifit_fdfsolver_type has size % instead of 64", size_of(gsl_multifit_fdfsolver_type));
    }

    {
        instance: gsl_multifit_fdfsolver;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "gsl_multifit_fdfsolver.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver.type)) == 8, "gsl_multifit_fdfsolver.type has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver.type)));
        assert(((cast(*void)(*instance.fdf)) - cast(*void)(*instance)) == 8, "gsl_multifit_fdfsolver.fdf has unexpected offset % instead of 8", ((cast(*void)(*instance.fdf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver.fdf)) == 8, "gsl_multifit_fdfsolver.fdf has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver.fdf)));
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 16, "gsl_multifit_fdfsolver.x has unexpected offset % instead of 16", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver.x)) == 8, "gsl_multifit_fdfsolver.x has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver.x)));
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 24, "gsl_multifit_fdfsolver.f has unexpected offset % instead of 24", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver.f)) == 8, "gsl_multifit_fdfsolver.f has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver.f)));
        assert(((cast(*void)(*instance.dx)) - cast(*void)(*instance)) == 32, "gsl_multifit_fdfsolver.dx has unexpected offset % instead of 32", ((cast(*void)(*instance.dx)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver.dx)) == 8, "gsl_multifit_fdfsolver.dx has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver.dx)));
        assert(((cast(*void)(*instance.g)) - cast(*void)(*instance)) == 40, "gsl_multifit_fdfsolver.g has unexpected offset % instead of 40", ((cast(*void)(*instance.g)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver.g)) == 8, "gsl_multifit_fdfsolver.g has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver.g)));
        assert(((cast(*void)(*instance.sqrt_wts)) - cast(*void)(*instance)) == 48, "gsl_multifit_fdfsolver.sqrt_wts has unexpected offset % instead of 48", ((cast(*void)(*instance.sqrt_wts)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver.sqrt_wts)) == 8, "gsl_multifit_fdfsolver.sqrt_wts has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver.sqrt_wts)));
        assert(((cast(*void)(*instance.niter)) - cast(*void)(*instance)) == 56, "gsl_multifit_fdfsolver.niter has unexpected offset % instead of 56", ((cast(*void)(*instance.niter)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver.niter)) == 8, "gsl_multifit_fdfsolver.niter has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver.niter)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 64, "gsl_multifit_fdfsolver.state has unexpected offset % instead of 64", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfsolver.state)) == 8, "gsl_multifit_fdfsolver.state has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfsolver.state)));
        assert(size_of(gsl_multifit_fdfsolver) == 72, "gsl_multifit_fdfsolver has size % instead of 72", size_of(gsl_multifit_fdfsolver));
    }

    {
        instance: gsl_multifit_fdfridge;
        assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "gsl_multifit_fdfridge.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfridge.n)) == 8, "gsl_multifit_fdfridge.n has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfridge.n)));
        assert(((cast(*void)(*instance.p)) - cast(*void)(*instance)) == 8, "gsl_multifit_fdfridge.p has unexpected offset % instead of 8", ((cast(*void)(*instance.p)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfridge.p)) == 8, "gsl_multifit_fdfridge.p has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfridge.p)));
        assert(((cast(*void)(*instance.lambda)) - cast(*void)(*instance)) == 16, "gsl_multifit_fdfridge.lambda has unexpected offset % instead of 16", ((cast(*void)(*instance.lambda)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfridge.lambda)) == 8, "gsl_multifit_fdfridge.lambda has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfridge.lambda)));
        assert(((cast(*void)(*instance.L_diag)) - cast(*void)(*instance)) == 24, "gsl_multifit_fdfridge.L_diag has unexpected offset % instead of 24", ((cast(*void)(*instance.L_diag)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfridge.L_diag)) == 8, "gsl_multifit_fdfridge.L_diag has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfridge.L_diag)));
        assert(((cast(*void)(*instance.L)) - cast(*void)(*instance)) == 32, "gsl_multifit_fdfridge.L has unexpected offset % instead of 32", ((cast(*void)(*instance.L)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfridge.L)) == 8, "gsl_multifit_fdfridge.L has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfridge.L)));
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 40, "gsl_multifit_fdfridge.f has unexpected offset % instead of 40", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfridge.f)) == 8, "gsl_multifit_fdfridge.f has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfridge.f)));
        assert(((cast(*void)(*instance.wts)) - cast(*void)(*instance)) == 48, "gsl_multifit_fdfridge.wts has unexpected offset % instead of 48", ((cast(*void)(*instance.wts)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfridge.wts)) == 8, "gsl_multifit_fdfridge.wts has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfridge.wts)));
        assert(((cast(*void)(*instance.s)) - cast(*void)(*instance)) == 56, "gsl_multifit_fdfridge.s has unexpected offset % instead of 56", ((cast(*void)(*instance.s)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfridge.s)) == 8, "gsl_multifit_fdfridge.s has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfridge.s)));
        assert(((cast(*void)(*instance.fdf)) - cast(*void)(*instance)) == 64, "gsl_multifit_fdfridge.fdf has unexpected offset % instead of 64", ((cast(*void)(*instance.fdf)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfridge.fdf)) == 8, "gsl_multifit_fdfridge.fdf has unexpected size % instead of 8", size_of(type_of(gsl_multifit_fdfridge.fdf)));
        assert(((cast(*void)(*instance.fdftik)) - cast(*void)(*instance)) == 72, "gsl_multifit_fdfridge.fdftik has unexpected offset % instead of 72", ((cast(*void)(*instance.fdftik)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_multifit_fdfridge.fdftik)) == 64, "gsl_multifit_fdfridge.fdftik has unexpected size % instead of 64", size_of(type_of(gsl_multifit_fdfridge.fdftik)));
        assert(size_of(gsl_multifit_fdfridge) == 136, "gsl_multifit_fdfridge has size % instead of 136", size_of(gsl_multifit_fdfridge));
    }

    {
        instance: gsl_ieee_float_rep;
        assert(((cast(*void)(*instance.sign)) - cast(*void)(*instance)) == 0, "gsl_ieee_float_rep.sign has unexpected offset % instead of 0", ((cast(*void)(*instance.sign)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_ieee_float_rep.sign)) == 4, "gsl_ieee_float_rep.sign has unexpected size % instead of 4", size_of(type_of(gsl_ieee_float_rep.sign)));
        assert(((cast(*void)(*instance.mantissa)) - cast(*void)(*instance)) == 4, "gsl_ieee_float_rep.mantissa has unexpected offset % instead of 4", ((cast(*void)(*instance.mantissa)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_ieee_float_rep.mantissa)) == 24, "gsl_ieee_float_rep.mantissa has unexpected size % instead of 24", size_of(type_of(gsl_ieee_float_rep.mantissa)));
        assert(((cast(*void)(*instance.exponent)) - cast(*void)(*instance)) == 28, "gsl_ieee_float_rep.exponent has unexpected offset % instead of 28", ((cast(*void)(*instance.exponent)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_ieee_float_rep.exponent)) == 4, "gsl_ieee_float_rep.exponent has unexpected size % instead of 4", size_of(type_of(gsl_ieee_float_rep.exponent)));
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 32, "gsl_ieee_float_rep.type has unexpected offset % instead of 32", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_ieee_float_rep.type)) == 4, "gsl_ieee_float_rep.type has unexpected size % instead of 4", size_of(type_of(gsl_ieee_float_rep.type)));
        assert(size_of(gsl_ieee_float_rep) == 36, "gsl_ieee_float_rep has size % instead of 36", size_of(gsl_ieee_float_rep));
    }

    {
        instance: gsl_ieee_double_rep;
        assert(((cast(*void)(*instance.sign)) - cast(*void)(*instance)) == 0, "gsl_ieee_double_rep.sign has unexpected offset % instead of 0", ((cast(*void)(*instance.sign)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_ieee_double_rep.sign)) == 4, "gsl_ieee_double_rep.sign has unexpected size % instead of 4", size_of(type_of(gsl_ieee_double_rep.sign)));
        assert(((cast(*void)(*instance.mantissa)) - cast(*void)(*instance)) == 4, "gsl_ieee_double_rep.mantissa has unexpected offset % instead of 4", ((cast(*void)(*instance.mantissa)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_ieee_double_rep.mantissa)) == 53, "gsl_ieee_double_rep.mantissa has unexpected size % instead of 53", size_of(type_of(gsl_ieee_double_rep.mantissa)));
        assert(((cast(*void)(*instance.exponent)) - cast(*void)(*instance)) == 60, "gsl_ieee_double_rep.exponent has unexpected offset % instead of 60", ((cast(*void)(*instance.exponent)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_ieee_double_rep.exponent)) == 4, "gsl_ieee_double_rep.exponent has unexpected size % instead of 4", size_of(type_of(gsl_ieee_double_rep.exponent)));
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 64, "gsl_ieee_double_rep.type has unexpected offset % instead of 64", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(gsl_ieee_double_rep.type)) == 4, "gsl_ieee_double_rep.type has unexpected size % instead of 4", size_of(type_of(gsl_ieee_double_rep.type)));
        assert(size_of(gsl_ieee_double_rep) == 68, "gsl_ieee_double_rep has size % instead of 68", size_of(gsl_ieee_double_rep));
    }
}

